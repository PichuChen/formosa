
#include <stdio.h>
#include <stdlib.h>
#include <sys/fcntl.h>
#include <string.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

#include "config.h"
#define _BBS_CONF_C_
#include "conf.h"

#define BBS_CONF	"bbs.conf"
#define BBS_IMG		"bbs.img"

#define SC_BUFSIZE		2048
#define SC_KEYSIZE		128

char file_buffer[SC_BUFSIZE];

struct sdefine
{
	char *key, *str;
	int val;
}
 *bbsvar;

char *bbsconf_buf;
int bbsconf_key, bbsconf_len;


void *
bbsconf_addstr (str)
     char *str;
{
	char *buf;

	if (bbsconf_len < SC_BUFSIZE)
	{
		buf = bbsconf_buf + bbsconf_len;
		strcpy (buf, str);
		bbsconf_len += strlen (str) + 1;
		return buf;
	}
	return (void *)NULL;
}


char *
bbsconf_str (key)
     char *key;
{
	int n;

	for (n = 0; n < bbsconf_key; n++)
		if (strcmp (key, bbsvar[n].key) == 0)
			return (bbsvar[n].str);
	return NULL;
}

int
bbsconf_eval (key)
     char *key;
{
	int n;

	for (n = 0; n < bbsconf_key; n++)
		if (strcmp (key, bbsvar[n].key) == 0)
			return (bbsvar[n].val);
	if (*key < '0' || *key > '9')
	{
/*	
		sprintf (genbuf, "bbsconf: unknown key: %s.", key);
		report (genbuf);
*/		
	}
	return (strtol (key, NULL, 0));
}

void
bbsconf_addkey (key, str, val)
     char *key, *str;
     int val;
{
	if (bbsconf_key < SC_KEYSIZE)
	{
		if (str == NULL)
			str = bbsconf_buf;
		else
			str = bbsconf_addstr (str);
		bbsvar[bbsconf_key].key = bbsconf_addstr (key);
		bbsvar[bbsconf_key].str = str;
		bbsvar[bbsconf_key].val = val;
		bbsconf_key++;
/*
   sprintf( genbuf, "%s = %s (%x).", key, str, val );
   report( genbuf );
 */
	}
}


void
parse_bbsconf (fname)
     char *fname;
{
	FILE *fp;
	char buf[256], tmp[256], *ptr;
	char *key, *str;
	int val;

	if ((fp = fopen (fname, "r")) == NULL)
	{
		return;
	}
	bbsconf_addstr ("(null ptr)");
	while (fgets (buf, sizeof (buf), fp) != NULL)
	{
		ptr = buf;
		while (*ptr == ' ' || *ptr == '\t')
			ptr++;

		if (*ptr == '#' || *ptr == '\n')
			continue;
		
		key = strtok (ptr, "=#\n");
		str = strtok (NULL, "#\n");
	#if 0
		if (key != NULL & str != NULL)	/* why only 1 & */
	#endif
		if (key != NULL && str != NULL)
		{
			strtok (key, " \t");
			while (*str == ' ' || *str == '\t')
				str++;
			if (*str == '"')
			{
				str++;
				strtok (str, "\"");
				val = atoi (str);
				bbsconf_addkey (key, str, val);
			}
			else
			{
				val = 0;
				strcpy (tmp, str);
				ptr = strtok (tmp, ", \t");
				while (ptr != NULL)
				{
					val |= bbsconf_eval (ptr);
					ptr = strtok (NULL, ", \t");
				}
				bbsconf_addkey (key, NULL, val);
			}
		}
		else
		{
/*		
			report (ptr);
*/			
		}
	}
	fclose (fp);
}


struct bbsheader
{
	char *buf;
	int key, len;
}
shead;


void
build_bbsconf (configfile, imgfile)
     char *configfile, *imgfile;
{
	struct sdefine *old_bbsvar;
	char *old_buf;
	int old_key, old_len;
	int fh;

	old_bbsvar = bbsvar;
	old_key = bbsconf_key;
	old_buf = bbsconf_buf;
	old_len = bbsconf_len;
	
	if((bbsvar = (void *) malloc (SC_KEYSIZE * sizeof (struct sdefine))) == NULL)
		exit(1);
	bbsconf_key = 0;	
	
	if((bbsconf_buf = (void *) malloc (SC_BUFSIZE)) == NULL)
		exit(1);
	bbsconf_len = 0;
	
	parse_bbsconf (configfile);
	
	if ((fh = open (imgfile, O_WRONLY | O_CREAT | O_TRUNC, 0600)) > 0)
	{
		shead.buf = bbsconf_buf;
		shead.key = bbsconf_key;
		shead.len = bbsconf_len;
		write (fh, &shead, sizeof (shead));
		write (fh, bbsvar, bbsconf_key * sizeof (struct sdefine));
		write (fh, bbsconf_buf, bbsconf_len);
		close (fh);
	}
	free (bbsvar);
	free (bbsconf_buf);
	
	bbsvar = old_bbsvar;
	bbsconf_key = old_key;
	bbsconf_buf = old_buf;
	bbsconf_len = old_len;
}


void
load_bbsconf_image (imgfile)
     char *imgfile;
{
	struct stat st;
	char *ptr;
	int fh, n, diff;


	if ((fh = open (imgfile, O_RDONLY)) > 0)
	{
		fstat (fh, &st);
		ptr = file_buffer;
		read (fh, &shead, sizeof (shead));
		if (st.st_size > SC_BUFSIZE)	/* TODO */
		{
			close(fh);
			return;
		}
		read (fh, ptr, st.st_size);
		close (fh);

		bbsvar = (void *) ptr;
		ptr += shead.key * sizeof (struct sdefine);
		bbsconf_buf = (void *) ptr;
/*		ptr += shead.len;*/
		bbsconf_key = shead.key;
		bbsconf_len = shead.len;
/*
   sprintf( genbuf, "buf = %d, %d", bbsvar, bbsconf_buf );
   report( genbuf );
   sprintf( genbuf, "%d, %d, %d, %s", shead.buf, shead.len,
            shead.key, bbsconf_buf );
   report( genbuf );
 */
		diff = bbsconf_buf - shead.buf;
		for (n = 0; n < bbsconf_key; n++)
		{
			bbsvar[n].key += diff;
			bbsvar[n].str += diff;
		}
	}
}


void
load_bbsconf ()
{
	char path[255], fname[255];
	struct stat st;

	sprintf(fname, "conf/%s", BBS_CONF);
	sprintf(path, "conf/%s", BBS_IMG);	
	if (stat(path, &st) != 0)
	{
		build_bbsconf (fname, path);
	}
	load_bbsconf_image(path);
		
	BBSNAME = bbsconf_str("BBSNAME");		/* ¯¸¦W (Short) */
	if (!BBSNAME)
		BBSNAME = "ForBBS";		/* ¯¸¦W (Short) */
	BBSTITLE = bbsconf_str("BBSTITLE");		/* ¯¸¦W (Long) */
	if (!BBSTITLE)
		BBSTITLE = "FormosaBBS System";		/* ¯¸¦W (Long) */
	if (!MAILSERVER)
		MAILSERVER = "127.0.0.1";
	MULTILOGINS = bbsconf_eval("MULTILOGINS");		/* ³Ì¦h¤¹³\¦P®É´X¦¸­«ÂÐ¤W½u */
	if (!MULTILOGINS)
		MULTILOGINS = 1;
	MAX_SIG_LINES = bbsconf_eval("MAX_SIG_LINES");		/* Ã±¦WÀÉ¦æ¼Æ */
	if (!MAX_SIG_LINES)
		MAX_SIG_LINES = 4;
	MAX_SIG_NUM = bbsconf_eval("MAX_SIG_NUM");	/* Ã±¦WÀÉ­Ó¼Æ */
	if (!MAX_SIG_NUM)
		MAX_SIG_NUM = 3;
	IDLE_TIMEOUT = bbsconf_eval("IDLE_TIMEOUT");		/* ¨Ï¥ÎªÌ¶¢¸m®É¶¡ */
	if (!IDLE_TIMEOUT)
		IDLE_TIMEOUT = 40;
	MAX_MAILGROUPS = bbsconf_eval("MAX_MAILGROUPS");	/* ¸s²Õ±H«H¤H¼Æ */
	if (!MAX_MAILGROUPS)
		MAX_MAILGROUPS = 70;
	MAX_KEEP_MAIL = bbsconf_eval("MAX_KEEP_MAIL");	/* ¤@¯ë¨Ï¥ÎªÌ«H½c«O¯d«H¥ó«Ê¼Æ */
	if (!MAX_KEEP_MAIL)
		MAX_KEEP_MAIL = 100;
	SPEC_MAX_KEEP_MAIL = bbsconf_eval("SPEC_MAX_KEEP_MAIL");	/* ªO¥D«H½c«O¯d«H¥ó«Ê¼Æ */
	if (!SPEC_MAX_KEEP_MAIL)
		SPEC_MAX_KEEP_MAIL = 200;
	MAX_MAIL_SIZE = bbsconf_eval("MAX_MAIL_SIZE");	/* ³æ«Ê«H¥ó³Ì¤j®e¶q */
	if (!MAX_MAIL_SIZE)
		MAX_MAIL_SIZE = 32768;
	MAX_FRIENDS = bbsconf_eval("MAX_FRIENDS");	/* ¨C¤H¦n¤Í­Ó¼Æ¤W­­ */
	if (!MAX_FRIENDS)
		MAX_FRIENDS = 1000;
	MENU_TITLE_COLOR = bbsconf_str("MENU_TITLE_COLOR");
	if (MENU_TITLE_COLOR[0] == '\0')
		strcpy(MENU_TITLE_COLOR, "[1;37;44m");
	MENU_TITLE_COLOR1 = bbsconf_str("MENU_TITLE_COLOR1");
	if (MENU_TITLE_COLOR1[0] == '\0')
		strcpy(MENU_TITLE_COLOR1, "[1;36;44m");
	CHATPORT = bbsconf_eval("CHATPORT");	/* port numbers for the chat rooms */
	if (!CHATPORT)
		CHATPORT = 6177;

	MAILSERVER = bbsconf_str("MAILSERVER");	/* SMTP Server */
	MAX_GUEST_LOGINS = bbsconf_eval("MAX_GUEST_LOGINS");	/* ¦P®É½u¤W°ÑÆ[±b¸¹­Ó¼Æ */	
	_STR_BOARD_GUEST = bbsconf_str("_STR_BOARD_GUEST");			

#ifdef PHBBS
	MAX_SIG_LINES =6;		/* Ã±¦WÀÉ¦æ¼Æ */
	BBSNAME = "PHBBS";		/* ¯¸¦W (Short) */
	BBSTITLE = "¼ê´ò¿¤±Ð¨|ºô¸ô¤¤¤ß";		/* ¯¸¦W (Long) */
	MAX_GUEST_LOGINS = 100;	/* ¦P®É½u¤W°ÑÆ[±b¸¹­Ó¼Æ */
	_STR_BOARD_GUEST = "sysop test";
	return;
#endif			
	
#if 0
TODO
	BBSLOG_IDLE_OUT = "Yes"					/* ¶¢¸mÂ÷½u°O¿ý */
	BBSLOG_MAIL = "No"						/* ±H«H¦Ü¯¸¥~°O¿ý */
	ACTFILE = "conf/actfile"				/* Åã¥Ü¥¦¯¸¤W½u¤H¼Æ (for nsysubbs) */
	BBS_UID = 9999 
	BBS_GID = 999
	HOMEBBS = bbsconf_str("HOMEBBS");
	SPOOL_MAIL = bbsconf_str("SPOOL_MAIL");
	MAXACTIVE = 2048						/* ³Ì¦h¤¹³\¦P®É¤W½u¤H¼Æ */
	MAXBOARD = 512							/* ¬ÝªO­Ó¼Æ */
	CHROOT_BBS = "Yes" 
	SYSOP_BIN = "Yes" 
	NSYSUBBS = "Yes" 
	LOGINASNEW = "Yes" 
	USE_IDENT = "Yes" 
	EMAIL_LIMIT = "Yes" 
#endif	
}	
