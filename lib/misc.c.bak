/**
 **  Misc Library 
 **  Last updated: 05/24/98, lthuang@cc.nsysu.edu.tw
 **/    

#include <stdio.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <dirent.h>
#include <string.h>
#include <unistd.h>	/* for close() */
#include <ctype.h>	/* for tolower() */
#include <fcntl.h>
       

#ifdef SYSV
#ifndef LOCK_EX
# define LOCK_EX               F_LOCK     /* exclusive lock */
# define LOCK_UN               F_ULOCK    /* unlock */
#endif

/*
 * apply or remove an advisory lock on an open file
 */
int
flock(fd, op)
int fd, op;
{
	switch (op)
	{
	case LOCK_EX:
		return lockf(fd, F_LOCK, 0);
	case LOCK_UN:
		return lockf(fd, F_ULOCK, 0);
	default:
		return -1;
	}
}
#endif


/*
 * copy file, first remove the dest file
 */ 
int
mycp(from, to)
const char *from, *to;
{
	char cpbuf[8192];	/* copy buffer: 8192 optimize for 4096bytes/block */
	int fdr, fdw, cc;
#if 0	
	struct stat st;

	if (stat(from, &st) == -1 || S_ISDIR(st.st_mode))	/* lthuang */
		return -1;
	if (stat(to, &st) == 0 && S_ISDIR(st.st_mode))	/* lthuang */
		return -1;
#endif		
	if ((fdr = open(from, O_RDONLY)) > 0)
	{
		if ((fdw = open(to, O_WRONLY | O_CREAT | O_TRUNC, 0644)) > 0)
		{
			while ((cc = read(fdr, cpbuf, sizeof(cpbuf))) > 0)
				write(fdw, cpbuf, cc);
			close(fdw);
			close(fdr);
			return 0;
		}
		close(fdr);
	}
	return -1;
}


/*
 * unlink(), remove file or directory, 
 * but if directory, sub-dir will also be removed
 */ 
int 
myunlink(name)
char name[];
{
	struct stat st;

	if (!name || name[0] == '\0' || stat(name, &st) == -1)
		return -1;
	if (!S_ISDIR(st.st_mode))
		unlink(name);
	else
	{
		DIR *dirp;
#ifdef NO_DIRENT
		struct direct *dirlist;
#else
		struct dirent *dirlist;
#endif
		char path[MAXNAMLEN], *s, *dname;

		if ((dirp = opendir(name)) == NULL)
			return -1;
		sprintf(path, "%s/", name);
		s = path + strlen(path);
		while ((dirlist = readdir(dirp)) != NULL)
		{
			dname = dirlist->d_name;
			if (dname[0])			
			{
				if (!strcmp(dname, ".") || !strcmp(dname, ".."))
					continue;
				strcpy(s, dname);
				myunlink(path);
			}
		}
		closedir(dirp);
		*(--s) = '\0';
		if (rmdir(path) == -1)
			return -1;
	}		
	return 0;
}


/*
 * rename() but support cross different file system
 */
int 
myrename(from, to)
const char *from, *to;
{
	if (rename(from, to) == -1)	/* 如果 rename() 失敗 */
	{
		/* 表示不同 filesystem, 再用 mycp() */
		if (mycp(from, to) == -1)
			return -1;
		unlink(from);
	}
	return 0;
}


int
isfile(fname)
const char *fname;
{
	struct stat st;

	return (stat(fname, &st) == 0 && (S_ISREG(st.st_mode) 
	                                  || S_ISLNK(st.st_mode)));
}


int
isdir(fname)
char *fname;
{
	struct stat st;

	return (stat(fname, &st) == 0 && S_ISDIR(st.st_mode));
}


int
seekstr_in_file(filename, seekstr)
char filename[], seekstr[];
{
	FILE *fp;
	char buf[255], *ptr;

	if ((fp = fopen(filename, "r")) != NULL)
	{
		while (fgets(buf, sizeof(buf), fp))
		{
			if ((ptr = strchr(buf, '\n')) == NULL)	/* debug */
				continue;
			if ((ptr = strchr(buf, '#')))
				*ptr = '\0';
			if (buf[0] == '\0')
				continue;
			if ((ptr = strtok(buf, ": \n\r\t")) && !strcmp(ptr, seekstr))
			{
				fclose(fp);
				return 1;
			}
		}
		fclose(fp);
	}
	return 0;
}


/*
   xstrncpy() - similar to strncpy(3) but terminates string
   always with '\0' if n != 0, and doesn't do padding
*/
char *
xstrncpy(dst, src, n)
register char *dst;
const char *src;
size_t n;
{
    if (n == 0)
		return dst;
    if (src == NULL)
		return dst;
    while (--n != 0 && *src != '\0')
		*dst++ = *src++;
    *dst = '\0';
    return dst;
}


static void
strlwr(q)
char *q;
{
	char *s = q;
    
	while (*s) 
	{
		*s = tolower((unsigned char) *s);
		s++;
	}
}


char *
xgrep(pattern, filename)
char *pattern, *filename;
{
	FILE *fp;
	static char buf[128];
	char lower_pattern[80], *ptr;

	if ((fp = fopen(filename, "r")) != NULL)
	{
		xstrncpy(lower_pattern, pattern, sizeof(lower_pattern));
		strlwr(lower_pattern);
		while (fgets(buf, sizeof(buf), fp))
		{
			if ((ptr = strchr(buf, '\n')) != NULL)
				*ptr = '\0';
			if ((ptr = strchr(buf, '#')))
				*ptr = '\0';
			if (buf[0] == '\0')
				continue;

			if ((ptr = strtok(buf, ": \n\r\t")) != NULL)
			{
				strlwr(lower_pattern);							
				if (strstr(lower_pattern, ptr))	
				{
					fclose(fp);
					return ptr;
				}
			}
		}
		fclose(fp);
	}
	return (char *)NULL;
}


int
append_file(afile, rfile)
char *afile, *rfile;
{
	int cc;
	char buf[8192];
	int fdr, fdw;
	
	if ((fdr = open(rfile, O_RDONLY)) > 0)
	{
		if ((fdw = open(afile, O_WRONLY | O_APPEND | O_CREAT, 0600)) > 0)
		{
			while((cc = read(fdr, buf, sizeof(buf))) > 0)
			{
				if (write(fdw, buf, cc) != cc)
				{
					close(fdw);
					close(fdr);
					return -1;
				}
			}
			close(fdw);
			close(fdr);
			return 0;
		}
		close(fdr);
	}
	return -1;
}


char *
Ctime(clock)
register time_t *clock;
{
	static char tibuf[24];

	strftime(tibuf, sizeof(tibuf), "%m/%d/%Y %T %a", localtime(clock));
	return tibuf;
}
