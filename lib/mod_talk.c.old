
#include "bbs.h"


int
can_override(userid, whoasks)
char *userid;
char *whoasks;
{
	FILE *fp;
	char buf[PATHLEN];
	register char *ptr;	

	if (!userid || userid[0] == '\0')
		return 0;
		
	sethomefile(buf, userid, UFNAME_OVERRIDES);
	if ((fp = fopen(buf, "r")) == NULL)
		return 0;

	while (fgets(buf, sizeof(buf), fp))
	{
		ptr = buf;
	    for (ptr = buf; *ptr; ptr++)
	    {
	    	if (*ptr == '\n')
	    	{
	    		*ptr = '\0';
	    		break;
	    	}
	    }
		if (!strcmp(buf, whoasks))
		{
			fclose(fp);
			return 1;
		}
	}
	fclose(fp);
	return 0;
}


BOOL
load_friend(cache, userid)		/* -ToDo- uid compare */
struct array **cache;				   
char *userid;				  
{
	if (*cache == NULL)
	{
		FILE *fp;
		register char *pt;
		char buf[PATHLEN];
		int friend_num;		
		
		sethomefile(buf, userid, UFNAME_OVERRIDES);
		friend_num = GetNumFileLine(buf);
		if (friend_num > MAX_FRIENDS)
			friend_num = MAX_FRIENDS;
		else if (friend_num == 0)
		{
			unlink(buf);
			return 0;
		}
		if ((fp = fopen(buf, "r")) == NULL)
			return 0;

		*cache = malloc_array(friend_num);		
#if 1		
		if (*cache == NULL)
		{
			fclose(fp);
			return 0;
		}
#endif			
			
		while (friend_num-- > 0 && fgets(buf, sizeof(buf), fp))
		{
			if ((pt = strchr(buf, '\n')))
				*pt = '\0';
			if (buf[0])
				add_array(*cache, buf, malloc_str);
		}
#if 0
		sort_array(*cache);
#endif		
		fclose(fp);
	}	
	return 1;
}


int
isFriend(cache, whoasks)	/* -ToDo- uid compare */
struct array **cache;
char *whoasks;
{
	if (cache == NULL)
		return -1;
	return cmp_array(*cache, whoasks, strcmp);
}


MSGREC mrec;

void
message_set(fromid, fromnick, toid, msg)
const char *fromid, *fromnick, *toid, *msg;
{
	time_t now;
	
	
	memset(&mrec, 0, sizeof(mrec));
	xstrncpy(mrec.fromid, fromid, sizeof(mrec.fromid));
	xstrncpy(mrec.toid, toid, sizeof(mrec.toid));
	xstrncpy(mrec.username, fromnick, sizeof(mrec.username));
	xstrncpy(mrec.mtext, msg, sizeof(mrec.mtext));
	time(&now);
	strftime(mrec.stimestr, sizeof(mrec.stimestr), "%R", localtime(&now));	
	mrec.out = 0;	
}
	

int
message_send(upent)
USER_INFO *upent;
{
	char fname[PATHLEN];


	if (mrec.toid[0] != '\0' && strcmp(upent->userid, mrec.toid))	/* ¶Ç¿ù¤HÅo! */
	{
		/* the user is logoff */
		return -1;
	}
#ifdef USE_MSQ
	/* pool is not full */
	if ((upent->msq_last+1) % MAX_MREC <= upent->msq->first)
	{
		memcpy(&(upent->msq[upent->msq->last]), &mrec, sizeof(mrec));
		upent->msq->last = (upent->msq->last + 1) % MAX_MSQ;
#else
	setuserfile(fname, upent->userid, UFNAME_WRITE);	
	if (append_record(fname, &mrec, sizeof(mrec)) == 0)
	{
#endif	
		if (upent->pid > 2)	/* debug */
		{
			kill(upent->pid, SIGUSR2);
			return 0;
		}
		/* the user is logoff */
	}
	return -1;
}


/* °O¿ý¦Û¤v°e¥Xªº½u¤W°T®§ */
void
message_record(filename, to)
const char *filename, *to;
{
#if 0
	strcpy(mrec.toid, to);
#endif
	strcpy(mrec.username, "");
	mrec.out = 1;
	append_record(filename, &mrec, sizeof(mrec));
}


char *
pagerstring(uentp)
USER_INFO *uentp;
{
	if (uentp->pager == PAGER_QUIET)
		return "(©I³ê¹a) ¤@­Ó¤HÀRÀR";
	else if (uentp->pager & PAGER_FRIEND)
		return "(©I³ê¹a) ¦nªB¤Í    ";
	else if (uentp->pager & PAGER_FIDENT)
		return "(©I³ê¹a) ¦n¤Í©Î»{ÃÒ";
	else
		return "(©I³ê¹a) ©Ò¦³¤H    ";	/* pager opened for everyone */
}


int
query_user(myulevel, ident, upent, in_chat, qbuf)
int myulevel;
char *ident;
USER_INFO *upent;
BOOL in_chat;
char *qbuf;
{
	USEREC qurc;
	USER_INFO *quinf;
	char online[80], is_new_mail;


	if (ident == NULL || ident[0] == '\0')
	{
		strcpy(qbuf, "\n¨Ï¥ÎªÌ¥N¸¹¿ù»~.");	
		return -1;
	}

	if (!upent)
	{
		if (get_passwd(&qurc, ident) <= 0)
		{
			strcpy(qbuf, "\n¨Ï¥ÎªÌ¥N¸¹¿ù»~.");
			return -1;
		}
		quinf = search_ulist(cmp_userid, qurc.userid);
		is_new_mail = CheckNewmail(qurc.userid, TRUE);
	}
	else
	{
#if 1	
		/* speed-up for online user query */	
		qurc.userlevel = upent->userlevel;
		qurc.numposts = upent->numposts;
		qurc.numlogins = upent->numlogins;
		qurc.ident = upent->ident;
		is_new_mail = upent->is_new_mail;
		qurc.lastlogin = upent->lastlogin;
		xstrncpy(qurc.lasthost, upent->lasthost, sizeof(qurc.lasthost));
		memcpy(qurc.flags, upent->flags, sizeof(qurc.flags));
		
		xstrncpy(qurc.userid, upent->userid, sizeof(qurc.userid));
		xstrncpy(qurc.username, upent->username, sizeof(qurc.username));		
		
		quinf = upent;
#endif
	}

	if (quinf && (!quinf->invisible || myulevel == PERM_SYSOP))
		sprintf(online, "\n¥Ø«e¥¿¦b½u¤W¡G%s %s", 
			modestring(quinf, 1), pagerstring(quinf));
	else
		strcpy(online, "\n¥Ø«e¤£¦b½u¤W, ");

	sprintf(qbuf, "­Ó¤H¸ê®Æ¬d¸ß¡G\n\
%s (%s), µ¥¯Å %d%s, ¤W¯¸ %d ¦¸, ±i¶K %d ½g%s\n\
¤W¦¸¤W¯¸®É¶¡ %s ¨Ó¦Û %s\n\
---- %s%s",
	       qurc.userid, 
#ifdef NSYSUBBS1
	       qurc.ident != 7 ? "¤¤¤s¹C«È" : qurc.username,
#else
	       qurc.username, 
#endif	       
	       qurc.userlevel,
           (
#ifdef GUEST
           strcmp(qurc.userid, GUEST) && 
#endif           
           qurc.userlevel == 0 && qurc.numlogins != 1) ? "([1;31m±b¸¹°±¥Î¤¤[0m)" : "",
	       qurc.numlogins, qurc.numposts,
#ifdef USE_IDENT
			(qurc.ident == 7) ? ", [1;36m¤w§¹¦¨¨­¥÷»{ÃÒ [m" : ", [1;33m¥¼§¹¦¨¨­¥÷»{ÃÒ [m",
#else
			"",
#endif			
	       (qurc.lastlogin) ? Ctime(&(qurc.lastlogin)) : "(unknown)",
	       (qurc.lasthost[0]) ? qurc.lasthost : "(unknown)",
	       ((qurc.flags[0] & FORWARD_FLAG) ? "­Ó¤H«H¥ó¦Û°ÊÂà±H¶}±Ò" :
            ((is_new_mail) ? "«H½c¤¤ÁÙ¦³·s«HÁÙ¨S¬Ý" : "«H½c¤¤ªº«H¥ó³£¬Ý¹L¤F")),
            online);

#if 0
	("\n¹q¤l¶l¥ó«H½c: %s", qurc.email);
#endif

	return 0;
}
#if 0
BOOL
load_friend(cache, userid)		/* -ToDo- uid compare */
struct array **cache;				   
char *userid;				  
{
	if (*cache == NULL)
	{
		FILE *fp;
		register char *pt;
		char buf[PATHLEN];
		int friend_num;		
		
		sethomefile(buf, userid, UFNAME_OVERRIDES);
		friend_num = GetNumFileLine(buf);
		if (friend_num > MAX_FRIENDS)
			friend_num = MAX_FRIENDS;
		else if (friend_num == 0)
		{
			unlink(buf);
			return 0;
		}
		if ((fp = fopen(buf, "r")) == NULL)
			return 0;

		*cache = malloc_array(friend_num);		
		
#if 1		
		if (*cache == NULL)
		{
			fclose(fp);
			return 0;
		}
#endif			
			
		while (friend_num-- > 0 && fgets(buf, sizeof(buf), fp))
		{
			if ((pt = strchr(buf, '\n')))
				*pt = '\0';
			if (buf[0])
				add_array(*cache, buf, malloc_str);
		}
#if 0
		sort_array(*cache);
#endif		
		fclose(fp);
	}	
	return 1;
}


int
isFriend(cache, whoasks)	/* -ToDo- uid compare */
struct array **cache;
char *whoasks;
{
	if (cache == NULL)
		return -1;
	return cmp_array(*cache, whoasks, strcmp);
}
#endif
