/*
 *    外部程式 可以 new 一個 user。
 *  與 bbs 不同的是 ，取消對 userid 的限制。
 *                                                                                                      wnlee@cc
 */


#include "bbs.h"

unsigned int my_new_user (USEREC *);


main ()
{
	char userid[IDLEN];

	for (;;)
	{
		printf ("\n(Max length 12 chars or enter 'quit' to exit)\nPlease enter student id :");
		scanf ("%s", userid);
		if (!strcmp (userid, "quit"))
			break;
		DoNewUser (userid);
	}
}

DoNewUser (userid)
     char *userid;
{
	USEREC *nu, rec;
	extern char *gen_passwd ();
	char myuserid[IDLEN], mypasswd[6], *pt;
	int i;


	init_bbsenv ();

	bzero (&rec, sizeof (rec));
	nu = &rec;

	xstrncpy (nu->userid, userid, IDLEN);

	if (get_passwd (NULL, nu->userid) > 0 || is_duplicate_userid (nu->userid))
	{
		printf ("\nduplicated userid\n");
		return -1;
	}
	strcpy (myuserid, nu->userid);
	printf ("id [%12s]", myuserid);

	pt = nu->userid;
	for (;; pt++)
		if (*pt == 0x00)
		{
			pt -= 4;
			mypasswd[0] = 'p';
			for (i = 1; *pt != 0x00; i++, pt++)
				mypasswd[i] = *pt;
			mypasswd[i] = 0x00;
			break;

		}

	printf ("  passwd [%s]", mypasswd);

	nu->firstlogin = time (0);
	nu->lastlogin = nu->firstlogin;
	nu->userlevel = PERM_DEFAULT;
	nu->numlogins = 1;
	nu->email[0] = 0x00;
	nu->telecom = 0x00;
	xstrncpy (nu->lasthost, "127.0.0.1", HOSTLEN);
	xstrncpy (nu->passwd, genpasswd (mypasswd), PASSLEN);
/*      
   printf("  encrypted passwd [%s]", nu->passwd);
 */

	if ((nu->uid = my_new_user (nu)) <= 0)
	{
		printf ("\nnewuser failure\n");
		return -1;
	}
	printf ("  uid [%6d]\n", nu->uid);
}



/*
 * New user, finding a available slot in user index file and home dir.
 * Function return the unique uid of user
 */
unsigned int
my_new_user (ubuf)
     USEREC *ubuf;
{
	int fd;
	struct useridx uidx;
	unsigned int cnt;

	if (!ubuf || ubuf->userid[0] == '\0')
	{
		printf (" ubuf is NULL \n");
		return 0;
	}
#ifdef NSYSUBBS
	if (strstr (ubuf->userid, "..") || ubuf->userid[0] == '/')
	{
		printf ("NSYSU debug\n");
		return 0;
	}
#endif
	if (is_duplicate_userid (ubuf->userid)
	    || get_passwd (NULL, ubuf->userid) > 0)
	{
		printf ("fail at duplicate or get_passwd \n");
		return 0;
	}

	if ((fd = open (USERIDX, O_RDWR | O_CREAT, 0644)) < 0)
	{
		printf ("cannot open USERIDX\n");
		return 0;
	}
	flock (fd, LOCK_EX);
	for (cnt = 1; read (fd, &uidx, sizeof (uidx)) == sizeof (uidx); cnt++)
	{
		if (uidx.userid[0] == '\0')
			break;
	}

	if (lseek (fd, ((off_t) ((cnt - 1) * sizeof (uidx))), SEEK_SET) != -1)
	{
		memset (&uidx, 0, sizeof (uidx));
		strcpy (uidx.userid, ubuf->userid);

		if (write (fd, &uidx, sizeof (uidx)) == sizeof (uidx))
		{
			int fdp;
			char fname[PATHLEN], homepath[PATHLEN];

			sethomefile (homepath, ubuf->userid, NULL);
/*                      
   printf("homepasth [%s]", homepath);
 */
			if (mkdir (homepath, 0755) == 0)
			{
				sethomefile (fname, ubuf->userid, UFNAME_PASSWDS);
				if ((fdp = open (fname, O_WRONLY | O_CREAT, 0600)) > 0)
				{
					ubuf->uid = cnt;
					if (write (fdp, ubuf, sizeof (USEREC)) == sizeof (USEREC))
					{
						close (fdp);
						flock (fd, LOCK_UN);
						close (fd);
						return ubuf->uid;
					}
					close (fdp);
					unlink (fname);
				}
				rmdir (homepath);
			}
			if (lseek (fd, ((off_t) ((cnt - 1) * sizeof (uidx))), SEEK_SET) != -1)
			{
				memset (&uidx, 0, sizeof (uidx));
				write (fd, &uidx, sizeof (uidx));
			}
		}
	}
	flock (fd, LOCK_UN);
	close (fd);
	return 0;
}
