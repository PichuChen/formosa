
#include "bbs.h"


#define USRHOME	(HOMEBBS "/mail")	/* lasehu */


#define MARK_DAY    120     /* 標記保存之信件 */
#define MAIL_DAY    365      /* 一般信件 */
#define FILE_DAY    30      /* 其他檔案 */

#define FNLN	16          /* 987654321.A */
#define FMAX	1000        /* max number of files in a directory */

#define DOKILL


typedef struct
{
	char fname[FNLN];
	int fsize;
}
quota;


time_t file_due, mail_due, mark_due;

int summary = 0;
int visit = 0;


void
prune_mail ()
{
	FILEHEADER head;	/* lasehu */
	int fd, fdr, fdw;
	int state;
	int mailnums = 0;	/* lasehu */
	int fmode, fsize, bonus;
	time_t ftime, deadline;
	static char fname[24] = "M.";
	quota table[FMAX], *pq;
	DIR *dirp;
	struct dirent *dp;
	struct stat st;
	int i, total;
	char *key;

	fname[2] = i = bonus = 0;
	pq = table;
	dirp = opendir (".");
	while (dp = readdir (dirp))
	{
		key = dp->d_name;
		stat (key, &st);
		fsize = st.st_size;
		if (key[0] == '.')
			continue;
		if (!strncmp (key, fname, 2))
		{
			strcpy (pq->fname, key + 2);
			pq->fname[FNLN - 1] = 0;
			pq->fsize = fsize;
			if (++i >= FMAX)
			{
				printf ("## too many mails\n");
				exit (-1);
			}
			pq++;
		}
		else
		{
			if (fsize <= 0)
			{
/*			
				unlink(key);
*/				
			}
		}
	}
	closedir (dirp);

	total = i;
	if (total == 0)
		return;
	qsort (table, total, sizeof (quota), strcmp);

	/* read original .DIR */

#ifdef DOKILL
	if ((fd = open (".DIR.lock", O_RDWR | O_CREAT | O_APPEND, 0644)) == -1)
		return;
	flock (fd, LOCK_EX);
#endif	

	state = 0;
	key = &(head.filename[2]);
	if ((fdr = open (".DIR", O_RDONLY, 0)) > 0)
	{
		static char fntmp[] = ".DIR.new";

#ifdef DOKILL
		if ((fdw = open (fntmp, O_WRONLY | O_CREAT | O_TRUNC, 0644)) > 0)
#endif		
		{
			while (read (fdr, &head, sizeof head) == sizeof head)
			{
				/* binary search : check consistency */

				pq = (quota *) bsearch (key, table, total, sizeof (quota), strcmp);
				if (!pq)
					continue;

				pq->fname[FNLN - 1] = 'z';
				fsize = pq->fsize;
				if (++mailnums > MAX_KEEP_MAIL)	/* lasehu */
				{
					bonus += fsize;
					continue;
				}
				fmode = head.accessed;	/* lasehu */
				ftime = atol (key);	/* lasehu */

				if (fsize >= MAX_MAIL_SIZE)	/* 檔案太大了 */
					deadline = file_due;
#if 0
				else if (fmode & FILE_MARKED /* || !(fmode & FILE_READ) */ )
					deadline = mark_due;	/* 標記或未讀 */
#endif
				else
					deadline = mail_due;

				if (ftime < deadline)
				{
#ifdef DOKILL				
					unlink (head.filename);
#endif					
					bonus += fsize;
				}
				else
				{
#ifdef DOKILL
					state = write (fdw, &head, sizeof head);
					if (state < 0)
						break;
#else
					state = 1;		
#endif
				}
			}
			close (fdw);
		}
		close (fdr);

		if (state >= 0)
		{
#ifdef DOKILL		
			rename (".DIR", ".DIR.old");
			rename (fntmp, ".DIR");
#endif			

			/* prune dummy file */

			for (i = 0, pq = table; i < total; i++, pq++)
			{
				key = pq->fname;
				if (key[FNLN - 1] != 'z')
				{
/*---
					strcpy (fname + 2, key);
					unlink (fname);
*/					
					bonus += pq->fsize;
				}
			}
		}
	}
#ifdef DOKILL	
	flock (fd, LOCK_UN);
	close (fd);
#endif	
	printf ("%c%d", state < 0 ? ' ' : '+', bonus);
	summary += bonus;
	visit++;
}


#if 0
void
prune_file (fname, due)
     char *fname;
     time_t due;
{
	struct stat st;

	if (!stat (fname, &st))
	{
		if (st.st_size <= 0 || st.st_size >= MAX_MAIL_SIZE || st.st_mtime < due)
			unlink (fname);
	}
}
#endif


void
quota_usr (fpath)
     char *fpath;
{
	struct stat st;
	char odir[256];

	stat (fpath, &st);
	if (!S_ISDIR (st.st_mode))
	{
		printf ("/bin/rm -fr %s ## 2 file type\n", fpath);
		return;
	}
	printf ("\n# %-15s(%4d/%4d) ", fpath, st.st_size, st.st_blocks);

	/* visit BBS user */

	getcwd (odir, sizeof (odir));
	chdir (fpath);

	/* begin to prune ... */

	prune_mail ();

	/* back for future */

	chdir (odir);
}


void
enter_dir (fdir)
     char *fdir;
{
	struct stat st;

	stat (fdir, &st);

	if (!fdir[1] && S_ISDIR (st.st_mode))
	{
		DIR *dirp;
		struct dirent *de;
		static char fpath[80];
		char *fname;

		/* visit the second hierarchy */

		if (!(dirp = opendir (fdir)))
		{
			printf ("## unable to enter hierarchy [%s]\n", fdir);
			return;
		}

		while (de = readdir (dirp))
		{
			fname = de->d_name;
			if (fname[0] > ' ' && fname[0] != '.')
			{
				sprintf (fpath, "%s/%s", fdir, fname);
				quota_usr (fpath);
			}
		}
		closedir (dirp);
		return;
	}
	printf ("\n/bin/rm -fr %s ## file type\n", fdir);
}


main (argc, argv)
     int argc;
     char *argv[];
{
	DIR *dirp;
	struct dirent *de;
	char *fname;
	time_t start, end, period;

	setuid (BBS_UID);	/* lasehu */
	setgid (BBS_GID);	/* lasehu */
	chdir (USRHOME);

	/* visit the first hierarchy */

	if (!(dirp = opendir (".")))
	{
		printf ("## unable to enter user home\n");
		exit (-1);
	}

	time (&start);
	
	file_due = start - FILE_DAY * 86400;
	mail_due = start - MAIL_DAY * 86400;
	mark_due = start - MARK_DAY * 86400;

	while (de = readdir (dirp))
	{
		fname = de->d_name;
		if (strcmp(fname, ".") && strcmp(fname, ".."))
			enter_dir (fname);
	}
	closedir (dirp);

	time (&end);

	printf ("\n\n# start: %s", ctime (&start));
	printf ("# end  : %s", ctime (&end));
	period = end - start;
	printf ("# time : %d:%d:%d\n", period / 3600, period / 60, period % 60);
	printf ("# Visit: %d\n", visit);
	printf ("# Bonus: %d\n", summary);
	exit (0);
}
