
/*
   根據實際所有使用者資料分檔 passwd/<userid>
   重建 .USERIDX 使用者資料索引檔
 */

/*
   刪除過期帳號:
   0 ~ 49 級: 30 天為限
   50     級: 90 天為限
   其餘等級 : 不做清除
 */

#define _BBS_LOCAL_UTIL_

#define ARRAY_MAXUSE	(100000)

#include "bbs.h"


int debug = 0;


/* #define SUMMERDAYS   (70) */

#define DEL_EMPTY_FILE
#define DEL_FILE

#define USERIDX_NEW	".USERIDX.new"
#define USERIDX_LOST	".USERIDX.lost"

main (argc, argv)
     int argc;
     char *argv[];
{
	DIR *dirp;
#ifdef NO_DIRENT
	struct direct *dp;
#else
	struct dirent *dp;
#endif
	char table[2 * ARRAY_MAXUSE][IDLEN + 3];
	int i, total;
	int fin, fout, flost;
	int fd;
	struct useridx uidx, uidx0;
	char *hit;
	struct stat st;
	char t_dir[80];
	register char *up;
	register time_t now = time (0);
	USEREC urc;
	char myfrom[256], myto[256];
	int empty = 0, del_recs = 0, del_files = 0, long_files = 0, lost_files = 0;
	char chdate[30];


	getcwd (t_dir, 29);

	if (getuid () != BBS_UID)
	{
		if (chroot (HOMEBBS) == -1 || chdir ("/") == -1)
		{
			printf ("\n\n!!! 請用 root 或 bbs 來執行本程式 !!!\n");
			exit (-1);
		}
		setgid (BBS_GID);
		setuid (BBS_UID);
	}
	else
	{
		if (chdir (HOMEBBS) == -1)
		{
			printf ("\n\n!!! BBS Home Directory not exist !!!\n");
			exit (-1);
		}
	}


/*
   mkdir("/bbs2/del_user");
 */

	debug = 0;

	if (argc == 2)
	{
		if (!strcmp (argv[1], "debug"))
		{
			debug = 1;
			printf ("\nEnable debug mode !!\n\n");
		}
	}

	if ((fin = open (USERIDX, O_RDONLY)) < 0)
	{
		fprintf (stderr, "cannot open %s\n", USERIDX);
		exit (0);
	}

	if ((fout = open (USERIDX_NEW, O_WRONLY | O_CREAT | O_TRUNC, 0644)) < 0)
	{
		fprintf (stderr, "cannot write %s\n", USERIDX_NEW);
		exit (0);
	}
	if ((flost = open (USERIDX_LOST, O_WRONLY | O_CREAT | O_TRUNC, 0644)) < 0)
	{
		fprintf (stderr, "cannot open %s\n", USERIDX_LOST);
		exit (0);
	}

	memset (&uidx0, 0, sizeof (uidx0));

	chdir (UFNAME_PASSWDS);

	if ((dirp = opendir (".")) == NULL)
		return -1;

	up = table[(i = 0)];

	while ((dp = readdir (dirp)) != NULL)
	{
		if (!strcmp (dp->d_name, ".") || !strcmp (dp->d_name, ".."))
			continue;
		/* ? */
		if (strlen (dp->d_name) >= IDLEN + 2)
		{
#ifdef DEBUG
			printf ("Error: userid [%s] too long !!\n", dp->d_name);
			long_files++;	/* lasehu */
#endif
			continue;
		}

		if (stat (dp->d_name, &st) == -1 || st.st_size == 0)
		{
#ifdef DEBUG
			empty++;
			if (debug)
				printf ("Empty File: [%s]\n", dp->d_name);
#endif

#ifdef DEL_EMPTY_FILE
			unlink (dp->d_name);
			continue;
#else
			strcpy (up, dp->d_name);
			up[IDLEN + 2] = 'd';
			i++;
			up += (IDLEN + 3);
#endif
		}
		else
		{
			if ((fd = open (dp->d_name, O_RDONLY)) < 0)
			{
#ifdef DEBUG
				empty++;
				if (debug)
					printf ("cannot open file: [%s]\n", dp->d_name);
#endif
				continue;
			}

			if (read (fd, &urc, sizeof (urc)) != sizeof (urc))
			{
#ifdef DEBUG
				empty++;
				if (debug)
					printf ("cannot read file: [%s]\n", dp->d_name);
#endif
				close (fd);
				continue;
			}

#ifdef	SUMMERDAYS
			if ((urc.userlevel < 50 && (now - st.st_mtime) > (86400 * (30 + SUMMERDAYS)))
			    || (urc.userlevel == 50 && (now - st.st_mtime) > (86400 * (90 + SUMMERDAYS))))
#else
			if ((urc.userlevel < 50 && (now - st.st_mtime) > (86400 * 30))
			    || (urc.userlevel == 50 && (now - st.st_mtime) > (86400 * 90)))
#endif
			{
#ifdef DEBUG
				strftime (chdate, 9, "%y/%m/%d", localtime (&st.st_mtime));
				printf ("del_old_file Level:<%3d> Name:(%-14s) Date:[%s]\n", urc.userlevel, dp->d_name, chdate);
#endif
				del_files++;
#ifdef DEL_FILE
				sprintf (myfrom, "%s", dp->d_name);
				sprintf (myto, "/%s/%s", BBSPATH_DELUSER, dp->d_name);
				if (myrename (myfrom, myto) == -1)
					printf ("Error: rename [%s] => [%s] failed !!\n", myfrom, myto);
#else
				strcpy (up, dp->d_name);
				up[IDLEN + 2] = 'd';
				i++;
				up += (IDLEN + 3);
#endif
			}
			else
			{
				strcpy (up, dp->d_name);
				up[IDLEN + 2] = 'a';
				i++;
				up += (IDLEN + 3);
			}
			close (fd);
		}
	}
	closedir (dirp);

	total = i;

	fstat (fin, &st);

	printf ("\tTotal: %d records, %d files (and %d empty file, %d long file)\n",
		st.st_size / sizeof (uidx), total, empty, long_files);
	printf ("\nDelete: %d files\n", del_files);

	qsort (table, total, IDLEN + 3, strcmp);

	while (read (fin, &uidx, sizeof (uidx)) == sizeof (uidx))
	{
		if (uidx.userid[0] == '\0')
			continue;
		if (!strcmp (uidx.userid, "new"))
		{
			if (write (fout, &uidx0, sizeof (uidx0)) != sizeof (uidx0))
			{
				printf ("\ncannot write file: %s !!\n", USERIDX_NEW);
				break;
			}
			continue;
		}

		if (hit = (char *) bsearch (&uidx, table, total, IDLEN + 3, strcmp))
		{
			if (write (fout, &uidx, sizeof (uidx)) != sizeof (uidx))
			{
				printf ("\ncannot write file: %s !!\n", USERIDX_NEW);
				break;
			}
			hit[IDLEN + 2] = 'z';
		}
		else
		{
			if (debug)
				printf ("deleting record [%s]\n", uidx.userid);
			if (write (fout, &uidx0, sizeof (uidx0)) != sizeof (uidx0))
			{
				printf ("\ncannot write file: %s !!\n", USERIDX_NEW);
				break;
			}
			del_recs++;
		}
	}

	for (i = 0, up = table[0]; i < total; i++, up += (IDLEN + 3))
	{
		if (up[IDLEN + 2] == 'a')
		{
			if (debug)
				printf ("lost file [%s]\n", up);
			lost_files++;
			if (write (flost, up, sizeof (uidx)) != sizeof (uidx))
			{
				printf ("\ncannot write file: %s !!\n", USERIDX_LOST);
				break;
			}
		}
	}
	close (fout);
	close (flost);

	printf ("\tdel: %d records\n", del_recs);
	printf ("\tadd: %d to lost records\n", lost_files);

	close (fin);
	chdir (t_dir);
}
