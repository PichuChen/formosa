/*
 *  BBS Gopher Server
 *					changiz@cc.nsysu.edu.tw
 *					Cauchy@cc.nsysu.edu.tw
 *                  lthuang@cc.nsysu.edu.tw
 */

#include "bbs.h"

#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <sys/time.h>
#include <sys/resource.h>


#define BBS2G4_PID 	"tmp/BBS2G4.pid"
#define GOPHER_PORT 70

char	host[40];
FILE	*fout;
int	s, time_out = 60;
char	genbuf[4096];


/*******************************************************************
 * 訊號離線
 *******************************************************************/
void
autoexit(int s)
{
	int     i;

	for (i = getdtablesize(); i > 2; i--)
		close(i);
	exit(0);
}


char *
my_gets(sd, buf, check_file, plus)		/* --Cauchy */
int sd;
char    buf[];
int *check_file, *plus;
{
	char   *p, *end;

/*
   FILE *fd;
 */
	(void) signal(SIGALRM, autoexit);
	alarm(time_out);

	end = buf + sizeof(genbuf) - 1;
	p = buf;
/*  
	fd = fopen("./Gopher.read", "w+"); 
	*/
	while (p < end && read(sd, p, 1) == 1)
	{
/* 
        fprintf(fd,"%c", *p); 
        */
		if (*p == '\r')
			continue;
		else if (*p == '\t')
			continue;
		else if (*p == '$')
		{
			plus = TRUE;
			continue;
		}
		else if (*p == '!')
		{
			*Check_file = TRUE;
			continue;
		}
		else if (*p == '+')
		{
			*plus = TRUE;
			*p = '\0';
			break;
		}
		else if (*p == '\n')
		{
			*(++p) = '\0';
			break;
		}
		else if (*p == '\0')
			break;
		p++;
	}
/*  fclose(fd); */
	alarm(0);
	return ((p > buf) ? buf : (char *) NULL);
}


int
file(filename, Check_file)
char    filename[];
int Check_file;
{
	FILE   *fp;
	char    buf[160];

	if (Check_file)
	{
		fprintf(fout, "+-1\r\n");
		fprintf(fout, "+INFO: title\t%s\t%s\t70\t+\r\n", filename, host);
		fprintf(fout, "+VIEWS:\r\n");
		fprintf(fout, " Text/plain: <10k>\r\n");
		fprintf(fout, ".\r\n");
		return;
	}

	if ((fp = fopen(filename, "r")) == NULL)
	{
		fprintf(fout, "Path error..	error.host	1\n.\n");
		return -1;
	}
	if (Plus)
		fprintf(fout, "+-1\r\n");

	while (fgets(buf, sizeof(buf), fp))
		fprintf(fout, "%s", buf);

	fclose(fp);
	fprintf(fout, ".\n");
}
	

int
dir(path)
char    path[];
{
	BOARDHEADER bh;
	FILEHEADER fh;
	char   buf[240];
	int    fd;

	if (!strcmp(path, "/"))	/* 最上層 */
	{
		if (Plus)
		{
			fprintf(fout, "+-1\r\n");
			fprintf(fout, "+INFO: ");
		}
		fprintf(fout, "1◤BBS系統一般區◢\t1/boards\t%s\t70\r\n", host); 

		if (Plus)
			fprintf(fout, "+INFO: ");
		fprintf(fout, "1◤BBS系統精華區◢\t1/treasure\t%s\t70\r\n", host);
		
		fprintf(fout, ".\r\n");
		return 0;
	}
	else if (!strcmp(path, "/boards"))
	{
		if ((fd = open(BOARDS, O_RDONLY)) < 0)
		{
			fprintf(fout, "Path error..	error.host	1\n.\n");
			return -1;
		}

		if (Plus)
			fprintf(fout, "+-1\r\n");

		while (read(fd, &bh, sizeof(bh)) == sizeof(bh))
		{
			if (bh.filename[0] == '\0')
				continue;
			if (!can_see_board(&bh, 0)) /* userlevel is 0 */
				continue;

			if (Plus)
				fprintf(fout, "+INFO: ");

			fprintf(fout, "1◤%s◢--%s\t1/boards/%s\t%s\t70\r\n",
				   bh.title, bh.filename, bh.filename, host);
		}
		close(fd);
		fprintf(fout, ".\r\n");
		return 0;
	}
	else if (!strcmp(path, "/treasure"))
	{
		if ((fd = open(BOARDS, O_RDONLY)) < 0)
		{
			fprintf(fout, "Path error..	error.host	1\n.\n");
			return -1;
		}
		if (Plus)
			fprintf(fout, "+-1\r\n");

		while (read(fd, &bh, sizeof(bh)) == sizeof(bh))
		{
			if (bh.filename[0] == 0)
				continue;
			if (!can_see_board(&bh, 0))	/* userlevel is 0 */
				continue;
			if (Plus)
				fprintf(fout, "+INFO: ");

			fprintf(fout, "1◤%s◢--%s\t1/treasure/%s\t%s\t70\r\n", 
			           bh.title, bh.filename, bh.filename, host);
		}
		close(fd);
		fprintf(fout, ".\r\n");
		return 0;
	}
		
	sprintf(buf, "%s/%s", path, DIR_REC);
	if ((fd = open(buf, O_RDONLY)) > 0)
	{
		if (strstr(buf, "/boards/"))
		{
			if (Plus)
				fprintf(fout, "+-1\r\n");
			else if (strstr(buf, "/treasure/"))
				if (Plus)
					fprintf(fout, "+-1\r\n");
		}
		
		while (read(fd, &fh, sizeof(fh)) == sizeof(fh))
		{
#if 0		
			if ((fh.accessed & FILE_IN) || (fh.accessed & FILE_OUT))
				continue;
			else
#endif				
			if (fh.accessed & FILE_DELE)
				continue;
			else if (fh.accessed & FILE_TREA)
			{
				if (fh.filename[0] == '\0')
					continue;
				if (Plus)
					fprintf(fout, "+INFO: ");
				fprintf(fout, "1◤「目錄」%s◢\t1%s/%s\t%s\t70\n",
				        fh.title, path, fh.filename, host);
			}
			else
			{
				fprintf(fout, "0◤%s◢\t0%s/%s\t%s\t70\r\n",
				        fh.title, path, fh.filename, host);
				if (Plus)
				{
					fprintf(fout, "+VIEWS:\r\n");
					fprintf(fout, " Text/plain: <1k>\r\n");
				}
			}
		}
		close(fd);
	}
	fprintf(fout, ".\n");
}


void
bbs2g4()			/* main action */
{
	char   *ptr, buf[240];
	int     len;
	BOOL    isDIR;
	int check_file = FALSE;
	int plus = FALSE;

	if (!my_gets(s, buf, &check_file, &plus))
		return;
		
	if (buf[0] == '\n')
	{
		isDIR = TRUE;
		strcpy(buf, "/");
	}
	else if (buf[0] == '1')
		isDIR = TRUE;
	else if (buf[0] == '0')
		isDIR = FALSE;
	else
		isDIR = TRUE;

	len = strlen(buf);
	if (buf[len - 1] == '\n')
		buf[len - 1] = '\0';
		
	if ((ptr = strchr(buf, '\t')) != NULL)
		*ptr = '\0';

	ptr = strchr(buf, '/');
	if (isDIR)
		dir(ptr, plus);
	else
		file(ptr, check_file, plus);

	fflush(fout);
}


void
usage()
{
	fprintf(stderr, "Usage: bbs2g4 [-p port] [-t timeout_second]\n");
	fprintf(stderr, "Ex: bbs2g4 -p 70 -t 60\n");
	fflush(stderr);
}	



int
main(argc, argv)
int     argc;
char   *argv[];
{
	int     s, i, flen, fd, sock, c;
	struct sockaddr_in server, client;
	fd_set  readfds;
	FILE   *fp;
	ushort port = GOPHER_PORT;
	struct hostent *hbuf;	
	extern char *optarg;	
	
	while ((c = getopt (argc, argv, "p:t:")) != -1)
	{
		switch (c)
		{
		case 'p':
			port = atoi(optarg);
			break;
		case 't':
			time_out = atoi(optarg);
			break;
		case '?':
		default:
			usage();
			exit(1);

		}
	}
	
	if (!port || !time_out)
	{
		usage();
		exit(2);
	}
	
	if ((i = fork()) == -1)
		exit(-1);
	if (i)
		exit(0);
		
	setsid();
	
	if ((fp = fopen(BBS2G4_PID, "w")) != NULL)
	{
		fprintf(fp, "%d", getpid());
		fclose(fp);
	}

	gethostname(host, sizeof(host));
	if ((hbuf = gethostbyname(host)) != NULL)
		xstrncpy(host, hbuf->h_name, sizeof(host));

	for (i = getdtablesize(); i > 2; i--)
		close(i);

	if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0)
	{
		perror("socket");
		exit(-1);
	}

	i = 1;	
	setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, (char *)&i, sizeof(i));
	
	server.sin_family = PF_INET;
	server.sin_addr.s_addr = INADDR_ANY;
	server.sin_port = htons((u_short)port);
	if (bind(sock, (struct sockaddr *)&server, sizeof(server)) < 0
		|| listen(sock, 5) < 0)
	{
		perror("bind");
		exit(-1);
	}

	if ((fd = open("/dev/null", O_RDWR, 0)) > 0)
	{
		(void) dup2(fd, STDIN_FILENO);
		(void) dup2(fd, STDOUT_FILENO);
		(void) dup2(fd, STDERR_FILENO);
		if (fd > 2)
			(void) close(fd);
	}

	init_bbsenv();	

	while (1)
	{			/* Main Loop */
		FD_ZERO(&readfds);
		FD_ZERO(&writefds);
		
		FD_SET(sock, &readfds);
		
		if ((on = select (sock+1, &readfds, &writefds, NULL, NULL)) < 0)
		{
			if (errno == EINTR)
				continue;
			else
			{
				shutdown (sock, 2);
				close (sock);
				exit (-1);
			}
		}
		
		if (FD_ISSET(sock, &readfds))
		{
			flen = sizeof(client);			
			if ((s = accept (sock, (struct sockaddr *) &client, &flen)) < 0)
				continue;
				
			for (i = 0; i < MAXPORTS; i++)
			{
				if (Usrec[i].sock == -1)
				{
					memset(&(Usrec[i]), 0, sizeof(Usrec[i]));
					Usrec[i].sock = s;
					break;
				}
			}
			if (i == MAXPORTS)
				close(s);
			if (on == 1)
				continue;
		}
		
		for (seat = 0; seat < MAXPORTS; seat++)
		{
			if (cuser->sock == -1)
				continue;
				
			if (FD_ISSET(cuser->sock, &readfds))
			{
				if ((cc = client_read()) == -1)
					client_close();
				client_update();					
			}
			else if (FD_ISSET(cuser->sock, &writefds))
			{
				if ((cc = client_write()) == 0)
					client_close();
				client_update();
			}
		}
		
		memset(rcvbuf, 0, sizeof(rcvbuf));
		
			
		for
		
		if (!FD_ISSET (sock, &ibits))
			continue;
		flen = sizeof(client);			
		if ((s = accept (sock, (struct sockaddr *) &client, &flen)) < 0)
			continue;

		if ((fout = fdopen(s, "w")) == NULL)
			exit(-3);
		cs->fout = fout;
		bbs2g4(cs->fout);
		fclose(fout);
		close(s);	
	}	/* Main Loop */
}
