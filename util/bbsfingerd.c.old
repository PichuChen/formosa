/*
 * written by lthuang@cc.nsysu.edu.tw, 1998
 */
 
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <arpa/inet.h>
#include <errno.h>

#include <unistd.h>
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "bbs.h"
#include "libproto.h"
#include "conf.h"

FILE *fout, *fin;
void finger_main();
USER_INFO *search_ulist();
sigjmp_buf env;

int RUNNING = 777;

void shutdown_server(int sig)
{
	RUNNING = 0;
}

main(argc, argv)
int argc;
char *argv[];
{
	struct sockaddr_in sin, from;
	fd_set ibits;
	int on;
	int len, ns;
	int sock, maxs;

	
	if (fork () != 0)
		exit (0);

	signal(SIGTERM, shutdown_server);
	signal(SIGALRM, timeout_check);
	signal(SIGPIPE, SIG_IGN);
	
	if ((on = open ("/dev/null", O_RDONLY)) < 0)
		exit (1);

	if ((sock = socket (AF_INET, SOCK_STREAM, 0)) < 0)
	{
		perror ("socket");
		exit (-1);
	}

	setsockopt (sock, SOL_SOCKET, SO_REUSEADDR, (char *) &on, sizeof (on));

	sin.sin_family = PF_INET;
	sin.sin_addr.s_addr = INADDR_ANY;
	sin.sin_port = htons ((u_short) 79);
	if (bind (sock, (struct sockaddr *) &sin, sizeof (sin)) < 0)
	{
		perror ("bind");
		exit (-2);
	}
	if (listen (sock, 10) < 0)
	{
		perror ("listen");
		exit (-3);
	}

	maxs = 10;
	len = sizeof (from);

	init_bbsenv();
	
	sigsetjmp(env, 1);
	
	while (1)
	{
		FD_ZERO (&ibits);
		FD_SET (sock, &ibits);
		if ((on = select (maxs, &ibits, 0, 0, NULL)) < 1)
		{
			if ((on < 0 && errno == EINTR) || on == 0)
				continue;
			else
			{
				shutdown (sock, 2);
				close (sock);
				exit (-1);
			}
		}
		if (!FD_ISSET (sock, &ibits))
			continue;
		if ((ns = accept (sock, (struct sockaddr *) &from, &len)) < 0)
			continue;
		else
		{
			char *foo, inbuf[128];
			
			if ((fout = fdopen (ns, "w")) == NULL)
			{
				close (ns);
				continue;
			}
			if ((fin = fdopen (ns, "r")) == NULL)
			{
				fclose(fout);
				close (ns);
				continue;
			}
			
			fgets(inbuf, sizeof(inbuf), fin);
			if ((foo = strstr(inbuf, ".bbs")) != NULL)
			{
				char qbuf[4096];
				int retval;				

				
				*foo = '\0';

				retval = query_user(0, inbuf, TRUE, qbuf);
		
				fprintf(fout, qbuf);
				
				if (retval == 0)
				{
					FILE *planfile;
					
					fprintf(fout, "\n");
					sethomefile(qbuf, inbuf, UFNAME_PLANS);
					if ((planfile = fopen(qbuf, "r")) != NULL)
					{
						while (fgets(qbuf, sizeof(qbuf), planfile))
							fprintf(fout, qbuf);
						fclose(planfile);
					}
					else
					{
						fprintf(fout, "沒有名片檔,");
					}
					fprintf(fout, "\n");
				}

				bbslog("fingerd",  "%s %s", inet_ntoa(from.sin_addr), inbuf);
			}
			else
			{
				finger_main();
				bbslog("fingerd",  "%s", inet_ntoa(from.sin_addr));	
			}
			
			fflush(fout);
			close (ns);
		}
	}
}


/* 
 *  finger
 */  
void
finger_main()
{
	register USER_INFO *uentp;
	register int i, user_num;
	extern struct UTMPFILE *utmpshm;	

	fprintf(fout, "\nMax Online User = [%d]\n\n", USHM_SIZE);

	fprintf(fout, "%-12.12s %-20.20s %-16.16s %-26.26s\n",
	        "UserID", "Nickname", "From", "Mode");
	fprintf(fout, "%-12.12s %-20.20s %-16.16s %-26.26s\n",
	        "============", "====================", 
	        "================", "==========================");

	resolve_utmp ();

	for (i = user_num = 0, uentp = utmpshm->uinfo; i < USHM_SIZE; i++, uentp++)
	{
		if (uentp->userid[0])
		{
			fprintf(fout, "%-12.12s %-20.20s %-16.16s %-26.26s\n",
			        uentp->userid, uentp->username, uentp->from,
			        modestring(uentp, 1));
			user_num++;
		}
	}

	fprintf(fout, "%-12.12s %-20.20s %-16.16s %-26.26s\n",
	        "============", "====================", 
	        "================", "==========================");

	fprintf (fout, "\n[%s] Total users = %d\n", BBSNAME, user_num);
}
