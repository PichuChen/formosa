/*
 *  ¥»µ{¦¡¦³¤U¦C¥\¯à¡G
 *
 *     1. ±µ¦¬ userid.bbs@bbs...... ªº E-mail ¨ÃÂà¤J BBS Users ªº­Ó¤H«H½c.
 *     2. ±µ¦¬ mail bbs@bbs...... < post.file ªº E-mail To Post ¨ì¤@¯ë°Ï.
 *     3. ±µ¦¬ Board Manager ¥H E-mail To Post ªº¤è¦¡ Post ¨ìºëµØ°Ï.
 *
 *  Header Lines Rule ½Ð°Ñ¾\¤¤¤s BBS Announce.
 */

#define ANTISPAM

#include "bbs.h"
#include <varargs.h>


int     verbose = 0;

char    genbuf[1024];
time_t  now;

#if 0
char    sContentType[128], sContentTransferEncoding[128];	/* lthuang */
#endif
char    received[4096];


struct mail_info
{
	char    type;
	char    from[STRLEN];
	char    to[IDLEN + 2];
	char    subject[STRLEN];
	char    sender[IDLEN + 2];
	char    passwd[PASSLEN];
	char    board[STRLEN];
};

struct mail_info minfo;


void
log_bbsmail(va_alist)
va_dcl
{
	va_list args;
	time_t  now;
	int     fd;
	char    msgbuf[1024], buf[1024], *fmt;
	char    timestr[22];

	va_start(args);
	fmt = va_arg(args, char *);

	vsprintf(msgbuf, fmt, args);
	va_end(args);

	time(&now);
	strftime(timestr, sizeof(timestr), "%x %X", localtime(&now));

	sprintf(buf, "%s %s\n", timestr, msgbuf);
	if ((fd = open(PATH_BBSMAIL_LOG, O_APPEND | O_CREAT | O_WRONLY, 0600)) > 0)
	{
		write(fd, buf, strlen(buf));
		close(fd);
	}
}


#define GET_NEXTONE	0
#define GET_NEXTALL	1
#define GET_HEADER	2
#define GET_PASSWD	3

char   *
mygets(buf, bsize, fp)
char   *buf;
int     bsize;
FILE   *fp;
{
	register char *p;

	if (fgets(buf, bsize, fp))
	{
		if ((p = strrchr(buf, '\n')) && p > buf && *(--p) == '\r')
		{
			*p++ = '\n';
			*p = '\0';
		}
		return buf;
	}
	return NULL;
}


/* if type == 0 ¥u§ì¥X¤U¤@¶µ
 *    type == 1 ²Ä¤G¶µ¥H«áªº¥þ«þ
 *    type == 2 ¨ú±o¼ÐÀY¼Æ¦æ«áªº¸ê®Æ
 *    type == 3 ¨ú±o password
 */
int
next_arg(from, to, len, type)
register char *from, *to;
register int len, type;
{
	register int i = 0, j = 0;
	register char ccc;

	if (type == GET_NEXTONE)
		ccc = ' ';
	else
		ccc = ':';

	while (from[i] != ccc)
		if (from[i] == '\n' || from[i] == '\0')
			return -1;
		else
			i++;
	if (type != GET_NEXTONE)
		i++;
	while (isspace((int)from[i]))
		i++;
	i--;
	switch (type)
	{
	case GET_NEXTONE:
		while (from[++i] != ' ' && from[i] != '\0' && j < len - 1)
		{
			/* 0x1b is ESC */
			if (from[i] == 0x1b || from[i] == '\t' || from[i] == '\n')
				to[j++] = ' ';
			else
				to[j++] = from[i];
		}
		break;
	case GET_NEXTALL:
		while (from[++i] != '\n' && from[i] != '\0' && j < len - 1)
		{
			if (from[i] == 0x1b || from[i] == '\t')
				to[j++] = ' ';
			else
				to[j++] = from[i];
		}
		break;
	case GET_HEADER:
		while (from[++i] != '\n' && from[i] != ' ' && from[i] != '\0' && j < len - 1)
		{
			if (from[i] == 0x1b || from[i] == '\t')
				to[j++] = ' ';
			else
				to[j++] = from[i];
		}
		break;
	case GET_PASSWD:
		while (from[++i] != '\n' && from[i] != '\0' && j < len - 1)
			to[j++] = from[i];
	}
	to[j] = '\0';
	return 0;
}


int
increase_user_postnum(userid)
char    userid[];
{
	int     fd;
	USEREC  urc;

	sethomefile(genbuf, userid, UFNAME_PASSWDS);
	if ((fd = open(genbuf, O_RDWR)) > 0)
	{
		if (read(fd, &urc, sizeof(urc)) == sizeof(urc))
		{
			urc.numposts++;
			if (lseek(fd, 0, SEEK_SET) != -1)
			{
				if (write(fd, &urc, sizeof(urc)) == sizeof(urc))
				{
					close(fd);
					return 0;
				}
			}
		}
		close(fd);
	}
	return -1;
}


USEREC  user;

int
do_sign(r_file)
char    r_file[];
{
	FILE   *fpr, *fpw;
	int     line;
	char    filename[PATHLEN];

	sethomefile(filename, minfo.sender, UFNAME_SIGNATURES);
	if ((fpr = fopen(r_file, "r")) == NULL)
		return -1;
	if ((fpw = fopen(filename, "w")) == NULL)
	{
		fclose(fpr);
		return -1;
	}

	line = 0;
	while (line < (MAX_SIG_LINES * MAX_SIG_NUM)
	       && mygets(genbuf, sizeof(genbuf), fpr))
	{
		if (line == 0)
		{
			if (genbuf[0] == '\n')
				continue;
		}
		fputs(genbuf, fpw);
		line++;
	}
	fclose(fpr);
	fclose(fpw);
	chmod(filename, 0644);
	return 0;
}


int
do_plan(r_file)
char    r_file[];
{
	FILE   *fpr, *fpw;
	int     line;
	char    filename[PATHLEN];

	sethomefile(filename, minfo.sender, UFNAME_PLANS);
	if ((fpr = fopen(r_file, "r")) == NULL)
		return -1;
	if ((fpw = fopen(filename, "w")) == NULL)
	{
		fclose(fpr);
		return -1;
	}

	line = 0;
	while (mygets(genbuf, sizeof(genbuf), fpr))
	{
		if (line == 0)
		{
			if (genbuf[0] == '\n')
				continue;
		}
		fputs(genbuf, fpw);
		line++;
	}
	fclose(fpr);
	fclose(fpw);
	chmod(filename, 0644);
	return 0;
}


#ifdef ANTISPAM

#define RULE  3			/* rule 2 .... 10 (¤£«ØÄ³¶W¹L 10 ) */
#define SPAM_MAIL_POOL_SIZE  1024
#define SPAM_POST_POOL_SIZE  64
#define REACH_SPAM_MAIL_NUM  3
#define REACH_SPAM_POST_NUM  1

struct spam
{
	int     hs_a;
	int     hs_b;
	int     hs_c;
	int     val;
};

struct SPAMSHM
{
	struct spam mail_pool[SPAM_MAIL_POOL_SIZE];
	struct spam post_pool[SPAM_POST_POOL_SIZE];
	time_t  mtime;		/* unused */
};

struct SPAMSHM *spamshm = NULL;

#define SPAMSHM_KEY 0x1729

int is_spam = 0;


void
resolve_spamshm()
{
	if (!spamshm)
	{
		spamshm = (void *) attach_shm(SPAMSHM_KEY, sizeof(struct SPAMSHM));

		memset(spamshm, 0, sizeof(spamshm));
	}
}


static int
spam_filehash(filename, hs_a, hs_b, hs_c)
const char   *filename;
int    *hs_a, *hs_b, *hs_c;
{
	FILE   *fp;
	char    buf[4096];

	if ((fp = fopen(filename, "r")) == NULL)
		return -1;

	*hs_a = 0;
	*hs_b = 0;
	*hs_c = 0;
	while (fgets(buf, sizeof(buf), fp))
	{
		(*hs_b)++;
		*hs_a += buf[strlen(buf) / ((*hs_b % RULE) + 1)];
		*hs_c += buf[strlen(buf) / RULE];
	}
	fclose(fp);
	return 0;
}


int
search_spamshm(filename, opt)
const char *filename;
int opt;
{
	int     hs_a, hs_b, hs_c;
	register int i, pool_size, spam_num;
	struct spam *sentp, *pool;

	resolve_spamshm();
	
	spam_filehash(filename, &hs_a, &hs_b, &hs_c);

	if (hs_a == 0 && hs_b == 0 && hs_c == 0)
		return 0;

	if (!opt)
	{
		pool = spamshm->mail_pool;
		pool_size = SPAM_MAIL_POOL_SIZE;
		spam_num = REACH_SPAM_MAIL_NUM;
	}
	else
	{
		pool = spamshm->post_pool;
		pool_size = SPAM_POST_POOL_SIZE;
		spam_num = REACH_SPAM_POST_NUM;
	}

	sentp = pool;
	for (i = 0; i < pool_size; i++, sentp++)
	{
		if (sentp->hs_a == hs_a && sentp->hs_b == hs_b && sentp->hs_c == hs_c)
		{
			if (sentp->val++ < spam_num)
				return 0;
			else
				return 1;
		}
	}

	sentp = pool;
	for (i = 0; i < pool_size; i++, sentp++)
	{
		if (sentp->val == 0)
		{
			sentp->hs_a = hs_a;
			sentp->hs_b = hs_b;
			sentp->hs_c = hs_c;
			sentp->val = 1;
			return 0;
		}
	}

	sentp = pool;
	for (i = 0; i < pool_size; i++, sentp++)
	{
		if (sentp->val <= 3)
		{
			sentp->val = 0;
			sentp->hs_a = 0;
			sentp->hs_b = 0;
			sentp->hs_c = 0;
		}
	}
	return 0;
}
#endif /* ANTISPAM */


#if 1
char fn_spam[PATHLEN];
#endif
	
int
do_post(r_file)
char    r_file[];
{
	char    path[PATHLEN], fname[PATHLEN];
	FILE   *fpr, *fpw;
	char   *subject, *postpath;
	int     treasure;
	char    str[STRLEN];
	BOARDHEADER bhead;
	char   *timestr;


	if (minfo.board[0] == '\0')
		return -1;

#ifdef ANTISPAM
	if (strcmp(minfo.from, "MAILER-DAEMON"))
	{
		if (search_spamshm(r_file, 1))
		{
			log_bbsmail("PSPAM: from=<%s>, board=<%s>, subject=<%s>",
			            minfo.from, minfo.board, minfo.subject);
			is_spam = 1;			           
			return -1;
		}
	}
#endif

	if (minfo.board[0] == '#')
	{
		strcpy(str, minfo.board + 1);
		strcpy(minfo.board, str);
		treasure = TRUE;
	}
	else
		treasure = FALSE;

	if (get_board(&bhead, minfo.board) <= 0)
		return -1;
	if (!can_see_board(&bhead, user.userlevel)
	    || ((bhead.brdtype & BRD_IDENT) && user.ident != 7))
	{
		return -1;
	}
	if (treasure == TRUE && strcmp(minfo.sender, bhead.owner))
		return -1;

	strcpy(minfo.board, bhead.filename);

	sprintf(fname, "tmp/_bbsmail_post");
	if ((fpr = fopen(r_file, "r")) == NULL)
		return -1;
	if ((fpw = fopen(fname, "w")) == NULL)
	{
		fclose(fpr);
		return -1;
	}

	if (minfo.subject[0] != '\0')
		subject = minfo.subject;
	else
		subject = "(no subject)";

	timestr = ctime(&now);
	*(timestr + strlen(timestr) - 1) = '\0';

	write_article_header(fpw, minfo.sender, user.username, minfo.board, timestr,
	                     subject, "E-Mail Post");
	fputs("\n", fpw);
	while (mygets(genbuf, sizeof(genbuf), fpr))
		fputs(genbuf, fpw);
	fclose(fpr);

	sethomefile(genbuf, minfo.sender, UFNAME_SIGNATURES);
	if ((fpr = fopen(genbuf, "r")) != NULL)
	{
		int     line = 0;

		fputs("\n--\n", fpw);
		while (line++ < MAX_SIG_LINES && mygets(genbuf, sizeof(genbuf), fpr))
			fputs(genbuf, fpw);
		fclose(fpr);
	}
	fprintf(fpw, "[m\n");
	fclose(fpw);
	chmod(fname, 0644);

	if (treasure == TRUE)
	{
		settreafile(path, minfo.board, NULL);
		postpath = path;
	}
	else
		postpath = NULL;

	if (PublishPost(fname, minfo.sender, user.username, minfo.board, 
	                subject, user.ident, NULL, TRUE, postpath, 0) == -1)
	{
		unlink(fname);
		return -1;
	}

	if (!(bhead.brdtype & BRD_NOPOSTNUM))
		increase_user_postnum(minfo.sender);

	unlink(fname);
	return 0;
}


int
do_mail(r_file)
char    r_file[];
{
	char    fn_new[PATHLEN];
	FILE   *fpr, *fpw;
	int     result;
	char   *timestr, *subject;

	sprintf(fn_new, "%s.new", r_file);


#ifdef ANTISPAM
	if (search_spamshm(r_file, 0))
	{
		log_bbsmail("MSPAM: from=<%s>, to=<%s>, subject=<%s>",
		            minfo.from, minfo.sender, minfo.subject);
		return -1;
	}
#endif

	if ((fpr = fopen(r_file, "r")) == NULL)
		return -1;

	if ((fpw = fopen(fn_new, "w")) == NULL)
	{
		fclose(fpr);
		return -1;
	}

	if (minfo.subject[0] != '\0')
	{
		subject = minfo.subject;
#if 1		
		strcpy(genbuf, subject);
		decode_line(subject, genbuf);	/* check subject length, and how ? */
#endif
	}
	else
		subject = "(no subject)";

	timestr = ctime(&now);
	*(timestr + strlen(timestr) - 1) = '\0';

	write_article_header(fpw, minfo.from, "", NULL, timestr, subject, NULL);
	
#if 0	
	if (sContentType[0])
	{
		if (strncmp(sContentType, "text/plain", 10))
		{
			fprintf(fpw, "%s\n", sContentType);
#endif			
			fputs("\n", fpw);
			while (mygets(genbuf, sizeof(genbuf), fpr))
				fputs(genbuf, fpw);
#if 0				
		}
		else 
		{
			char line[4096];		
			int qp = 0;
			
			if (!strncmp(sContentTransferEncoding, "quoted-printable", 16))
				qp = 1;
			fputs("\n", fpw);
			while (mygets(genbuf, sizeof(genbuf), fpr))
			{
				strcpy(line, genbuf);
				/* check subject length, and how ? */
				if (qp)
					qp_decode_str(genbuf, line);
				else
					base64_decode_str(genbuf, line);
				fputs(genbuf, fpw);
			}
		}
	}
#endif	

	fputs("[m\n", fpw);	
	fclose(fpr);
	fclose(fpw);
	chmod(fn_new, 0600);

	log_bbsmail("from=<%s>, to=<%s>, path=<%s>",
	            minfo.from, minfo.sender, received);	/* lthuang */
		    
	result = SendMail(-1, FALSE, fn_new, minfo.from, minfo.sender,
				subject, user.ident);

	unlink(fn_new);

	return result;
}


int
access_mail(r_file)
char    r_file[];
{
	struct stat st;

	memset(&user, 0, sizeof(user));

	if (minfo.to[0] != '\0')
		strcpy(minfo.sender, minfo.to);
	if (get_passwd(&user, minfo.sender) <= 0)
	{
		log_bbsmail("NOENT: from=<%s>, to=<%s>", 
				minfo.from, minfo.sender);
		return -1;
	}

	if (verbose)
	{
		printf("Mtype: %c Mfrom: %s Mto: %s\n", 
		       minfo.type, minfo.from, minfo.to);
		printf("Msubject: %s\n", minfo.subject);
		printf("Msender: %s Mboard: %s Mpasswd: %s\n", 
		       minfo.sender, minfo.board, minfo.passwd);
	}

	if (stat(r_file, &st) == 0 && st.st_size > MAX_MAIL_SIZE)
	{
		log_bbsmail("ERROR: from=<%s>, to=<%s>, size too big: %d",
			    minfo.from, minfo.sender, st.st_size);
	}

	if (minfo.type == 's' && checkpasswd(user.passwd, minfo.passwd))
		do_sign(r_file);
	else if (minfo.type == 'l' && checkpasswd(user.passwd, minfo.passwd))
		do_plan(r_file);
#ifdef IDENT	
	else if (minfo.type == 'c')
		do_syscheck(r_file);
#endif		
	else if (minfo.type != 'm' && minfo.passwd[0] != '\0' 
	         && minfo.sender[0] != '\0' 
	         && checkpasswd(user.passwd, minfo.passwd))
	{
		do_post(r_file);
	}
	else
		do_mail(r_file);
	return 0;
}


int
readin_mail(filename)
char   *filename;
{
	int     i, ok_num, rec_len, save_rec_len, invalid;
	char    rbuf[1024], w_file[PATHLEN], *s, outside[512];
	FILE   *fp, *fp_sys;
#if 1
	FILE *fp_spam;
	char fn_spam[PATHLEN];
	
	is_spam = 0;
#endif	
	

#ifdef TEST
	fp_sys = stdin;
#else	
	if ((fp_sys = fopen(filename, "r")) == NULL)
		return -1;
#endif		


	i = 0;
	ok_num = 0;
	invalid = 0;
	fp = NULL;

	while (mygets(rbuf, sizeof(rbuf), fp_sys))
	{
		if (!strncasecmp(rbuf, "From ", 5))
			break;
	}

	for (;;)
	{
		if (i > 0)
		{
			fclose(fp);

			if (invalid)
				log_bbsmail("ERROR: from=<%s>, to=<%s>", minfo.from, outside);
			else if (ok_num == 5)
				access_mail(w_file);			
			else if (minfo.to[0] == '\0')	/* lthuang */
				log_bbsmail("ERROR: from=<%s>, to=<>", minfo.from);

#if 1
			if (!is_spam)
				unlink(fn_spam);
			is_spam = 0;
#endif				
			unlink(w_file);
		}
#if 1		
		else
		{
			sprintf(fn_spam, "log/spam.%d.%d", time(0), i);		
			fp_spam = fopen(fn_spam, "w");			
			fprintf(fp_spam, "%s", rbuf);			
		}
#endif		
	
		if (strncasecmp(rbuf, "From ", 5))
			break;
	
		sprintf(w_file, "%s-%d", filename, ++i);
		if ((fp = fopen(w_file, "w")) == NULL)
		{
			fclose(fp_sys);
#if 1
			if (i <= 0)
			{
				fclose(fp_spam);
				unlink(fn_spam);
			}
#endif						
			return -1;
		}
		chmod(w_file, 0600);

		memset(&minfo, 0, sizeof(minfo));
		received[0] = '\0';
		rec_len = 0;
		save_rec_len = 0;
#if 0		
		sContentType[0] = '\0';		/* lthuang */
#endif		
		invalid = 0;		
		ok_num = 0;				
		
#if 1
		if (i > 0)
		{
			sprintf(fn_spam, "log/spam.%d.%d", time(0), i);
			fp_spam = fopen(fn_spam, "w");
		}
#endif		
		
		next_arg(rbuf, minfo.from, sizeof(minfo.from), GET_NEXTONE);

		while (mygets(rbuf, sizeof(rbuf), fp_sys))
		{
			if ((!strncasecmp(rbuf, "To: ", 4)
				 || !strncasecmp(rbuf, "Apparently-To: ", 15)))
			{
				char *sb;
				
				if ((sb = strchr(rbuf, '<')) != NULL)
				{
					sb++;
					if ((s = strchr(sb, '>')) != NULL)
						*s = '\0';
				}
				else
				{
					sb = rbuf;
					while (!isspace((int)*sb))
						sb++;
					while (isspace((int)*sb))
						sb++;
				}
				
				if ((s = strchr(sb, '\n')) != NULL)
					*s = '\0';
				strcpy(outside, sb);	/* lthuang */
				
				if ((s = strstr(sb, "@")) != NULL)
					*(s--) = '\0';
				else
					s = sb + strlen(sb);
					
				strncpy(minfo.to, sb, sizeof(minfo.to));
			}
			else if (!strncasecmp(rbuf, "Subject: ", 9))
				next_arg(rbuf, minfo.subject, sizeof(minfo.subject), GET_NEXTALL);
#if 0				
			else if (!strncasecmp(rbuf, "Content-Type: ", 14))
				strcpy(sContentType, rbuf);
			else if (!strncasecmp(rbuf, "Content-Transfer-Encoding: ", 27))
				strcpy(sContentTransferEncoding, rbuf);
#endif				
			else if (!strncasecmp(rbuf, "Received: ", 10))
			{
				char   *path;

				if ((path = strstr(rbuf, "from")) != NULL)
				{
					path += 5;

					rec_len = save_rec_len;
					received[rec_len++] = '!';

					while (*path != '\0' && *path != '\n')
					{
/*                                      
   if (*path == 'b' && *(path+1) == 'y')
   {
   if (*(path-1) == ' ')
   rec_len--;
   break;
   }
 */
						received[rec_len++] = *path++;
					}
					received[rec_len] = '\0';
					if (save_rec_len == 0)
						save_rec_len = rec_len;
				}
			}
			if (rbuf[0] == '\n')
				break;
#if 1
			fprintf(fp_spam, "%s", rbuf);
#endif							
#if 0
			fprintf(fp, "%s", rbuf);	/* not strip mail header any more */
#endif
		}

#if 1
		fclose(fp_spam);
#endif
		
		if ((s = strstr(minfo.to, ".bbs")) != NULL)
		{
			*s = '\0';
			if (minfo.to[0] != '\0')
				ok_num = 5;
			minfo.type = 'm';				
		}
		else if (!strcmp(minfo.to, "bbs"))
		{
			minfo.to[0] = '\0';		
#ifdef IDENT			
			if (!strncmp(minfo.subject, "[syscheck]", 10))
			{
				minfo.type = 'c';
			}
			else
#endif			
			minfo.type = 'p';
		}
		else if (minfo.to[0] != '\0')
		{
			invalid = 1;
		}
			
		while (mygets(rbuf, sizeof(rbuf), fp_sys))
		{
			if (!strncasecmp(rbuf, "From ", 5))
				break;
				
			if (ok_num == 5)
			{
				fprintf(fp, "%s", rbuf);
				continue;
			}

			if (ok_num < 5 && (s = strstr(rbuf, "#type:")) != NULL)
			{
				ok_num++;
				if (strstr(s, "sign"))
					minfo.type = 's';
				else if (strstr(s, "plan"))
					minfo.type = 'l';
			}
			else if (minfo.sender[0] == '\0' && (s = strstr(rbuf, "#name:")) != NULL)
			{
				ok_num++;
				next_arg(s, minfo.sender, sizeof(minfo.sender), GET_HEADER);
			}
			else if (minfo.passwd[0] == '\0' &&
				 ((s = strstr(rbuf, "#password:")) != NULL
				  || (s = strstr(rbuf, "#passwd:")) != NULL))
			{
				ok_num++;
				next_arg(s, minfo.passwd, sizeof(minfo.passwd), GET_PASSWD);
			}
			else if (minfo.board[0] == '\0' && (s = strstr(rbuf, "#board:")) != NULL)
			{
				ok_num++;
				next_arg(s, minfo.board, sizeof(minfo.board), GET_HEADER);
			}
			else if (
/*			
			minfo.title[0] == '\0' &&
*/			
			         ((s = strstr(rbuf, "#title:")) != NULL
			          || (s = strstr(rbuf, "#subject:")) != NULL))
			{
				ok_num++;
				next_arg(s, minfo.subject, sizeof(minfo.subject), GET_NEXTALL);
			}
			else
			{
				if (minfo.sender[0] != '\0' && minfo.passwd[0] != '\0'
				    && minfo.board[0] != '\0' && minfo.subject[0] != '\0')
				{
					ok_num = 5;
				}
				fprintf(fp, "%s", rbuf);
			}
		}
	}
#ifdef TEST
#else
	fclose(fp_sys);
#endif	
	return 0;
}


int
main(argc, argv)
int     argc;
char   *argv[];
{
	char    spool_tmp[PATHLEN], bbsmail_box[PATHLEN];
	struct stat st;

	if (argc == 2)
	{
		if (!strcmp(argv[1], "-v"))
			verbose = 1;
	}

#ifdef TEST
#else
	strcpy(bbsmail_box, "/var/spool/mail/bbs");
	if (stat(bbsmail_box, &st) != 0 || st.st_size == 0)
	{
		strcpy(bbsmail_box, "/var/mail/bbs");	
		if (stat(bbsmail_box, &st) != 0 || st.st_size == 0)
		{
			/* bbs mail spool is empty */
			exit(0);
		}
	}
#endif	
	
	if (chdir(HOMEBBS) == -1)
	{
		/* home not exist */
		exit(0);
	}

	now = time(0);
	sprintf(spool_tmp, "tmp/_bbsmail.%d", (int)now);
#ifndef TEST	
	if (myrename(bbsmail_box, spool_tmp) == -1)
	{
		printf("cannot rename: from %s to %s\n", bbsmail_box, spool_tmp);
		exit(1);
	}
#endif	

	chown(spool_tmp, BBS_UID, BBS_GID);

	init_bbsenv();

	readin_mail(spool_tmp);
	unlink(spool_tmp);
	return 0;
}
