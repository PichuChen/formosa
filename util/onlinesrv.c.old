
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <sys/wait.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <sys/types.h>
#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>

#ifdef AIX
# include <sys/select.h>
#endif


#include <sys/ipc.h>
#include <sys/shm.h>

#include "bbs.h"

#define	PATH_DEVNULL	"/dev/null"

extern int errno;
extern int utmp_semid;


void
sync_ulist()
{
    register USER_INFO *uentp;
    register int i;
	int total = 0;
	extern struct UTMPFILE *utmpshm;	

    resolve_utmp();
    uentp = utmpshm->uinfo;
    sem_lock(utmp_semid, SEM_ENTR);    
    for (i = 0; i < USHM_SIZE; i++, uentp++)
    {
		if (uentp->pid < 2)
		    continue;
		if (kill(uentp->pid, 0) == -1 && errno == ESRCH)	/* pid not exist */
		{
			uentp->userid[0] = '\0';
			uentp->pid = 0;
		    continue;
		}

		total++;
    }
	utmpshm->number = total;
    sem_lock(utmp_semid, SEM_EXIT);
}


/*
 * Main
 *
 */
int 
main(argc, argv)
int     argc;
char   *argv[];
{
	int     aha, on = 1;
	struct timeval wait;
	char    buf[80];


	if (fork() != 0)
		exit(0);

	for (aha = 64; aha >= 0; aha--)
		close(aha);

	if ((aha = open(PATH_DEVNULL, O_RDONLY)) < 0)
		exit(1);
	if (aha)
	{
		dup2(aha, 0);
		close(aha);
	}
	dup2(0, 1);
	dup2(0, 2);

	sprintf(buf, "/tmp/onlinesrv.pid");
	unlink(buf);
	if ((aha = open(buf, O_WRONLY | O_CREAT, 0644)) > 0)
	{
		sprintf(buf, "%-d\n", getpid());
		write(aha, buf, strlen(buf));
		close(aha);
	}


	utmp_semid = sem_init(UTMPSEM_KEY);

	init_bbsenv();

	wait.tv_sec = 10;
	wait.tv_usec = 0;

	while (1)
	{
		if ((on = select(0, 0, 0, 0, &wait)) < 1)
		{
			if (on < 0 && errno == EINTR)
				continue;
			else if (on == 0)
			{
				sync_ulist();
				continue;
			}
			else
				exit(-1);
		}
	}
}
