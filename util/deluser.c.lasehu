
#include "bbs.h"

#define DEBUG

#define DEL_USER3	(10)	/* 天 */
#define DEL_USER49	(30)	/* 天 */
#define DEL_USER50	(90)	/* 天 */
#define DEL_USER100	(365)	/* 天 */

#define DEL_HOME	"home/.del"
#define DEL_MAIL	"mail/.del"
#define RPT_BOARD	"user-stat"

#define RPT_DELUSER	"log/rpt.deluser"
#define RPT_BM		"log/rpt.bm"
#define RPT_SYSOP	"log/rpt.sysop"
#define RPT_TOTAL   "log/rpt.total"

#define IMPOSSIBLE_TIME (400*24*60*60)

time_t  now, duser3, duser49, duser50, duser100;


char    today[40];

extern unsigned int get_passwd(USEREC *urcp, char *userid);


int 
IsExpire(u)
USEREC *u;
{
	if (u->lastlogin > duser49)
		return 0;
#if 0		
	else if (u->userlevel == PERM_SYSOP)
		return 0;
#endif		
	else if (u->userlevel >= 200)
		return 0;
	else if (!strcmp(u->userid, "SYSOP")
#ifdef GUEST
		 || !strcmp(u->userid, GUEST)
#endif
		)		/* lasehu */
	{
		return 0;
	}
	else if (u->lastlogin <= 0 || (u->lastlogin < (now - IMPOSSIBLE_TIME)))
		return 0;
	else if (u->userlevel >= PERM_BM)
	{
		if (u->lastlogin < duser100)
			return 1;
	}
	else if (u->userlevel >= 50)
	{
		if (u->lastlogin < duser50)
			return 1;
	}
	else if (u->userlevel <= 3)
	{
		if (u->lastlogin < duser3)
			return 1;
	}
	else
	{
		if (u->lastlogin < duser49)
			return 1;
	}
	return 0;
}


/**
 **
 ** opt: TRUE for delete entry from USERIDX and PASSFILE, otherwise
 ** 
 ** NOTE: please do not set opt with flock() and USERIDX file
 **/
int
deluser(urec, opt)
const USEREC *urec;
BOOL opt;
{
	char    path[PATHLEN], path2[PATHLEN], path3[PATHLEN];
	const char *userid;


	if (urec == NULL)
		return -1;
	userid = urec->userid;	
	if (userid == NULL || userid[0] == '\0')
		return -2;

#ifndef DEBUG
	sethomefile(path, userid, NULL);
	sprintf(path2, "%s/%c/%s", DEL_HOME, tolower(userid[0]), userid);
	if (isdir(path2))
		return -3;
	if (myrename(path, path2))
	{
		if (!isalpha(userid[0]))
			return -4;
		sprintf(path3, "%s/%c", DEL_HOME, tolower(userid[0]));	
		mkdir(path3, 0700);
		if (myrename(path, path2))
			return -5;
	}
	
	setmailfile(path, userid, NULL);
	if (isdir(path))
	{
		sprintf(path2, "%s/%c/%s", DEL_MAIL, tolower(userid[0]), userid);	
		if (myrename(path, path2))
		{
			if (!isalpha(userid[0]))
				return -6;
			sprintf(path3, "%s/%c", DEL_MAIL, tolower(userid[0]));	
			mkdir(path3, 0700);
			if (myrename(path, path2))
				return -7;
		}
	}
	
	if (opt)
	{
		struct useridx uidx;
		int uid = urec->uid, fd;

	
		if ((fd = open(USERIDX, O_RDWR)) < 0)
			return -6;
		flock(fd, LOCK_EX);
		if (lseek(fd, (off_t) ((uid - 1) * sizeof(uidx)), SEEK_SET) != -1
		    && read(fd, &uidx, sizeof(uidx)) == sizeof(uidx)
		    && !strcmp(uidx.userid, userid)
		    && lseek(fd, -((off_t) sizeof(uidx)), SEEK_CUR) != -1)
		{
			memset(&uidx, 0, sizeof(uidx));
			if (write(fd, &uidx, sizeof(uidx)) == sizeof(uidx))
			{
				flock(fd, LOCK_UN);
				close(fd);
				return 0;
			}
		}
		flock(fd, LOCK_UN);
		close(fd);
/*	comment out by lasehu
		return -8;
*/
		return 0;		
	}
#endif	

	return 0;
}


int 
DelUser()
{
#ifdef DEBUG
	char    aha[] = "0p";
#else
	char    aha[] = "0abcdefghijklmnopqrstuvwxyz";
#endif	
	DIR    *dirp;
	struct  dirent *dent;
	char    path[512], upath[80], ppath[80];
	int     fdu, fdp;
	FILE   *fpr, *fpbm, *fpsys, *fpt;
	USEREC  user;
	int     total_user, total_bm, total_sysop, total_del, total_ident;
	int i, errcode;


	total_user = total_bm = total_sysop = total_del = total_ident = 0;	

	sprintf(upath, "%s.new", USERIDX);
	sprintf(ppath, "%s.new", PASSFILE);
	if ((fdu = open(upath, O_WRONLY | O_CREAT | O_TRUNC, 0644)) < 0)
		return -1;
	if ((fdp = open(ppath, O_WRONLY | O_CREAT | O_TRUNC, 0644)) < 0)
	{
		close(fdu);
		return -1;
	}

	fpr = fopen(RPT_DELUSER, "w");
	fpbm = fopen(RPT_BM, "w");
	fpsys = fopen(RPT_SYSOP, "w");
	fpt = fopen(RPT_TOTAL, "w");

	for (i = 0; i < strlen(aha); i++)
	{
		static char tibuf[40];									
		
		
		sprintf(path, "home/%c", aha[i]);
		if (!(dirp = opendir(path)))
			continue;
			
		readdir(dirp);	/* skip . & .. */
		readdir(dirp);
		while (dent = readdir(dirp))
		{
			if (dent->d_name[0] == '\0')
				continue;

			if ((errcode = get_passwd(&user, dent->d_name)) <= 0)	/* ? */
			{
				strftime(tibuf, sizeof(tibuf), "%D %T %a", localtime(&user.lastlogin));
				fprintf(fpr, "[%12s] level:[%3d]  %s\n", 
						user.userid,	user.userlevel, tibuf);
				fprintf(fpr, "[%s] passwd err.%u\n", dent->d_name, errcode);								
			}
			else
			{
				if (IsExpire(&user))
				{
					strftime(tibuf, sizeof(tibuf), "%D %T %a", localtime(&user.lastlogin));
					fprintf(fpr, "[%12s] level:[%3d]  %s\n", 
							user.userid,	user.userlevel, tibuf);
					if ((errcode = deluser(&user, FALSE)) == 0)
					{
						total_del++;
						continue;
					}
					else
						fprintf(fpr, "[%s] deluser err.%d\n", dent->d_name, errcode);
				}
			}

			total_user++;
			if (user.ident == 7)
				total_ident++;
#if 0				
			if (user.userlevel >= PERM_SYSOP)
#endif			
			if (user.userlevel >= 200)
			{
				total_sysop++;
				fprintf(fpsys, "%12s %d\n", user.userid, user.userlevel);
			}
			else if (user.userlevel >= PERM_BM)
			{
				total_bm++;
				fprintf(fpbm, "%12s %d\n", user.userid, user.userlevel);
			}
			
			write(fdu, user.userid, sizeof(user.userid));
			write(fdp, &user, sizeof(user));
		}
		closedir(dirp);
	}
	close(fdu);
	close(fdp);	
#ifndef DEBUG	
	rename(upath, USERIDX);	
	rename(ppath, PASSFILE);	
#endif	

	fclose(fpr);
	fclose(fpbm);
	fclose(fpsys);
	
	fprintf(fpt, "\n######### 全站使用者 #########\n");
	fprintf(fpt, "# 刪除人數: %d\n", total_del);
	fprintf(fpt, "# 現在人數: %d\n", total_user);
	fprintf(fpt, "# 認證人數: %d\n", total_ident);
	fprintf(fpt, "# 版主人數: %d\n", total_bm);
	fprintf(fpt, "# 站長人數: %d\n", total_sysop);
	fclose(fpt);

	return 0;
}


int 
PostRpt()
{
	char    fname[PATHLEN], title[STRLEN];
	int     retval;
	FILE   *fpw;


	sprintf(fname, "tmp/.deluser_post");
	if ((fpw = fopen(fname, "w")) < 0)
		return -1;

	sprintf(title, "使用者刪除報告  %s", today);
	write_article_header(fpw, "SYSOP", "系統管理員", RPT_BOARD, today,
			     title, NULL);
	fprintf(fpw, "\n");			    
	fclose(fpw);			   

#ifdef DEBUG
	append_record(fname, "\n>>>>>>>> 測試模式報告 <<<<<<<<\n", 32);
#endif	
	append_file(fname, RPT_TOTAL);
	append_record(fname, "\n########## 刪除帳號 ##########\n", 32);	
	append_file(fname, RPT_DELUSER);
	append_record(fname, "\n########## 版主報告 ##########\n", 32);
	append_file(fname, RPT_BM);
	append_record(fname, "\n########## 站長報告 ##########\n", 32);
	append_file(fname, RPT_SYSOP);

	retval = PublishPost(fname, "SYSOP", "系統管理者", RPT_BOARD, title, 7,
			             "localhost", FALSE, NULL, 0);
	unlink(fname);
	return retval;			            
}


int
main(argc, argv)
int     argc;
char   *argv[];
{
	if (argc < 5)
	{
		printf("Usage: %s \
[天(3級以下)] [天(49級以下)] [天(50級)] [天(板主)]\n", argv[0]);
		printf("Example: %s  10 30 90 365\n", argv[0]);
		exit(0);
	}

	duser3 = atoi(argv[1]);
	duser49 = atoi(argv[2]);
	duser50 = atoi(argv[3]);
	duser100 = atoi(argv[4]);

	if (!duser3 || !duser49 || !duser50 || !duser100)
	{
		fprintf(stderr, "The value of day cannot be zero!\n");
		exit(1);
	}

	init_bbsenv();

	now = time(0);
	xstrncpy(today, Ctime(&now), sizeof(today));	
	
	if ((duser3 = now - (duser3 * 24 * 60 * 60)) <= 0)
		exit(-1);
	if ((duser49 = now - (duser49 * 24 * 60 * 60)) <= 0)
		exit(-1);
	if ((duser50 = now - (duser50 * 24 * 60 * 60)) <= 0)
		exit(-1);
	if ((duser100 = now - (duser100 * 24 * 60 * 60)) <= 0)
		exit(-1);

	DelUser();
	PostRpt();

	return 0;
}
