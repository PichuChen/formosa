/*
    ¤H¤u»{ÃÒ³B²zµ{¦¡ syscheck
    
                   ±iÂ²¼Ý¤¯   changiz@cc.nsysu.edu.tw
                   ¶À¥ß¼w     lthuang@cc.nsysu.edu.tw
*/
#include <termios.h>
#include "bbs.h"

#include <sys/fcntl.h>
#include <curses.h>

#ifdef SOLARIS
#include <term.h>
#endif

#include <errno.h>

#include "config.h"
#include "struct.h"


#define B_RED    "[41m"
#define B_GREEN  "[42m"
#define B_BROWN  "[43m"
#define B_BLUE   "[44m"
#define B_PINK   "[45m"
#define B_CYLN   "[46m"
#define B_WHITE  "[47m"

#define H_RED    "[1;31m"
#define H_GREEN  "[1;32m"
#define H_YELLOW "[1;33m"
#define H_BLUE   "[1;34m"
#define H_PINK   "[1;35m"
#define H_CYLN   "[1;36m"
#define H_WHITE  "[1;37m"

#define NORMAL "[0m"


extern char *tgetstr();
extern char *tgoto();
               

#undef DEBUG

void title();
char cgetch();

#define MAX_PBUF 1024

static unsigned char buf[MAX_PBUF];
int     pbuf;


int
main()
{
	char    name[20];

	init_bbsenv();
	
	s_init();
	k_init();

	s_clear();

	set_color(B_GREEN);
	set_color(H_YELLOW);
	s_box(0, 0, 79, 23);
	s_pr(5, 22, "CTRL-X: Â÷¶}   CTRL-H: §R°£¤@¦r¤¸");
	set_color(B_CYLN);
	s_box(5, 1, 69, 3);
	set_color(B_BLUE);
	set_color(H_WHITE);
	s_pr(8, 1, " ©R¥OÄæ ");

	title();

	set_color(B_CYLN);
	set_color(H_WHITE);

	s_pr(7, 3, "¬d¸ß­þ¦ì¨Ï¥ÎªÌªº¸ê®Æ: ");
	while (s_gets(name, 29, 3, 15) != -1)
	{
		if (Get_User(name) == -1)
		{
			set_color(H_YELLOW);
			set_color(B_WHITE);
			s_pr(7, 7, "¬dµL¦¹¤H¸ê®Æ.....   «ö¥ô·NÁäÄ~Äò");
			cgetch();
#if 0
			{
				char name[IDLEN], num[2];
				USEREC initial;

				s_pr(7, 3, "ª½±µ³q¹L»{ÃÒ (y/n) ? [n]: ");
				if (s_gets(name, 33, 3, 15) != -1)
				{
					if (get_passwd(&initial, name) <= 0)
					{
						s_pr(7,7, "¬dµL¦¹±b¸¹Æ.....   «ö¥ô·NÁäÄ~Äò");
						cgetch();
						continue;
					}
					if (s_gets(num, 23, 3, 2) != -1)
					{
						initial.ident = atoi(num);
						if (initial.ident > 7 || initial.ident < 0)
							initial.ident = 0;
						s_pr(7, 3, "­nµn¿ý¦¹¤H¸ê®Æ¶Ü[N]:             ");
						if ((cgetch() | 32) == 'y')
							update_passwd(&initial);
					}
				}
			}
#endif						
		}
		set_color(B_CYLN);
		set_color(H_WHITE);
		s_pr(29, 3, "               ");
		
		title();
		set_color(B_CYLN);
		set_color(H_WHITE);
		s_pr(7, 3, "¬d¸ß­þ¦ì¨Ï¥ÎªÌªº¸ê®Æ: ");
	}
	s_clear();	
	set_color(NORMAL);
	exit(0);
}



void 
title()
{
	set_color(H_YELLOW);
	set_color(B_WHITE);
	s_box(5, 6, 69, 14);
	set_color(B_BLUE);
	set_color(H_WHITE);
	s_pr(8, 6, " ¸ê®ÆÅã¥ÜÄæ ");
}


int 
Get_User(user)
char   *user;
{
	struct fileheader rec;
	int     f;
	FILE   *f2;
	char    buf[256];
	char    flag = 0;
	char    fname[256];
	char   *ptr;

	sprintf(fname, "%s/%s", BBSPATH_IDENT, DIR_REC);
	ptr = strrchr(fname, '/') + 1;
	if ((f = open(fname, O_RDONLY)) > 0)
	{
		while (read(f, &rec, sizeof(rec)) == sizeof(rec))
		{
			if (!strcmp(rec.owner, user))
			{
				sprintf(ptr, "%s", rec.filename);
				if ((f2 = fopen(fname, "r")) == NULL)
					continue;
				set_color(H_WHITE);
				set_color(B_WHITE);
				while (fgets(buf, sizeof(buf), f2))
				{
					if (!strcmp(buf, "\n"))
						continue;
					s_pr(7, 7 + flag, buf);
					flag++;
				}
				set_color(B_CYLN);
				set_color(H_WHITE);
				s_pr(7, 3, "­nµn¿ý¦¹¤H¸ê®Æ¶Ü[N]:             ");
				if ((cgetch() | 32) == 'y')
				{
					/* pgp_.. need to change */
					s_clear();
					if (pgp_encode(rec.owner, fname) != -1)
					{
						set_color(B_GREEN);
						set_color(H_YELLOW);
						s_box(0, 0, 79, 23);
						s_pr(5, 22, "CTRL-X: Â÷¶}   CTRL-H: §R°£¤@¦r¤¸");
						set_color(B_CYLN);
						s_box(5, 1, 69, 3);
						set_color(B_BLUE);
						set_color(H_WHITE);
						s_pr(8, 1, " ©R¥OÄæ ");
						title();
						set_color(H_YELLOW);
						set_color(B_WHITE);
						s_pr(7, 7, "µn¿ý§¹²¦.....   «ö¥ô·NÁäÄ~Äò");
						cgetch();
					}
				}
				fclose(f2);
				break;
			}
		}
		close(f);
	}
	if (flag != 0)
		return 0;
	return -1;
}


#define PUBLIC_KEY      "west&south&formosa"

int 
a_encode(file1, file2, file3)
char   *file1, *file2, *file3;
{
	struct stat st;
	char buf[256];

	mycp(file1, file2);
#ifdef DEBUG
		printf("file: %s\n", file2);
#endif		
	sprintf(buf, "./bin/pgp -e %s \"%s\"", file2, PUBLIC_KEY);
#ifdef DEBUG
		printf("command: %s\n", buf);
#endif				
#if 0		
	system(buf);
	sprintf(buf, "%s.pgp", file2);
#endif
#if 1
	sprintf(buf, "%s", file2);	
#endif	
#ifdef DEBUG
		printf("pgp: %s\n", file2);
#endif				
	if (stat(buf, &st) == 0)
	{			/* If encode success */
		mycp(buf, file3);
		unlink(buf);
	}
	unlink(file2);

	return 0;
}


int 
do_article(fname, path, owner, title)
char   *fname, *path, *owner, *title;
{
	char   *p;
	int     fd;
	struct fileheader Ifh;

	if (mycp(fname, path))
		return -1;
	p = strrchr(path, '/') + 1;
	bzero(&Ifh, sizeof(Ifh));
	strcpy(Ifh.filename, p);
	strcpy(Ifh.owner, owner);
	strcpy(Ifh.title, title);
	strcpy(p, DIR_REC);
	fd = open(path, O_WRONLY | O_CREAT | O_APPEND, 0644);
	strcpy(p, Ifh.filename);
	flock(fd, LOCK_EX);
	write(fd, &Ifh, sizeof(Ifh));
	flock(fd, LOCK_UN);
	close(fd);
	return 0;
}


int 
a_ok(name, cond)		/* write check level */
char    name[];
char    cond;
{
	int     uid;
	USEREC ident_user;

	if ((uid = get_passwd(&ident_user, name)) > 0)
	{
		ident_user.ident = cond;
		update_passwd(&ident_user);
	}
}


int 
pgp_encode(user, file)
char   *user;
char   *file;
{
	char    destfile[80];
	char    title[80];
	char    buf[200];
#if 0
	struct stat st;
#endif
	USEREC ident_user;

	a_ok(user, 7);		/* Get ident_user */
	sprintf(destfile, "%s/%s", BBSPATH_REALUSER, user);
	sprintf(title, "¨­¥÷½T»{: %s", user);
#if 0	
	if (stat(destfile, &st) == 0)			/* ? */
		return -1;
#endif		
	do_article(file, destfile, user, title);
	sprintf(buf, "tmp/%sPGP", ident_user.userid);
/*	
#ifdef NSYSUBBS	
	a_encode(file, buf, destfile);
#else
*/
	mycp(file, destfile);
/*	
#endif	
*/
	return 0;
}

/* 
   ¥H¤U¬O³B²zµe­±Åã¥Ü, ¤Î¿ï³æ¥\¯à, ¨Ï¥Î curses
*/


/*
   ¦¹°Æµ{¦¡¬O±q¤@­Ógame§Û¨Óªº, °£¤Fcgetch ¬O§Ú¥[¤Jªº¥~
   ¤j³¡¥÷¬O§O¤Hªº; ³o¸Ì¥D­n¬O¿Ã¹õ»PÁä½Lªºfunction.
                                           changiz@cc.nsysu.edu.tw
*/

static char *st_smkx;
static char *st_cup;
static char *st_clear;
static char *st_enacs;
static char *st_smacs;
char cursorm[24];
char clearbuf[24];
fd_set bits;

/*
char    A_UL = 'É';
char    A_LL = 'È';
char    A_UR = '»';
char    A_LR = '¼';
char    A_VL = 'º';
char    A_HL = 'Í';
*/
char    A_UL = '+';
char    A_LL = '+';
char    A_UR = '+';
char    A_LR = '+';
char    A_VL = '|';
char    A_HL = '-';

int     pc();

#define TPUTS(x, y, z)  (tputs(y, z, pc), pc(0), pc(0), pc(0))

set_color(color)
char   *color;
{
/*	
	s_pr(80, 24, color);
*/	
	while (*color)
		pc(*color++);

	fl();	/* lthuang */
}

k_init()
{
/*
	struct termios tinit;
*/	
	struct termios tem;

	FD_ZERO(&bits);
	FD_SET(0, &bits);

/*
	tcgetattr(0, &tinit);
*/
	tcgetattr(0, &tem);	
/*	
	ioctl(0, TCGETA, &tinit);
*/	
 /* Mise du tty en mode raw */
/* 
	tem = tinit;
*/	
	tem.c_oflag = 0;
	tem.c_lflag = 0;
	tem.c_iflag = 0;
	tem.c_cc[VMIN] = 1;
	tem.c_cc[VTIME] = 1;
	tcsetattr(0, TCSANOW, &tem);
/*	
	ioctl(0, TCSETA, &tem);
*/	
}

char 
cgetch()
{
	char    c;
	int ret;
	
	FD_ZERO(&bits);
	FD_SET(0, &bits);
	while ((ret = select(1, &bits, NULL, NULL, NULL)) <= 0)
	{
		if (ret == -1 && errno == EINTR)
			continue;
		exit(1);
	}
	if (read(0, &c, 1) == 0)
		exit(1);
	return c;
}


int 
s_gets(s, x, y, len)
char  *s;
int     x, y;
int     len;
{
	int     l = 0;
	char    k;

	bzero(s, len);
	while ((k = cgetch()) != '\r')
	{
		switch (k)
		{
			case 8:
				if (l == 0)
					break;
				l--;
/*				
				s_pc(x + l, y, 32);
*/
				pc(k);	/* lthuang */
				pc(' ');
				pc(k);
				fl();
				*(s + l) = 0;
				break;
			case '\n':
				*s = 0;
/*				
				for (l = 0; l < len; l++)
					s_pc(x + l, y, ' ');
*/					
				return 0;
			case 24:
				return -1;
				break;
			default:
				if (l == len - 1)
					continue;
			
				if (isalnum(k))
				{
					*(s + l) = k;
					s_pc(x + l, y, k);
					l++;
				}
				break;
		}
	}
/*	
	for (l = 0; l < len; l++)
		s_pc(x + l, y, 32);
*/		
	return 0;
}


s_init()
{
/*
	int     result;
*/	
	char sbuf[1024], *sbp;	/* lthuang */

/*
	if (setupterm((char *) 0, 1, &result) == ERR)
*/
	if (setterm(getenv("TERM")) == ERR)	/* lthuang */	
	{
/*	
		switch (result)
		{
			case 0:
				fprintf(stderr, "Can't find terminal %s\n\r", getenv("TERM"));
				break;
			case -1:
				fprintf(stderr, "Can't find termininfo database\n\r");
				break;
			default:
				fprintf(stderr, "Bad terminfo error %d\n\r", result);
				break;
		}
*/		
		exit(0);
	}
/*	
	st_cup = tigetstr("cup");
*/
	sbp = cursorm;	/* lthuang */
	st_cup = tgetstr("cm", &sbp);	
	if (!st_cup)
	{
		fprintf(stderr, "cup not found\n\r");
		exit(1);
	}
/*	
	st_clear = tigetstr("clear");
*/	
	sbp = clearbuf;	/* lthuang */
	st_clear = tgetstr("cl", &sbp); 
	if (!st_clear)
	{
		fprintf(stderr, "clear not found\n\r");
		exit(0);
	}
/*	
	st_smkx = tigetstr("smkx");
*/
	sbp = sbuf;	/* lthuang */
	st_smkx = tgetstr("smkx", &sbp);
	if (st_smkx)
		TPUTS(1, st_smkx, strlen(st_smkx));

/*
	st_smacs = tigetstr("smacs");
*/
	sbp = sbuf;	/* lthuang */
	st_smacs = tgetstr("smcas", &sbp);
	if (st_smacs)
	{
/*	
		st_enacs = tigetstr("enacs");	
*/
		sbp = sbuf;	/* lthuang */
		st_enacs = tgetstr("enacs", &sbp);		
		if (st_enacs)
			TPUTS(1, st_enacs, strlen(st_enacs));
	}
	fl();
}


pc(c)
char    c;
{
	if (pbuf == MAX_PBUF)
	{
		fl();
	}
	buf[pbuf++] = c;
}


fl()
{
	write(1, buf, pbuf);
	pbuf = 0;
}


s_pr(x, y, msg)
int     x;
int     y;
char *msg;
{
	char   *p = tgoto(st_cup, x, y);

	TPUTS(1, p, strlen(p));	
	p = msg;
	while (*p)
		pc(*p++);

	fl();
}


s_pc(x, y, c)
int     x;
int     y;
char    c;
{
	char   *p = tgoto(st_cup, x, y);

	TPUTS(1, p, strlen(p));
	if (c)
		pc(c);
	fl();
}


s_clear()
{
	TPUTS(1, st_clear, strlen(st_clear));
	fl();
}


s_box(x, y, l, h)
int     x, y;
int     l, h;
{
	int     i;
	char    buf[81];

	s_pc(x, y, A_UL);
	s_pc(x + l, y, A_UR);
	for (i = 1; i < l; i++)
	{
		s_pc(x + i, y, A_HL);
		s_pc(x + i, y + h, A_HL);
	}
	sprintf(buf, "%c%*s%c", A_VL, l - 1, "", A_VL);	
	for (i = 1; i < h; i++)
	{
		s_pr(x, y + i, buf);
	}
	s_pc(x, y + h, A_LL);
	s_pc(x + l, y + h, A_LR);
}


#if 0
int
a_level()
{
	char name[IDLEN], num[2];
	USEREC initial;

	clear();
	getdata(0, 0, _msg_ident_1, name, sizeof(name), ECHONOSP, NULL);
	if (get_passwd(&initial, name) <= 0)
	{
		outs(_msg_err_userid);
		return M_FULL;
	}
	getdata(1, 0, _msg_ident_2, num, sizeof(num), ECHONOSP, NULL);
	initial.ident = atoi(num);
	if (initial.ident > 7 || initial.ident < 0)
		initial.ident = 0;
	outs(_msg_not_sure_modify);
	if (igetkey() == 'y')
		update_passwd(&initial);
	return M_FULL;
}

#define PUBLIC_KEY      "west&south&formosa"

int
a_encode(srcfile, pgpfile)
char *srcfile, *pgpfile;
{
	char buf[PATHLEN];

	sprintf(buf, "tmp/%sPGP", curuser.userid);
	mycp(srcfile, buf);
	sprintf(genbuf, "pgp -e \"%s\" \"%s\"", buf, PUBLIC_KEY);
	outdoor(genbuf, ADMIN, TRUE);
	sprintf(buf, "tmp/%sPGP.pgp", curuser.userid);
	myrename(buf, pgpfile);

	return M_FULL;
}


int
a_chgpgp()
{
	int save_pager;
	DIR *dir;
	struct dirent *tmp;
	char gbuf1[30], gbuf2[30], pass[60];

	if (strcmp(curuser.userid, PGPUSER))
		return M_FULL;
	clear();
	outs(_msg_ident_5);
	if (igetkey() == 'y')
	{
		clear();
		getdata(2, 0, "What is SECURE KEY: ", pass, 59, DOECHO, NULL);
		reset_tty();
		dir = opendir(BBSPATH_REALUSER);
		while ((tmp = readdir(dir)) != NULL)
		{
			if (!strcmp(tmp->d_name, ".") || !strcmp(tmp->d_name, "..")
			    || !strcmp(tmp->d_name, DIR_REC))
			{
				continue;
			}
			setuserfile(gbuf1, tmp->d_name, BBSPATH_REALUSER);
			sprintf(gbuf2, "tmp/%sPGP", tmp->d_name);
			a_decode(gbuf1, gbuf2, pass);
			mycp(gbuf2, gbuf1);
			unlink(gbuf2);
		}
		closedir(dir);
		restore_tty();
		pressreturn();
	}

	clear();
	outs(_msg_ident_6);
	if (igetkey() == 'y')
	{
		sprintf(genbuf, "pgp -kg");
		outdoor(genbuf, ADMIN, TRUE);
		pressreturn();
	}

	move(1, 0);
	outs(_msg_ident_7);
	if (igetkey() == 'y')
	{
		clear();
		dir = opendir(BBSPATH_REALUSER);
		sprintf(gbuf2, "tmp/%sPGP", curuser.userid);
		while ((tmp = readdir(dir)) != NULL)
		{
			if (!strcmp(tmp->d_name, ".") || !strcmp(tmp->d_name, "..")
			    || !strcmp(tmp->d_name, DIR_REC))
			{
				continue;
			}
			setuserfile(gbuf1, tmp->d_name, BBSPATH_REALUSER);
			a_encode(gbuf1, gbuf1);
		}
		closedir(dir);
	}
	uinfo.pager = save_pager;
	update_ulist(&uinfo);

	return M_FULL;
}

#endif

