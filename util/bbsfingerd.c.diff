22c22,25
< FILE *fout, *fin;
---
> #define PATH_DEVNULL	"/dev/null"
> #define FINGER_PORT		(79)
> #define TIMEOUT			(10)
> 
25d27
< sigjmp_buf env;
26a29,31
> FILE *fout, *fin;
> sigjmp_buf env;
> int mysocket;
33a39,50
> void timeout_check(int sig)
> {
> 	if(mysocket != -1)
> 	{
> 		shutdown(mysocket, 2);
> 		close(mysocket);
> 	}
> 	siglongjmp(env, 1);
>             
> }
> 
> int
42c59
< 	int sock, maxs;
---
> 	int sock;
48,50c65,68
< 	signal(SIGTERM, shutdown_server);
< 	signal(SIGALRM, timeout_check);
< 	signal(SIGPIPE, SIG_IGN);
---
> 	for (on = sysconf(_SC_OPEN_MAX); on >= 0; on--)
> 		close(on);
> 
> 	setsid();
51a70,83
>     if (freopen(PATH_DEVNULL, "r", stdin) == NULL) {
> 		fprintf(stderr, "httpd: unable to replace stdin with /dev/null: %s\n",
> 			strerror(errno));
> 		exit(-1);
>     }
>     if (freopen(PATH_DEVNULL, "w", stdout) == NULL) {
> 		fprintf(stderr, "httpd: unable to replace stdout with /dev/null: %s\n",
> 			strerror(errno));
> 		exit(-1);
>     }
> 
> 	umask(0);
> 	
> #if 0
53a86
> #endif
60c93,94
< 
---
> 	
> 	on = 1;
62c96,99
< 
---
> 	on = 8192;
> 	setsockopt(sock, SOL_SOCKET, SO_SNDBUF, (int *) &on, sizeof(on));
> 	setsockopt(sock, SOL_SOCKET, SO_RCVBUF, (int *) &on, sizeof(on));
> 	
65c102
< 	sin.sin_port = htons ((u_short) 79);
---
> 	sin.sin_port = htons ((u_short) FINGER_PORT);
77d113
< 	maxs = 10;
82a119,124
> 	signal(SIGTERM, shutdown_server);
> 	signal(SIGALRM, timeout_check);
> 	signal(SIGPIPE, SIG_IGN);
> 
> 	fin = stdin;
> 	fout = stdout;
84c126
< 	while (1)
---
> 	while (RUNNING)
85a128,130
> 		alarm(0);
> 		mysocket = -1;
> 		
88c133
< 		if ((on = select (maxs, &ibits, 0, 0, NULL)) < 1)
---
> 		if ((on = select (sock+1, &ibits, NULL, NULL, NULL)) < 1)
101a147
> 		{
102a149
> 		}
106a154,156
> 			alarm(TIMEOUT);
> 			
> 		#if 0
117a168,171
> 		#endif
> 			dup2(ns, STDIN_FILENO);
> 			dup2(ns, STDOUT_FILENO);
> 			mysocket = ns;
128,129c182,183
< 				retval = query_user(0, inbuf, TRUE, qbuf);
< 		
---
> 				retval = query_user(0, inbuf, FALSE, qbuf);
> 				
159a214
> 			shutdown(ns, 2);
161a217
> 		
162a219,221
> 	
> 	return 0;
> 	
175c234
< 
---
> #if 0
176a236,237
> #endif
> 	fprintf(fout, "\nMax Online User = [%d]\n\n", MAXACTIVE);
186c247
< 	for (i = user_num = 0, uentp = utmpshm->uinfo; i < USHM_SIZE; i++, uentp++)
---
> 	for (i = user_num = 0, uentp = utmpshm->uinfo; i < MAXACTIVE; i++, uentp++)
188c249
< 		if (uentp->userid[0])
---
> 		if (uentp && uentp->userid[0] && !uentp->invisible)
