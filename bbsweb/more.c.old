
#include "bbs.h"
#include "bbsweb.h"
#include "bbswebproto.h"	/* for souts() */


#define USE_FP

/*******************************************************************
 *	輸出佈告、信件、名片檔 檔案內容
 *	filename 為檔案名
 *
 *	1.把其中的 ansi color 轉為 html 的 <font color=#......> tag 格式
 *	2.找出 http:// ftp:// telnet:// ... 加入 hyperlink
 *
 *	body_only:	只輸出文章內容，不包含檔頭 (發信人,標題,發信站..等)
 *	process: 	要不要處理 ansi code 和 hyperlink
 *
 *	return 
 *******************************************************************/

#define HyperLinkType	5	/* num of hyper link type to parse */

int 
ShowArticle(char *filename, BOOL body_only, BOOL process)
{				/* body only .. */
#ifdef USE_FP
	FILE *fp;
#else
	char *fp;
	int fd, fsize;
#endif
	char *p, *data;
	BOOL inHeader = TRUE;

#if 0
	char *AnsiColor[] =
	{"30", "31", "32", "33", "34", "35", "36", "37"};
#endif

	char *HTMLColor[] =
	{"000000", "8f0000", "008f00", "8f8f00", "00008f", "8f008f", "008f8f", "cfcfcf",
	/* HiColor */
	 "8f8f8f", "ff0000", "00ff00", "ffff00", "0000ff", "ff00ff", "00ffff", "ffffff"};

	struct HYPER_LINK
	{
		char *type;
		int len;
		char *allow;
		char *target;
	} hlink[HyperLinkType] =
	{
	/* 
	   format:
	   hyperlink keyword, keyword length, hyperlink legal character , open target 
	 */

		{"http", 4, "./:~?'=-_!&%#%\\", " TARGET=\"new\""},
		{"ftp", 3, "./:@-_&%", " TARGET=\"new\""},
		{"news", 4, "./:", "\0"},
		{"telnet", 6, ".:", "\0"},
		{"gopher", 6, ".:/", "\0"}
	};
	int font_color, font_hilight, font_blink;
	static char ANSI[] = "\033[";	/* lthuang */
	char FontStr[STRLEN];
	char pbuf[2048], buffer[2048];

	font_color = font_hilight = font_blink = 0;

#ifdef USE_FP
	if ((fp = fopen(filename, "r")) == NULL)
#else
	if ((fd = open(filename, O_RDONLY)) < 0)
#endif
		return FALSE;

#ifndef USE_FP
	{
		fsize = get_num_records(filename, sizeof(char));

		fp = (char *) mmap((caddr_t) 0,
				   (size_t) (fsize),
				   (PROT_READ),
				   MAP_SHARED, fd, (off_t) 0);

		if (fp == MAP_FAILED)
		{
			sprintf(WEBBBS_ERROR_MESSAGE, "mmap failed: %s %d",
				strerror(errno), (int) fsize);
			close(fd);
			return FALSE;
		}
		close(fd);
	}
#endif

	if (!process && !body_only)
	{
		if (request_rec->URLParaType == SkinModify)
		{
#ifdef USE_FP
			while (fgets(pbuf, sizeof(pbuf), fp))
#else
			while (mgets(pbuf, sizeof(pbuf), fp))
#endif
			{
				if ((p = strchr(pbuf, '\n')) != NULL)
					*p = '\0';
				data = pbuf;

				/* find </TEXTAREA> */
				if ((p = strstr(data, "</")) != NULL
				    && !strncasecmp(p + 2, "TEXTAREA>", 9))
				{
					*p = '\0';
					fprintf(fp_out, "%s</TEXT-AREA>", data);
					data = p + 11;	/* strlen("</TEXTAREA>") */
				}
				else
					fprintf(fp_out, "%s\n", data);
			}
		}
		else
		{
			int size;
#ifdef USE_FP
			while ((size = fread(pbuf, 1, sizeof(pbuf), fp)) != 0)
				fwrite(pbuf, 1, size, fp_out);
#else
			while ((size = fread(pbuf, 1, sizeof(pbuf), fp)) != 0)
				fwrite(pbuf, 1, size, fp_out);
#endif
		}

		fclose(fp);
		return TRUE;
	}

	if (request_rec->URLParaType != PostRead
	    && request_rec->URLParaType != TreaRead
	    && request_rec->URLParaType != MailRead)
	{	    
		inHeader = FALSE;
	}

#ifdef USE_FP
	while (fgets(pbuf, sizeof(pbuf), fp))
#else
	while (mgets(pbuf, sizeof(pbuf), fp))
#endif
	{
		if ((p = strchr(pbuf, '\n')) != NULL)
			*p = '\0';

		buffer[0] = '\0';
		data = pbuf;

		if (inHeader && *data == '\0')
		{
			inHeader = FALSE;
			fprintf(fp_out, "\r\n");
			continue;
		}

		if (body_only)	/* skip article header and footer */
		{

			if (inHeader)
				continue;

#if 1
			/* 
			   break if find "--\r\n" when PostRead (signature below --)
			   TreaRead and MailRead should continue
			 */
			if (!strcmp(data, "--") && request_rec->URLParaType == PostRead)
				break;
#endif

			if (!process)
			{
				if (!strcmp(data, "--"))
				{
					break;
				}
				else
				{
					fprintf(fp_out, "%s\n", data);
					continue;
				}
			}
		}

		if (inHeader)
		{
			souts(data, sizeof(pbuf));
		}

#ifdef QP_BASE64_DECODE
		if ((p = strstr(data, "=?")) != NULL)	/* content maybe encoded */
		{
			decode_line(buffer, data);
			xstrncpy(data, buffer, sizeof(pbuf));
			buffer[0] = '\0';
		}
#endif


#ifdef PARSE_ANSI
		/* exam article content for ANSI CODE */
		while ((p = strstr(data, ANSI)) != NULL)
		{
			int i;
			char ansi_code[32];
			int color;
			int end = FALSE, skip = FALSE;
			char *ansi_str = ansi_code;

#if 0
			fprintf(fp_out, "<DATA=%s>\n", data);
			fflush(fp_out);
#endif

			*p = '\0';
			p += 2;

			strcat(buffer, data);

			for (i = 0; i < 32; i++)
				if (*(p + i) == 'm')
					break;

			if (i >= 32)
			{
				fprintf(fp_out, "\r\n<!--ANSI CODE FORMAT ERROR-->\r\n");
				data += 2;
				continue;
			}

			xstrncpy(ansi_str, p, i + 1);

#if 0
			fprintf(fp_out, "<ANSI=%s LEN=%d>", ansi_code, strlen(ansi_code));
#endif

			data = p + i + 1;

			if (i == 0)	/* case: \033[m */
			{
				font_color = 7;
				font_hilight = 0;
			}

			/* parse ansi control code */

			while (*ansi_str)
			{
				if ((p = strchr(ansi_str, ';')) != NULL)
					*p = 0x00;
				else
					end = TRUE;

				color = atoi(ansi_str);
#if 0
				fprintf(fp_out, "<token=%d>", color);
				fflush(fp_out);
#endif

				/* 1: hi light, 5: blink, 7: reverse */
				if (color == 0)		/* reset */
				{
					font_color = 7;
					font_hilight = 0;
				}
				else if (color == 1)
				{
					font_hilight |= color;
				}
				else if (color >= 30 && color <= 37)	/* foreground color */
					font_color = color - 30;
				else
					skip = TRUE;

				if (end == FALSE)
					ansi_str = p + 1;
				else
					break;

			}

			if (skip == FALSE)
			{
				sprintf(FontStr, "<FONT COLOR=\"#%s\">", HTMLColor[font_color + (font_hilight == 1 ? 8 : 0)]);
				strcat(buffer, FontStr);
			}
		}

		strcat(buffer, data);
		xstrncpy(pbuf, buffer, sizeof(pbuf));
		data = pbuf;
		buffer[0] = '\0';

#endif /* PARSE_ANSI */



#ifdef PARSE_HYPERLINK
#if 0
		printf("\n[");
		for (i = 0; i < strlen(data) + 10; i++)
			printf("%d,", data[i]);
		printf("]\n");
#endif
		while ((p = strstr(data, "://")) != NULL)
		{
			int type;

			for (type = 0; type < HyperLinkType; type++)
				if (!strncasecmp(p - (hlink[type].len), hlink[type].type, hlink[type].len))
					break;

			/* exam article content for hyperlink */
			if (type < HyperLinkType)
			{
				p -= hlink[type].len;

				/* 
				   ignore '<a href' HTML Tag 
				   ie: <a href="http://www.nsysu.edu.tw"> www homepage</a>
				   ie: <a href=http://www.nsysu.edu.tw> www homepage</a>
				   ignore '<img src' HTML Tag 
				   ie: <img src="http://www.nsysu.edu.tw/title.jpg">
				   ie: <img src=http://www.nsysu.edu.tw/title.jpg>
				   ignore '<body background' HTML Tag 
				   ie: <body background="http://www.wow.org.tw/show/m-9.jpg"
				   ignore 'URL' HTML Tag
				 */
				if (!strncasecmp((p - 5), "href", 4)
				    || !strncasecmp((p - 6), "href", 4)
				    || !strncasecmp((p - 4), "src", 3)
				    || !strncasecmp((p - 5), "src", 3)
				 || !strncasecmp((p - 11), "background", 10)
				 || !strncasecmp((p - 12), "background", 10)
				    || !strncasecmp((p - 4), "URL=", 4))
				{
					*(p + hlink[type].len + 2) = '\0';
					fprintf(fp_out, "%s/", data);
					data = p + hlink[type].len + 3;
				}
				else
				{
					char url[256];
					int i = hlink[type].len + 3;

					while (((*(p + i) > 0x00)
						&& ((isalnum((int) *(p + i)) || (strchr(hlink[type].allow, (int) *(p + i)) != NULL)))))
					{
#if 0
						printf("{%d}", *(p + i));
#endif
						i++;
					}

					if (i > hlink[type].len + 3)
					{
						xstrncpy(url, p, i + 1);
#if 0
						printf("[*p=%c,*(p+%d)=%d]", *p, i, *(p + i));
#endif
						*p = '\0';
						fprintf(fp_out, "%s<A HREF=\"%s\"%s>%s</A>", data, url, hlink[type].target, url);
					}

					data = p + i;
#if 0
					printf("[data5=%d, %d, %d, %d, %d, %d, %d]\n", *(data - 4), *(data - 3), *(data - 2), *(data - 1), *data, *(data + 1), *(data + 2));
#endif

				}
			}
			else
			{
				*p = '\0';
				fprintf(fp_out, "%s://", data);
				data = p + 3;
			}
		}

#endif /* PARSE_HYPERLINK */

		fprintf(fp_out, "%s\n", data);
	}

	fclose(fp);
	return TRUE;
}
