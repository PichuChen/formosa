
#include "bbs.h"
#include "bbsweb.h"
#include "log.h"
#include "bbswebproto.h"

extern SKIN_FILE *skin_file;

void
setfile(char *file)
{
	sprintf(skin_file->filename, "%s%s%s", HTML_PATH, BBS_SUBDIR, file);
	CacheState(skin_file->filename, NULL);
}


/*******************************************************************
 *	拆解 URI 成為三段
 *	
 *	不作額外判斷
 *******************************************************************/
static void
GetURIToken(char *boardname, char *post, char *skin, const char *uri)
{
	char *token;
	int len;
	
#if 0
	fprintf(fp_out, "[GetURIToken uri=\"%s\" len=\"%d\"]\r\n", uri, strlen(uri));
	fflush(fp_out);
#endif	

#if 0
	sscanf(uri, "%[^/]/%s/%[^/]", boardname, post, skin);
	return;
#endif
	
	if((token = strchr(uri, '/')) != NULL) /* get this as BOARDNAME */
	{
		len = (token-uri+1) < BNAMELEN ? (token-uri+1) : BNAMELEN;
		xstrncpy(boardname, uri, len);

		uri = token + 1;
		if((token = strrchr(uri, '/')) != NULL)	/* find last token */
		{
			len = (token-uri+1) < PATHLEN-32 ? (token-uri+1) : PATHLEN-32;
			xstrncpy(post, uri, len);
			uri = token + 1;
		}
	}
	/* put uri in skin for latter use */
	xstrncpy(skin, uri, PATHLEN-32);

	/*
	format:
		skin
		boardname/skin
		boardname/post/
		boardname/post/skin
		boardname/post/post/
		boardname/post/post/skin
	*/

#if 0
	fprintf(fp_out, "[BOARDNAME=%s, post=%s, skin=%s]<br>", boardname, post, skin);
	fflush(fp_out);
#endif
}


/*******************************************************************
 *	從"名稱"判斷 para 是否為佈告&信件檔案 (不作額外判斷)
 *	
 *	ie: M.871062060.A		->yes
 *		M.871062060.A.html	->yes
 *		^^         ^  ->check point
 *******************************************************************/
static BOOL 
isPost(const char *para)
{
	if ((para[0] == 'M' || para[0] == 'D')
	    && para[1] == '.'
	    && (para[11] == '.' || para[12] == '.'))
		return TRUE;
	return FALSE;
}

/*******************************************************************
 *	從"名稱"判斷 para 是否為篇號 (範圍)
 *	
 *	ie:	*			= 全部
 *		all.html	= 全部
 *		$			= 最後的 DEFAULT_PAGE_SIZE 篇
 *		a-b			= a ~ b 篇
 *		a-			= a ~ (a+DEFAULT_PAGE_SIZE) 篇
 *		a-$			= a ~ 最後一篇
 *******************************************************************/
static BOOL 
isList(const char *para, int *start, int *end)
{
	char *p, data[STRLEN];
	int len;

	xstrncpy(data, para, sizeof(data));
	p = data;

	if (*p == '*'
	    || !strcasecmp(p, "all.html"))	/* list all post */
	{
		*start = 1;
		*end = ALL_RECORD;
	}
	else if (*p == '$')	/* list last 1 page */
	{
		*start = LAST_RECORD;
		*end = LAST_RECORD;
	}
	else
	{
		for (len = strlen(p); len > 0; len--)
			if (!isdigit((int) *(p + len - 1))
			    && ((*(p + len - 1) != '-') && (*(p + len - 1) != '$')))
				return FALSE;

		strtok(p, "-");
		*start = atoi(p);
		p += strlen(p) + 1;
		if (*p == '$')
			*end = LAST_RECORD;
		else
			*end = atoi(p);
	}

	/* 
	   we assume 100000 is a sufficient large number that 
	   online user & post & mail number should not exceed it 
	 */
	if (*start == ALL_RECORD || *start == LAST_RECORD)
		return TRUE;
	if (*start > 0 && *start < 100000)
		return TRUE;
	else
		return FALSE;
}


/*******************************************************************
 *	strip .hmtl from M.xxxxxxx.?.html
 *
 *******************************************************************/
static void 
strip_html(char *fname)
{
	char *p;

	if ((p = strrchr(fname, '.')) != NULL && !strcasecmp(p + 1, "html"))
		*p = '\0';
}


/*******************************************************************
 *	從 URI 判斷要求及抓出有用的資訊
 *	set BOARDNAME, POST_NAME, SKIN_FILE
 *
 *	return URLParaType
 *******************************************************************/
int 
ParseURI(REQUEST_REC *r, BOARDHEADER *board, POST_FILE *pf)
{
	char *p, *boardname;
	char skin[PATHLEN], post[PATHLEN];
	char *curi = r->URI;
	
	*skin = 0x00;
	*post = 0x00;
	*BBS_SUBDIR = 0x00;
	
	boardname = board->filename;


	if(curi[strlen(curi)-1] == '\\')
	{
		strncat(skin_file->filename, curi, strlen(curi)-1);
		return Redirect;
	}
	
	if((p = strstr(curi, "/treasure/")) != NULL)
	{
		/*
			subdir/treasure/bname/
			subdir/treasure/bname/start-end
			subdir/treasure/bname/treadir/treapost
		*/
		
		xstrncpy(BBS_SUBDIR, curi+1, p-curi+1);
		curi = p + 10;
		GetURIToken(boardname, post, skin, curi);
		
		if(r->HttpRequestType == POST)
		{
			xstrncpy(pf->POST_NAME, post, PATHLEN);

			if(!strcmp(skin, POST_PostSend))
				return TreaSend;
			else if(!strcmp(skin, POST_PostEdit))
				return TreaEdit;
			else if(!strcmp(skin, POST_PostForward))
				return TreaForward;
			else if(!strcmp(skin, POST_PostDelete))
				return TreaDelete;
			else
				return Board;
		}

		if(strlen(boardname)==0)	/* no BOARDNAME assigned , list all boards */
		{
			if(strlen(skin)==0)
			{
				setfile(HTML_TreaBoardList);
				return TreaBoardList;
			}
			else
			{
				/* skin is boardname */
				sprintf(skin_file->filename, "/%streasure/%s/", BBS_SUBDIR, skin);
				return Redirect;
			}
		}
		
		if(strlen(skin)==0)		/* must be treasure dir */
		{
			if(strlen(post)==0)
			{
				settreafile(pf->POST_NAME, boardname, DIR_REC);
			}
			else
			{
				settreafile(pf->POST_NAME, boardname, post);
				strcat(pf->POST_NAME, "/");
				strcat(pf->POST_NAME, DIR_REC);
			}
			
			setfile(HTML_TreaList);
			return TreaList;
		}
	
		if(strlen(post))	/* has treasure sub-dir*/
		{
			settreafile(pf->POST_NAME, boardname, post);
			strcat(pf->POST_NAME, "/");
			strcat(pf->POST_NAME, skin);
		}
		else
		{
			settreafile(pf->POST_NAME, boardname, skin);
		}

		if(isPost(skin))
		{
			strip_html(pf->POST_NAME);
			setfile(HTML_TreaPost);
			return TreaRead;
		}
		
		if(isdir(pf->POST_NAME))	/* check isdir before isPost */
		{
			sprintf(skin_file->filename, "/%s%s/", BBS_SUBDIR, pf->POST_NAME);
			return Redirect;
		}
		
		setfile(skin);
		if(CacheState(skin_file->filename, NULL) >=0
		|| isfile(skin_file->filename))
		{
			if(strlen(post)==0)
				return TreaList;
			
			settreafile(pf->POST_NAME, boardname, post);
			return TreaRead;
		}
		
		if(isList(skin, &(pf->list_start), &(pf->list_end)))
		{
			if(strlen(post)==0)
				settreafile(pf->POST_NAME, boardname, DIR_REC);
			else
				sprintf(pf->POST_NAME, "treasure/%s/%s/%s", boardname, post, DIR_REC);
			
			setfile(HTML_TreaList);
			return TreaList;
		}

		settreafile(skin_file->filename, boardname, skin);
		return Board;
	}
	else if((p = strstr(curi, "/boards/")) != NULL)
	{
		char skin_fname[PATHLEN], post_fname[PATHLEN];
		
		xstrncpy(BBS_SUBDIR, curi+1, p-curi+1);
		curi = p + 8;
		
		GetURIToken(boardname, post, skin, curi);

		if(r->HttpRequestType == POST)
		{
			int j;
			struct _HRT {
				char *filename;
				int value;
			};
			static struct _HRT HRT[] = {
				{POST_PostSend, PostSend},
				{POST_PostEdit, PostEdit},
				{POST_PostForward, PostForward},
				{POST_PostDelete, PostDelete},
				{POST_BoardModify, BoardModify},
				{POST_SkinModify, SkinModify},
				{POST_AccessListModify, AccessListModify},
				{NULL, -1}
			};
			
			xstrncpy(pf->POST_NAME, post, PATHLEN);
			
			for (j = 0; HRT[j].filename; j++)
				if (!strcmp(skin, HRT[j].filename))
					return HRT[j].value;
			
			return Board;
		}

		if(strlen(boardname)==0)
		{
			/* case:
				/boards/ 
				/boards/skin
			*/

			if(strlen(skin)==0)
			{
				setfile(HTML_BoardList);
				return BoardList;
			}
			
			/* skin is boardname */
			/* /boards/skin => /boards/skin/ */
			sprintf(skin_file->filename, "/%sboards/%s/", BBS_SUBDIR, skin);
			return Redirect;
		}
		
		sprintf(post_fname, "%s%s%s", HTML_PATH, BBS_SUBDIR, post);
		sprintf(skin_fname, "%s%s%s", HTML_PATH, BBS_SUBDIR, skin);

		if (isPost(skin))
		{
			/* /boards/boardname/skin */		
			setfile(HTML_Post);
			strip_html(skin);
/*
			if (strlen(post) != 0)
			{			
				settreafile(pf->POST_NAME, boardname, post);
    	        strcat(pf->POST_NAME, "/");
				strcat(pf->POST_NAME, skin);
			}
			else
*/			
			setboardfile(pf->POST_NAME, boardname, skin);
			return PostRead;
		}
		else if(strlen(skin)==0
			|| isList(skin, &(pf->list_start), &(pf->list_end))
			|| (strlen(post) == 0 && strcmp(skin, HTML_SkinModify)))
		{
			/* 1. /boards/boardname/ */
			/* 2. /boards/boardname/start-end */
			/* 3. /boards/boardname/[PostSend.html, BoardAccess.html, ...] */
			
#if 1
			fprintf(fp_out, "[%s][%s][%s]\r\n", boardname, post, skin);
			fflush(fp_out);
#endif						
			if (strlen(skin) == 0 
				|| isList(skin, &(pf->list_start), &(pf->list_end)))
			{
				/* 1. 2. */
				setfile(HTML_PostList);
			}
			else
			{
				/* 3. */
				setfile(skin);				
			}
/*
			if (strlen(post) != 0)
			{
				settreafile(pf->POST_NAME, boardname, "/");
				strcat(pf->POST_NAME, post);
				strcat(pf->POST_NAME, "/");
				strcat(pf->POST_NAME, DIR_REC);
			}
			else
*/	
			setboardfile(pf->POST_NAME, boardname, DIR_REC);
#if 1
			fprintf(fp_out, "skin_file[%s], POST_NAME[%s]\r\n", skin_file->filename, pf->POST_NAME);
			fflush(fp_out);
#endif			
			return PostList;
		}
		else if(!strcmp(skin, HTML_SkinModify))
		{
			/* /boards/boardname/[SkinModify.html] */
			/* /boards/boardname/post/[SkinModify.html] */
			
			setfile(skin);
			if (strlen(post) != 0 && isfile(post_fname))
				strcpy(pf->POST_NAME, post_fname);
			else if (strlen(post) != 0)
				return WEB_ERROR;
			return SkinModify;			
		}
		else if (strlen(post) != 0)
		{
			/* /boards/boardname/post/[PostReply.html, PostEdit.html, ...] */
			setfile(skin);
			setboardfile(pf->POST_NAME, boardname, post);
			return PostRead;
		}
		
		setboardfile(skin_file->filename, boardname, skin);
		return Board;
	}
	else if((p = strstr(curi, "/mail/")) != NULL)
	{
		xstrncpy(BBS_SUBDIR, curi+1, p-curi+1);
		curi = p + 6;
		
		GetURIToken(boardname, post, skin, curi);
		
		if(r->HttpRequestType == POST)
		{
			xstrncpy(pf->POST_NAME, boardname, PATHLEN);
			
			if(!strcmp(skin, POST_MailSend))
				return MailSend;
			else if(!strcmp(skin, POST_MailForward))
				return MailForward;
			else if(!strcmp(skin, POST_MailDelete))
				return MailDelete;
			else
				return OtherFile;
		}
		
		if (strlen(skin)==0 || isList(skin, &(pf->list_start), &(pf->list_end)))
		{
			/*
			 /mail/ 
			 /mail/start-end 
			 /mail/skin 
			*/
			setfile(HTML_MailList);
			setmailfile(pf->POST_NAME, username, DIR_REC);
			return MailList;
		}
		else if (isPost(skin))
		{
			/* /mail/skin */
			setfile(HTML_Mail);		
			strip_html(skin);
			setmailfile(pf->POST_NAME, username, skin);
			return MailRead;
		}
		
		setmailfile(skin_file->filename, username, skin);
		return Mail;
	}
	else if((p = strstr(curi, "/users/")) != NULL)
	{
		xstrncpy(BBS_SUBDIR, curi+1, p-curi+1);
		curi = p + 7;
		
		GetURIToken(boardname, post, skin, curi);
		
		if(r->HttpRequestType == POST)
		{
			if(!strcmp(skin, POST_UserNew))
				return UserNew;
			else if(!strcmp(skin, POST_UserIdent))
				return UserIdent;
			else if(!strcmp(skin, POST_UserData))
				return UserData;
			else if(!strcmp(skin, POST_UserPlan))
				return UserPlan;
			else if(!strcmp(skin, POST_UserSign))
				return UserSign;
			else if(!strcmp(skin, POST_UserFriend))
				return UserFriend;
			else
				return OtherFile;
		}
		
		if(strlen(skin)==0)
		{
			if(strlen(boardname)!=0)
			{
				xstrncpy(username, boardname, IDLEN);
				setfile(HTML_UserQuery);
				return UserQuery;
			}
			else
			{
				setfile(HTML_UserList);
				return UserList;
			}
		}

		if(isList(skin, &(pf->list_start), &(pf->list_end)))
		{
			setfile(HTML_UserList);
			return UserList;
		}
		
		setfile(skin);
		
		if(CacheState(skin_file->filename, NULL) >=0
		|| isfile(skin_file->filename))
		{
			return UserData;
		}
		
		xstrncpy(username, skin, IDLEN);
		setfile(HTML_UserQuery);
		return UserQuery;
	}
	else if(!strncmp(curi, "/~", 2))	/* want user planfile only */
	{
		curi+=2;
#if 0
		fprintf(fp_out, "userplan name=%s ", curi);
		fflush(fp_out);
#endif

		xstrncpy(username, curi, IDLEN);
		strtok(username, " /\t\r\n");
		sprintf(skin_file->filename, "%s%s", HTML_PATH, HTML_UserPlanShow);
		
		return UserQuery;
	}
	else
	{
#if 0
		fprintf(fp_out, "[other file=%s]", curi);
		fflush(fp_out);
#endif

#ifdef NSYSUBBS
		/* for compatiable with old URL parameter ================== */
		if((p = strstr(curi, "BoardName=")) != NULL 
		|| (p = strstr(curi, "boardname=")) != NULL)
		{
			p+=10;
			strtok(p, "?&/");
			sprintf(skin_file->filename, "/txtVersion/boards/%s/", p);
			return Redirect;
		}
		/* ========================================================= */
#endif
		xstrncpy(skin_file->filename, curi, PATHLEN);
		xstrncpy(BBS_SUBDIR, curi+1, PATHLEN);
		if((p = strrchr(BBS_SUBDIR, '/')) != NULL)
			*(p+1) = 0x00;
		else
			BBS_SUBDIR[0] = 0x00;
	
		return OtherFile;		
	}	
}
