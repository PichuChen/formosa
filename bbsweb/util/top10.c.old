#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <malloc.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <signal.h>
#include <sys/stat.h>
#include <sys/file.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <sys/time.h>
#include <ctype.h>
#include <strings.h>
#include <sys/ipc.h>
#include <sys/shm.h>

#include "config.h"
#include "struct.h"
#include "perm.h"
#include "webbbs.h"
#include "proto.h"

typedef struct 
{
	char boardname[BNAMELEN];
	char title[STRLEN];
	char filename[STRLEN];
	int count;
}
POST_TITLE;

#define NUM_TITLE_SELECT	2

static int num_brds;
char board_class;
BOARDHEADER *allboards[MAXBOARD];
char allboards_welcome[MAXBOARD+64];	/* just for safety with more 64 element */
POST_TITLE post_title[1000];
POST_TITLE total_title[MAXBOARD*NUM_TITLE_SELECT];

int total_title_num;


#if 1
int
malloc_boards(bhentp)
BOARDHEADER *bhentp;
{
	if (bhentp == NULL || bhentp->filename[0] == '\0')
		return -1;
	if (!can_see_board(bhentp, 0))
		return -1;
	if(board_class != '*' && bhentp->class != board_class)	/* '*' is all class */
		return -1;
	
	allboards[num_brds++] = bhentp;
	return 0;
}


static int cmp_bname(a, b)
BOARDHEADER **a, **b;
{
	return strcasecmp(((BOARDHEADER *)(*a))->filename, ((BOARDHEADER *)(*b))->filename);
}
#endif



int cmp_count(a, b)
POST_TITLE **a, **b;
{
	return (*b)->count - (*a)->count;
}

void reset_post_title()
{
	int i;
	
	for(i=0; i<1000; i++)
	{
		*(post_title[i].boardname) = '\0';
		*(post_title[i].title) = '\0';
		*(post_title[i].filename) = '\0';
		post_title[i].count = 0;
	}


}
void
GetPara3(Para, Name, Data, len, def)
char *Para, *Name, *Data, *def;
int len;
{
	char *start, *end;
	char buffer[255];

	if (Data && (start = strstr(Data, Name)) != NULL)
	{
		start += strlen(Name) + 2;
		if (*start != '"')
		{
			strcpy(Para, start);
			start = Para;
			for (;;)
			{
				end = strchr(start, '"');
				if ((*(end - 1)) != '\\')
					break;
				else
				{
					strcpy(buffer, end);
					strcpy(end - 1, buffer);
					start = end + 1;
				}
			}
			*end = '\0';
		}
		else
			*Para = 0;
	}
	else
		strcpy(Para, def);
}


void build_format_array(AA *format_array, char* format)
{
	int recidx = 0;
	char *ps, *pe;
	
	while(1)
	{
		/* find %TAGs% */
		if((ps = strchr(format, '%')) != NULL 
		&& (pe = strchr(ps+1, '%')) != NULL)
		{
			*ps = '\0';
			*pe = '\0';
			if(strlen(format))
			{
				format_array[recidx].type = 'S';	/* format string */
				format_array[recidx].ptr = format;
				recidx++;
			}
			
			format_array[recidx].type = 'T';		/* bbs-tag variable */
			format_array[recidx].ptr = ps+1;
			recidx++;
			
			format = pe+1;
		}
		else
		{
			if(strlen(format))
			{
				format_array[recidx].type = 'S';	/* format string piece */
				format_array[recidx].ptr = format;
				recidx++;
			}
			break;
		}
	}
}

void ShowTopList(FILE *fp, char *tag)
{
	int i, idx, top;
	char format[512];
	AA format_array[64];
	POST_TITLE *pt[MAXBOARD*NUM_TITLE_SELECT];
	
	GetPara3(format, "NUM", tag, sizeof(format), "");
	top = atoi(format);
	
	GetPara3(format, "FORMAT", tag, sizeof(format), "");
	if(strlen(format)==0)
		return;
	
	bzero(&format_array, sizeof(AA)*64);
	build_format_array(format_array, format);
	for(i=0; i<total_title_num; i++)
		pt[i] = &(total_title[i]);
	qsort(pt, total_title_num, sizeof(POST_TITLE *), cmp_count);
	
	for(idx=0; idx<top && idx<total_title_num; idx++)
	{
		for(i=0; format_array[i].type; i++)
		{
			if(format_array[i].type == 'S')
				fprintf(fp, "%s", format_array[i].ptr);
			else
			{
				if(!strcasecmp(format_array[i].ptr, "Num"))
					fprintf(fp, "%d", pt[idx]->count);
				else if(!strcasecmp(format_array[i].ptr, "PostTitle"))
					fprintf(fp, "%s", pt[idx]->title);	
				else if(!strcasecmp(format_array[i].ptr, "BBS_Subdir"))
					fprintf(fp, "<!BBS_Subdir!>");
				else if(!strcasecmp(format_array[i].ptr, "PostFileName"))
					fprintf(fp, "%s.html", pt[idx]->filename);
				else if(!strcasecmp(format_array[i].ptr, "BoardName"))
					fprintf(fp, "%s", pt[idx]->boardname);
			}
		}
		fprintf(fp, "\r\n");
	}

}

/*******************************************************************
 *	Dispatch command according to $type, $tag
 *
 *******************************************************************/
void DoTagCommand1(char *type, char *tag, FILE*fp)
{
	if(!strcasecmp(type, "PostList"))
	{
		ShowTopList(fp, tag);
	}
	else
	{
		fprintf(fp, "<!BBS_%s_%s!>", type, tag);
	}
}

/*******************************************************************
 *	find WEB-BBS Special Tags
 *	
 *	<!BBS_Type_Name OPTION=   !>
 *
 *	<!BBS_Post_FileName!>
 *	<!BBS_User_Name!>
 *	<!BBS_Message!>
 *	<!BBS_List Format="para"!>
 *
 *	return address of TAG (end + 1)
 *******************************************************************/
char *GetBBSTag(char *type, char *tag, char *data)
{
	char *start, *end, *p;
	
	if((start = strstr(data, "<!")) != NULL 
	&& !strncasecmp(start+2, "BBS", 3)
	&& (end = strstr(start+6, "!>")) != NULL)
	{
		*start = *end = '\0';

		if((p = strpbrk(start+6, " _")) != NULL)
		{
			*p = '\0';
			strcpy(tag, p+1);
		}
		strcpy(type, start+6);
		return end+2;
	}

	return NULL;
}


int CreateHTML(char *in, char *out)
{
	FILE *fpr, *fpw;
	char type[STRLEN], tag[256];
	char pbuf[HTTP_REQUEST_LINE_BUF];
	
	char *p, *data, *next;
	
	
	if ((fpr = fopen(in, "r")) == NULL)
	{
		printf("open read file %s error\n", in);
		return FALSE;
	}
	
	if ((fpw = fopen(out, "w+")) == NULL)
	{
		printf("open write file %s error\n", out);
		return FALSE;
	}
	
	while (fgets(pbuf, HTTP_REQUEST_LINE_BUF, fpr) != NULL)
	{
		if ((p = strchr(pbuf, '\n')) != NULL)
			*p = '\0';
		data = pbuf;

		while(1)	/* process WEBBBS TAG */
		{
			if((next = GetBBSTag(type, tag, data)) != NULL)
			{
				fprintf(fpw, "%s", data);
				data = next;
				DoTagCommand1(type, tag, fpw);
			}
			else
			{
				fprintf(fpw, "%s\n", data);
				break;	
			}
		}
	}
	
	fclose(fpr);
	fclose(fpw);
	
	return TRUE;
}


#if 1
/*******************************************************************
 *	decode base64 & QP encoded line 
 *
 *	attention: one line can have only one section to deocode
 *
 *	return: 0 if succeed
 *			-1 if no decode action
 *******************************************************************/
int decode_line(char *dst, const char *source)
{
	char *front, *rear, *start;
	char buf[512], src[512];

	strncpy(src, source, sizeof(src));

	if((front = strstr(src, "=?"))!=NULL)
	{
		*front = '\0';

		if((start = strstr(front+2, "?B?")) != NULL 
		&& (rear = strstr(start+3, "?=")) != NULL)
		{
			*rear = '\0';
			base64_decode_str(buf, start+3);
		}
		else if((start = strstr(front+2, "?Q?")) != NULL
		&& (rear = strstr(start+3, "?=")) != NULL)
		{	
			*rear = '\0';
			qp_decode_str(buf, start+3);
		}
		else
		{
			goto end;
		}

		sprintf(dst, "%s%s%s", src, buf, rear+2);
		return 0;
	}

end:
	strcpy(dst, source);
	return -1;
} 
#endif


int add_post_title(char *boardname, char *title, char *filename)
{
	int i;
	
	if(strstr(title, "=?")) /* title maybe encoded */
	{
		char source[STRLEN];
                   
		strcpy(source, title);
		decode_line(title, source);
	}
	
	if(!strncasecmp(title, "Re:", 3))
		title += 4;
	
	for(i=0; *(post_title[i].title); i++)
		if(strstr(post_title[i].title, title))
		{
			post_title[i].count++;
			strcpy(post_title[i].filename, filename);
			return i;
		}

	xstrncpy(post_title[i].title, title, STRLEN+1);
	xstrncpy(post_title[i].filename, filename, STRLEN+1);
	xstrncpy(post_title[i].boardname, boardname, BNAMELEN+1);
	post_title[i].count++;

	return -1;
	
}


int get_article_of_day(char *boardname)
{
	char fname[PATHLEN]; 
	int total_rec, num;
	int fd;
	struct fileheader fileinfo;
	time_t now, date;
	char today_str[10], post_date[10];
	
	now = time(0);
	
#if 0
	strftime(today_str, sizeof(today_str), "%D", localtime(&date));
#endif

	setboardfile(fname, boardname, DIR_REC);
	num = total_rec = get_num_records(fname, FH_SIZE);
	
	if ((fd = open(fname, O_RDONLY)) < 0)
		return WEB_FILE_NOT_FOUND;

	if(lseek(fd, (FH_SIZE*(total_rec-1)), SEEK_SET) == -1)
		return WEB_FILE_NOT_FOUND;

	while(num >= 0)
	{
		if(read(fd, &fileinfo, FH_SIZE)==FH_SIZE)
		{
			date = (time_t)atol((fileinfo.filename) + 2);
			
		#if 0
			strftime(post_date, sizeof(post_date), "%D", localtime(&date));
		#endif
		
			if( (time(0) - date) > 86400 )
			{
				close(fd);
				return WEB_OK;
			}
		#if 0
			printf("%s/%d/%s\n", boardname, num, fileinfo.title);
			getchar();
		#endif
		
			if(!(fileinfo.accessed & FILE_DELE))
				add_post_title(boardname, fileinfo.title, fileinfo.filename);
			
			num--;
			lseek(fd, -(FH_SIZE*2), SEEK_CUR);
		}
		else
		{
			close(fd);
			return WEB_FILE_NOT_FOUND;
		}
	}
	

	return WEB_OK;

}

void select_top()
{
	int i, j;
	POST_TITLE *pt[1000];
	
	for(i=0; *(post_title[i].title); i++)
		pt[i] = &(post_title[i]);
	
	if(i==0)
		return;
	
	qsort(pt, i, sizeof(POST_TITLE *), cmp_count);

	for(j=0; j<i && j<NUM_TITLE_SELECT; j++)
	{
		strcpy(total_title[total_title_num].boardname, pt[j]->boardname);
		strcpy(total_title[total_title_num].title, pt[j]->title);
		strcpy(total_title[total_title_num].filename, pt[j]->filename);
		total_title[total_title_num].count = pt[j]->count;
		total_title_num++;
	}

}

int main(int argc, char *argv[])
{
	int i;
	
	board_class = '*';
	num_brds = 0;
	
	init_bbsenv();

	total_title_num = 0;
	
    apply_brdshm(malloc_boards);
    qsort(allboards, num_brds, sizeof(BOARDHEADER *), cmp_bname);
    
	reset_post_title();

	for(i=0; i<num_brds; i++)
	{
		get_article_of_day(allboards[i]->filename);
		select_top();
		reset_post_title();
	}

	printf("total_title_num=%d\n", total_title_num);
	fflush(stdout);
	

	CreateHTML("HTML/txtVersion/class.html.in", "HTML/txtVersion/class.html");
	CreateHTML("HTML/txtVersion/TopDiscussion.html.in", "HTML/txtVersion/TopDiscussion.html");

	return 0;
	
}
