/*
*		Formosa WEBBBS Log Analyzer
*	-----------------------------------------------
*	Ver 0.91 12/
*		make compatible with bbsweb 1.1.1+
*
*	-----------------------------------------------
*	Ver 0.9	11/03/98
*		[NEW] make compatible with bbsweb 1.1.0+
*		[NEW] resolve domain name (use Maple Lib)
*
*	-----------------------------------------------
*	Ver 0.87
*		[NEW] file extention distribution
*	-----------------------------------------------
*	Ver 0.86
*		New daily report style
*	-----------------------------------------------
*	Ver 0.85
*		[NEW] 	Top 20 hot board
*		[FIXED]	fetch token error 
*	-----------------------------------------------
*	Ver 0.8
*		[NEW] 	Top 20 access client list
*	-----------------------------------------------
*
*/

#include <stdio.h>
#include <string.h>
#include "dns.h"

#include "../../include/config.h"
#include "../../include/struct.h"
#include "../webbbs.h"

#define MAX_HOST	1000
#define MAX_DATE	365
#define MAX_BOARD	512
#define LOG_VERSION		"0.91"
#define RESOLVE_HOSTNAME1
#define WEBBBS_BOARD_URL 	"bbs.nsysu.edu.tw/txtVersion/"
#define WEBBBS_BOARD_URLIR 	"bbs.irradiance.net/Graphic/"

typedef struct
{
	char date[20];			/* date string */
	int access;	/* daily access */
	int hostnum;
	int boardnum;
	int loginnum;
	int GET;
	int HEAD;
	int POST;
	int NEWPOST;
	int NEWUSER;
	int hour[24];
	int html;
	int pic;
	int post;
	int js;
	

} date_rec;

date_rec date_table[MAX_DATE];

typedef struct 
{
	char host[16];
	int access;
} host_rec;

host_rec host_table[MAX_HOST];

typedef struct
{
	char board[20];
	int access;

} hot_board;

hot_board hot_board_table[MAX_BOARD];




void reset_date_table()
{
	register int i, j;
	
	for(i=0;i<MAX_DATE;i++)
	{
		*(date_table[i].date) = '\0';
		date_table[i].access = 0;
		date_table[i].hostnum = 0;
		date_table[i].boardnum = 0;
		date_table[i].loginnum = 0;
		date_table[i].GET = 0;
		date_table[i].HEAD = 0;
		date_table[i].POST = 0;
		date_table[i].NEWPOST = 0;
		date_table[i].NEWUSER = 0;
		date_table[i].html = 0;
		date_table[i].post = 0;
		date_table[i].pic = 0;
		date_table[i].js = 0;
		for(j=0; j<24; j++)
			date_table[i].hour[j] = 0;
		
	}
}

void reset_daily_table()
{
	register int i;
	
	for(i=0; i<MAX_HOST; i++)
	{
		*(host_table[i].host) = '\0';
		host_table[i].access = 0;
	
	}
	
	for(i=0; i<MAX_BOARD; i++)
	{
		*(hot_board_table[i].board) = '\0';
		hot_board_table[i].access = 0;
	}
	
}


int addhost(char *fromhost)
{
	register int i;

	for(i=0; i<MAX_HOST; i++)
	{
		if(*(host_table[i].host) != '\0')
		{
			if(!strcmp(host_table[i].host, fromhost))
			{
				host_table[i].access++;
				/*
				printf("i=%d, access=%d\n", i, host_table[i].access);
				*/
				return 0;
			}
		}
		else
		{
			strcpy(host_table[i].host, fromhost);
			host_table[i].access++;
			/*
			printf("i=%d, access=%d\n", i, host_table[i].access);
			*/
			return 1;
		}
	}

}

int addboard(char *boardname)
{
	register int i;


	for(i=0; i<MAX_BOARD; i++)
	{
		if(*(hot_board_table[i].board) != '\0')
		{
			if(!strcmp(hot_board_table[i].board, boardname))
			{
				hot_board_table[i].access++;
				return 0;
			}
		}
		else
		{
			strcpy(hot_board_table[i].board, boardname);
			hot_board_table[i].access++;
			return 1;
		}
	}
}

void showhost()
{
	int i;
	
	for(i=0; i<MAX_HOST; i++)
		if(*(host_table[i].host)=='\0')
			return;
		else
			printf("%02d fromhost=%s, access=%d\n", i, host_table[i].host, host_table[i].access);

}

void showboard()
{
	int i;
	
	for(i=0; i<MAX_BOARD; i++)
		if(*(hot_board_table[i].board)=='\0')
			return;
		else
			printf("%02d boardname=%-20s, access=%-5d\n", i, hot_board_table[i].board, hot_board_table[i].access);

}

static int cmp_access(a, b)
struct host_rec ** a, **b;
{
#if 0
	printf("%s, %d", ((host_rec *)(*a))->host, ((host_rec *)(*a))->access);
#endif
	return ((host_rec *)(*b))->access - ((host_rec *)(*a))->access;
	
}

static int cmp_board(a, b)
struct hot_board ** a, **b;
{

	return ((hot_board *)(*b))->access - ((hot_board *)(*a))->access;
}

void create_daily_report(int date_index)
{
	char output[80];
	int i, j;
	FILE *fp;
	int max = 0;
	host_rec *hr[MAX_HOST], *hr1;
	hot_board *hb[MAX_BOARD], *hb1;	
	
	strcpy(output, date_table[date_index].date);

	*(output+2) = '-';
	*(output+5) = '-';
	strcat(output, ".html");
	
	printf("Create report file => %s .....", output);
	
	if((fp = fopen(output, "w")) != NULL)
	{

		fprintf(fp, "<HTML>\n<BODY BGCOLOR=#ffffff>\n<FONT COLOR=black>\n\n");
		fprintf(fp, "<table cellpadding=5 border=2 width=100%%>\n<td bgcolor=green colspan=5 align=center><font color=yellow>Weblog Daily Report [%s]</font></td><tr>\n", date_table[date_index].date);
		fprintf(fp, "<td rowspan=4>Total Access</td><td rowspan=4>%d</td><td align=center>GET</td><td align=center>POST</td><td align=center>HEAD</td><tr>\n", date_table[date_index].access);
		fprintf(fp, "<td align=center>%d (%3.2f%%)</td><td align=center>%d (%3.2f%%)</td><td align=center>%d (%3.2f%%)</td><tr>\n", 
			date_table[date_index].GET,
			((float)(date_table[date_index].GET)*100)/(date_table[date_index].access),
			date_table[date_index].POST,
			((float)(date_table[date_index].POST)*100)/(date_table[date_index].access),
			date_table[date_index].HEAD,
			((float)(date_table[date_index].HEAD)*100)/(date_table[date_index].access));
		fprintf(fp, "<td align=center>.html</td><td align=center>picture</td><td align=center>read post</td><tr>\n");
		fprintf(fp, "<td align=center>%d (%3.2f%%)</td><td align=center>%d (%3.2f%%)</td><td align=center>%d (%3.2f%%)</td><tr>\n", 
			date_table[date_index].html,
			((float)(date_table[date_index].html)*100)/(date_table[date_index].access),
			date_table[date_index].pic,
			((float)(date_table[date_index].pic)*100)/(date_table[date_index].access),
			date_table[date_index].post,
			((float)(date_table[date_index].post)*100)/(date_table[date_index].access));

			
		fprintf(fp, "<td>Total Host</td><td>%d</td><tr>\n", date_table[date_index].hostnum);
		fprintf(fp, "<td>Total Login</td><td>%d</td><tr>\n", date_table[date_index].loginnum);
		fprintf(fp, "<td>NEWPOST</td><td>%d</td><tr>\n", date_table[date_index].NEWPOST);
		fprintf(fp, "<td>NEWUSER</td><td>%d</td><tr>\n", date_table[date_index].NEWUSER);
		fprintf(fp, "</td></table><br>\n\n");		


		fprintf(fp, "<table border cellpadding=7 width=100%%>\n<td bgcolor=green colspan=9 align=center><font color=yellow>Access Distribution per Hour</font></td><tr>\n");

		for(i=0; i<24; i++)
			if(max < date_table[date_index].hour[i])
				max = date_table[date_index].hour[i];

		for(i=0; i<6; i++)
		{
			fprintf(fp, "<td bgcolor=#FF7FFF>%d</td><td>%d</td><td bgcolor=#FF7FFF>%d</td><td>%d</td><td bgcolor=#FF7FFF>%d</td><td>%d</td><td bgcolor=#FF7FFF>%d</td><td>%d</td>\n",
				i,
				date_table[date_index].hour[i],
				i+6,
				date_table[date_index].hour[i+6],
				i+12,
				date_table[date_index].hour[i+12],
				i+18,
				date_table[date_index].hour[i+18]);

			if(i==0)	
			{
				fprintf(fp, "<td rowspan=8 align=center valign=bottom>\n");
				
				for(j=0; j<24; j++)
					fprintf(fp, "<MAX=%d><VA=%d><img src=grnvert.gif width=8 height=%d> \n",
						max,
						date_table[date_index].hour[j],
						((date_table[date_index].hour[j])/20));
				
				fprintf(fp, "<BR><img src=hourbar.gif>\n</td><tr>\n");
			
			}
			else
			{
				fprintf(fp, "<tr>\n");
			}	
		}

		fprintf(fp, "</table><br>\n\n");
		
		
		/* TOP 20 Access Host */
		for(i=0; i<=date_table[date_index].hostnum; i++)
		{
			hr[i] = &(host_table[i]);
		}
#if 0
		/* bubble sort */
		for(i=0; i<date_table[date_index].hostnum-1; i++)
			for(j=i+1; j<date_table[date_index].hostnum; j++)
				if((*(hr[i])).access < (*(hr[j])).access)
				{
					hr1 = hr[j];
					hr[j] = hr[i];
					hr[i] = hr1;
				}
#endif

#if 1
		qsort(hr, date_table[date_index].hostnum, sizeof(struct host_rec*), cmp_access);
#endif
		
		fprintf(fp, "<table cellpadding=4 border=2>\n");
		fprintf(fp, "<td colspan=\"4\" bgcolor=green align=center><font color=yellow>TOP 20 Access Client</font></td><tr>\n");
		fprintf(fp, "<td>No</td>\n");
		fprintf(fp, "<td colspan=2>Host</td>\n");
		fprintf(fp, "<td>Access</td><tr>\n");
		
		for(i=0; i<20 && i<date_table[date_index].hostnum; i++)
		{
			unsigned char ip[5];
			
			char host[80], *p;

#ifdef RESOLVE_HOSTNAME
			
			strcpy(host, (*(hr[i])).host);
			p = strtok(host, ".");
			ip[0] = (unsigned char)atoi(p);
			
			p = strtok(NULL, ".");
			ip[1] = (unsigned char)atoi(p);
			
			p = strtok(NULL, ".");
			ip[2] = (unsigned char)atoi(p);
			
			p = strtok(NULL, ".");
			ip[3] = (unsigned char)atoi(p);
			
			ip[4] = '\0';
#if 0			
			printf("ip=[%d.%d.%d.%d]", ip[0], ip[1], ip[2], ip[3]);
#endif
			dns_name(ip, host);
#else
			strcpy(host, (*(hr[i])).host);
#endif	
			fprintf(fp, "<td>#%02d</td><td>%s</td><td>%s</td><td align=right>%d (%3.2f%%)</td><tr>\n",
				i+1,  host, (*(hr[i])).host, (*(hr[i])).access, 
				(float)((*(hr[i])).access*100)/date_table[date_index].access);
		}
		fprintf(fp, "</table>\n");


		
#if 1
		/* TOP 20 HOT Boards */
		for(i=0; i<=date_table[date_index].boardnum; i++)
		{
			hb[i] = &(hot_board_table[i]);
		}
#if 0
		/* bubble sort */
		for(i=0; i<date_table[date_index].boardnum-1; i++)
			for(j=i+1; j<date_table[date_index].boardnum; j++)
				if((*(hb[i])).access < (*(hb[j])).access)
				{
					hb1 = hb[j];
					hb[j] = hb[i];
					hb[i] = hb1;
				}
#endif

#if 1
		qsort(hb, date_table[date_index].boardnum, sizeof(struct hot_board*), cmp_board);
#endif

		fprintf(fp, "<table cellpadding=4 border=2>\n");
		fprintf(fp, "<td colspan=3 bgcolor=green align=center><font color=yellow>TOP 20 Hot Board</font></td><tr>\n");
		fprintf(fp, "<td>No</td>\n");
		fprintf(fp, "<td>Board</td>\n");
		fprintf(fp, "<td>Access</td><tr>\n");
		
		for(i=0; i<20 && i<date_table[date_index].boardnum; i++)
			fprintf(fp, "<td>#%02d</td><td><a href=\"http://%sboards/%s/\" target=new>%s</a></td><td>%d (%3.2f%%)</td><tr>\n",
				i+1, WEBBBS_BOARD_URL, (*(hb[i])).board, (*(hb[i])).board, (*(hb[i])).access,
				(float)((*(hb[i])).access*100)/date_table[date_index].access);
		
		fprintf(fp, "</table>\n");

		
#endif
		
		fprintf(fp, "<br><hr><table width=100%%><td><a href=\"index.html\">Back to index</a><td>\n");
		
		fprintf(fp, "<td align=right>\nGenerate by Formosa Web Analyzer ver. %s<br>\nLast Modified on <script language=\"JavaScript\"> document.write(document.lastModified)</script>\n</td></table>", LOG_VERSION);

		fprintf(fp, "</FONT>\n</BODY>\n</HTML>");
		
		
		fclose(fp);
							
	}
	else
	{
		printf("open file %s error\n", output);
		exit(0);
	}

	printf("done\n");

}

int main(int argc, char *argv[])
{
	char *p;
	int count = 0;
	int date_access = 0;
	int i = 0, date_index = 0;
	FILE *fp;
	char logfile[256], outputfile[256], outputdir[256], buffer[8192], temp[80];
	
	
	if(argc == 3)
	{
		strcpy(logfile, argv[1]);
		strcpy(outputfile, argv[2]);
	}
	else
	{
		printf("input logfile: ");
		gets(logfile);
		
		printf("putput logfile: ");
		gets(outputfile);
	}
	
	strcpy(outputdir, outputfile);
	if((p = strrchr(outputdir, '/')) != NULL)
	{
		*p = '\0';
		
		chdir(outputdir);
		
	}
	
	reset_date_table();	
	reset_daily_table();
	
	printf("Open log file => %s\r\n", logfile);
	
	if( (fp = fopen(logfile, "r")) != NULL)
	{
		char *p, *pp;
		
		while(fgets(buffer, 8192, fp))
		{
			
			if(strlen(buffer) > 512)
			{
				printf("#%d: %s\n", count, buffer);
				continue;
			}
			
			count++;
#if 0
			printf("%d, %d \n", count, date_table[date_index].boardnum);
#endif
			if((p = strtok(buffer, " \t\n"))==NULL)
			{
				printf("#%d: %s\n", count, buffer);
				continue;
			}
			
			if(*(p+2) != '/')
			{
				printf("#%d: %s\n", count, p);
				continue;
			}
			
			if(strcmp((date_table[date_index].date), p)) /* date not in date_table */
			{
				
				date_index++;
				strcpy((date_table[date_index].date), p);
	
				date_table[date_index].access = 1;
				
				if(date_index==1)
					continue;
					
				create_daily_report(date_index-1);
				reset_daily_table();
				
			}
			
			date_table[date_index].access++;
			
			if((p = strtok(NULL, " \t\n"))==NULL) /* time */
			{
				printf("Time fetch error at %d\n", count);
				continue;
			}
			
			strncpy(temp, p, 2);
			
			i = atoi(temp);
			
			date_table[date_index].hour[i]++;
			
			if((p = strtok(NULL, " \t\n"))==NULL) /* host */
			{
				printf("Host fetch error at %d\n", count);
				continue;
			}
			if (*p == 'F')
				p+=5;
			
			if(addhost(p))
				date_table[date_index].hostnum++;
			
			if((p = strtok(NULL, " \t\n"))==NULL) /* protocol */
			{
				printf("Protocol fetch error at %d\n", count);
				continue;
			}
			if(!strcmp(p, "GET"))
				date_table[date_index].GET++;
			else if(!strcmp(p, "HEAD"))
				date_table[date_index].HEAD++;
			else if(!strcmp(p, "POST"))
				date_table[date_index].POST++;
			else if(!strcmp(p, "NEWPOST"))
				date_table[date_index].NEWPOST++;
			else if(!strcmp(p, "NewUser"))			/* bbsweb 1.1.0+ */
				date_table[date_index].NEWUSER++;
			else if(!strcmp(p, POST_PostSend))		/* bbsweb 1.1.1+ */
				date_table[date_index].NEWPOST++;
			else if(!strcmp(p, POST_UserNew))		/* bbsweb 1.1.1+ */
				date_table[date_index].NEWUSER++;
				

			if((p = strtok(NULL, " \t\n"))==NULL) /* url */
			{
				printf("URL fetch error at %d\n", count);
				continue;
			}
			
#if 1
			/* parse file extention */
			if(strstr(p, HTML_Announce))
				date_table[date_index].loginnum++;
			
			if(strstr(p, ".html") || strstr(p, ".htm"))
				date_table[date_index].html++;
			else if(strstr(p, "M."))
				date_table[date_index].post++;
			else if(strstr(p, ".gif")!=NULL)
				date_table[date_index].pic++;
			else if(strstr(p, ".jpg")!=NULL)
				date_table[date_index].pic++;
#if 0
			else if(strstr(p, ".js")!=NULL)
				date_table[date_index].js++;
#endif
			/* parse boardname*/
			if((pp = strstr(p, "/boards/"))!=NULL)
			{
				char *pe;
			
				pp+=8;
				
				if((pe = strtok(pp, "/")) != NULL)
				{
					if(strlen(pe) && addboard(pe))
						date_table[date_index].boardnum++;
					
				}
#if 0
				printf("addboard=[%s]\n", pe);
				getchar();
#endif
				
			}
			else if((pp = strstr(p, "/treasure/"))!=NULL)
			{
				char *pe;
			
				pp+=10;
				
				if((pe = strtok(pp, "/")) != NULL)
				{
					if(strlen(pe) && addboard(pe))
						date_table[date_index].boardnum++;
					
				}
				
#if 0
				printf("addboard=[%s]\n", pe);
				getchar();
#endif
				
			}
		
#endif
		}
		
		create_daily_report(date_index);
		
	}
	else
	{
		printf("File open error '%s'", logfile);
		exit(0);
		
	}

	
	fclose(fp);
	
	printf("Write output file => %s\r\n", outputfile);
	
	fp = fopen(outputfile, "w");
	
	fprintf(fp, "<HTML><BODY><PRE>\n");
	fprintf(fp, "======= analysis result =======\n");
	fprintf(fp, "logfile line count = %d\n", count);
	fprintf(fp, "date_index = %d\n\n", date_index);
	
	fprintf(fp, "   Date       Access    HOSTS   Login   GET    HEAD    POST   NEWPOST   NEWUSER  \n");
	fprintf(fp, "------------------------------------------------------------------\n");
	for(i=1;  i<=date_index; i++)
	{
		strcpy(temp, date_table[i].date);
		*(temp+2) = '-';
		*(temp+5) = '-';
		fprintf(fp, "<a href=%s.html>%s</a> - %8d %7d %7d %7d %9d %7d %7d %7d \t<img src=blueblock.gif width=%d height=10> \n", 
			temp,
			date_table[i].date, 
			date_table[i].access - 1,
			date_table[i].hostnum,
			date_table[i].loginnum,
			date_table[i].GET,
			date_table[i].HEAD,
			date_table[i].POST,
			date_table[i].NEWPOST,
			date_table[i].NEWUSER,
			date_table[i].access/250);
			
	}		
	fprintf(fp, "------------------------------------------------------------------\n");
	fprintf(fp, " %3d %10d\n", date_index, count);
	
	fprintf(fp, "</PRE></BODY></HTML>\n");

	fclose(fp);
	
	return 0;
}
