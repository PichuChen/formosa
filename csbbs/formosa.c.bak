/*
 *  林國卿 gcl@cc.nsysu.edu.tw                   
 *  林嵩慶 Cauchy@cc.nsysu.eud.tw            
 */
 
#include "bbs.h"
#include "csbbs.h"


char MyBuffer[MAX_BUF_SIZE];
char *NextToken;
/*
short talkrequest2 = FALSE;
*/
static time_t start_time;
short get_message = FALSE;


extern int DoAnnounce(), DoGetMailNumber(), DoGetMailHead(), DoGetMail(), DoSendMail(),
  DoKillMail(), DoListBoard(), DoZap(), DoGetPostNumber(), DoGetPostHead(),
  DoGetPost(), DoSendPost(), DoMailPost(), DoKillPost(), DoGetPlan(), DoSendPlan(),
  DoKillPlan(), DoGetSign(), DoSendSign(), DoKillSign(), DoChangePassword(),
  DoGetUserData(), DoChangeUserName(), DoChangeEMail(), DoMailMail(), DoListOnlineUser(),
  DoQuery(), DoPage(), DoTalk(), DoGetBoardWelcome(), DoPutBoardWelcome(),
  DoKillBoardWelcome(), DoTreasurePost(), DoTalkReply(), DoMailGroup(),
  DoListOnlineFriend(), DoGetFriend(), DoSendFriend(), DoUserCheck(), DoCheckNewMail(),
#if 0  
  DoChat(), 
#endif  
  DoUnkillPost(), DoEditPostTitle(), DoEditPost(), DoUnkillMail(),
  DoSendPostToBoards(), DoMakeDirect(), DoVersionCheck(), DoSendMsg(),
  DoAllMsg(), 
#if 0  
  DoFilePut(), DoGetFileHead(), DoGetFileNumber(), DoGetFile(),
  DoKillFile(), 
#endif  
  DoMultiLogin(), DoKill(), 
#if 0  
  DoTermOut(), 
#endif  
  DoForward(), DoChkAnnounce(),
  DoChkBoardWelcome(), DoPostImp();
  

struct ProtocolJob job_table[] =
{
	{_ANNOUNCE, DoAnnounce},
	{CHKANNOUNCE, DoChkAnnounce},
	{LOGINNUM, DoMultiLogin},
	{KILLPID, DoKill},
	{MAILNUM, DoGetMailNumber},
	{MAILHEAD, DoGetMailHead},
	{MAILGET, DoGetMail},
	{MAILPUT, DoSendMail},
	{MAILKILL, DoKillMail},
	{MAILGROUP, DoMailGroup},
	{MAILNEW, DoCheckNewMail},
	{MAILUKILL, DoUnkillMail},
	{MAILMAIL, DoMailMail},
	{FORWARD, DoForward},

	{LIST, DoListBoard},
	{_ZAP, DoZap},
	{BRDWELCHK, DoChkBoardWelcome},
	{BRDWELGET, DoGetBoardWelcome},
	{BRDWELPUT, DoPutBoardWelcome},
	{BRDWELKILL, DoKillBoardWelcome},

	{POSTIMP, DoPostImp},
	{POSTNUM, DoGetPostNumber},
	{POSTHEAD, DoGetPostHead},
	{POSTGET, DoGetPost},
	{POSTPUT, DoSendPost},
	{POSTKILL, DoKillPost},
	{POSTMAIL, DoMailPost},
	{POSTTRE, DoTreasurePost},
	{POSTUKILL, DoUnkillPost},
	{POSTETITLE, DoEditPostTitle},
	{POSTEDIT, DoEditPost},
	{POSTMPUT, DoSendPostToBoards},

	{PLANGET, DoGetPlan},
	{PLANPUT, DoSendPlan},
	{PLANKILL, DoKillPlan},
	{SIGNGET, DoGetSign},
	{SIGNPUT, DoSendSign},
	{SIGNKILL, DoKillSign},
	{CHGPASSWD, DoChangePassword},
	{USERGET, DoGetUserData},
	{CHGNAME, DoChangeUserName},
	{CHGEMAIL, DoChangeEMail},

	{LISTUSER, DoListOnlineUser},
	{_PAGE, DoPage},
	{_QUERY, DoQuery},
	{TALKTO, DoTalk},
	{TALKREP, DoTalkReply},
	{TALKSTOP, NULL},
	{TALKREP, NULL},
	{ISAY, NULL},
	{IKEY, NULL},
	{LISTFUSER, DoListOnlineFriend},
	{SENDMESG, DoSendMsg},
	{ALLMESG, DoAllMsg},

	{FRIENDGET, DoGetFriend},
	{FRIENDPUT, DoSendFriend},

#if 0
	{CHAT, DoChat},
#endif	
	{CHATSAY, NULL},
	{CHATSTOP, NULL},

	{USERCHK, DoUserCheck},
	{VERCHK, DoVersionCheck},
#if 0
	{FILEPUT, DoFilePut},
	{FILEHEAD, DoGetFileHead},
	{FILENUM, DoGetFileNumber},
	{FILEGET, DoGetFile},
	{FILEKILL, DoKillFile},
#endif
	{MAKEDIR, DoMakeDirect},
#if 0
	{TERMOUT, DoTermOut}
#endif	
	};


FormosaExit()
{
	int fd = getdtablesize();

	while (fd)
		(void) close(--fd);

	if (ifPass)
		user_logout(cutmp, &curuser);
	ReleaseSocket();
	exit(0);
}


static char SeverHello[] = "Formosa Client/Server BBS version 3.25 12/16";

SayHello()
{
	inet_printf("%d\t%s %s \r\n", OK_CMD, BBSNAME, SeverHello);
}


Formosa()
{
	char keyword[MAX_KEYWORD_LEN + 1], *cert_name, *cert_passwd;
	int keyno, i;
	time_t lmj_idle;
	int runs;


	SayHello();
	time(&start_time);

	while (1)
	{
		if (time(NULL) - start_time > 1800)	/* idle time > 1800 */
			FormosaExit();
			
/* 這個有問題，改用 net_gets --- lmj
   i = my_read(0, MyBuffer, sizeof(MyBuffer), 1800);
   if (i <= 0)
 */
		if (net_gets(0, MyBuffer, sizeof(MyBuffer)))	/* lmj */
		{	
			runs = 0;	/* lasehu */
			lmj_idle = time(0);
		}
		else
		{
/*************************************
			if (talkrequest2 == TRUE)
			{
				talkreply();
				time(&start_time);
			}
			else if (get_message = TRUE)
			{
				send_message();
			}
****************************************/
			if (time(0) - lmj_idle > 1800)	/* 這樣 idle timeout 較好 *lmj */
				FormosaExit();
			if (++runs > 500)	/* lasehu: debug */
				FormosaExit();
			continue;
		}

		NextToken = GetToken(MyBuffer, keyword, MAX_KEYWORD_LEN);
		if (keyword[0] == '\0')
			continue;
		keyno = GetKeywordNo(keyword);
		SetParameter(NextToken);	/* 設定參數至linklist */
		switch (keyno)
		{
		case -1:
			RespondProtocol(UNKNOW_CMD);
			break;
		case HELLO:
			DoHello();
			break;
		case VERCHK:
			if (!ifSayHello)
				RespondProtocol(NOT_SAY_HELLO);
			else
				DoVersionCheck();
			break;
		case _BBSNAME:
			DoBBSName();
			break;
		case USERLOG:
			if (!ifSayHello)
				RespondProtocol(NOT_SAY_HELLO);
			else if (ifPass)
				RespondProtocol(WORK_ERROR);
			else
				DoUserLogin();
			ifCert = FALSE;
			break;
		case CERTILOG:
			if (!ifSayHello)
				RespondProtocol(NOT_SAY_HELLO);
			else if (ifCert)
				RespondProtocol(WORK_ERROR);
			else
			{
				if (Get_paras() < 2) /* # of parameter < 2 */
					RespondProtocol(WORK_ERROR);
				else
				{
					cert_name = Get_para_string(1);
					cert_passwd = Get_para_string(2);
					if (!DoCertiLogin(cert_name, cert_passwd))
					{
						RespondProtocol(PASSWORD_ERROR);
						FormosaExit();
					}
					else
					{
						RespondProtocol(OK_CMD);
						ifCert = TRUE;
					}
				}
			}
			break;
		case ALOWNEW:
			if (ifSayHello)
				DoAllowNew();
			else
				RespondProtocol(NOT_SAY_HELLO);
			break;
		case USERCHK:
			if (ifSayHello)
				DoUserCheck();
			else
				RespondProtocol(NOT_SAY_HELLO);
			break;
		case USERNEW:
			if (!ifSayHello)
				RespondProtocol(NOT_SAY_HELLO);
			else if (ifPass)
				RespondProtocol(WORK_ERROR);
			else
				DoNewLogin();
			break;
		case BBSINFO:
			if (!ifSayHello)
				RespondProtocol(NOT_SAY_HELLO);
			else
				DoAskBBSInformation();
			break;
		case _QUIT:
			FormosaExit();
			break;
		default:
			if (ifPass || ifCert)	/* lthuang */
			{
				for (i = 0; i < sizeof(job_table) / sizeof(struct ProtocolJob); i++)
				{
					if (job_table[i].KeyNo == keyno)
					{
						if (job_table[i].FunPtr != NULL)
							job_table[i].FunPtr();
						break;
					}
				}
				if (i >= sizeof(job_table) / sizeof(struct ProtocolJob))
					  RespondProtocol(UNKNOW_CMD);
				time(&start_time);
			}
			else
				RespondProtocol(USER_NOT_LOGIN);
		}
	}
}


void 
TalkPage(int s)
{
	talkreply();
	signal(SIGUSR1, TalkPage);
	time(&start_time);
/**
	talkrequest = TRUE;
	talkrequest2 = TRUE;
**/
}


void 
write_request(int s)
{
	send_message();
	signal(SIGUSR2, write_request);
/*
   get_message = TRUE;
 */
}


/* modified by lthuang */
send_message()
{
	int fd;
	MSGREC mrec;
	char buffer[128];

	get_message = FALSE;
	setuserfile(buffer, curuser.userid, UFNAME_WRITE);
	if ((fd = open(buffer, O_RDONLY)) > 0)
	{
		memset(&mrec, 0, sizeof(mrec));
		if (lseek(fd, -sizeof(mrec), SEEK_END) != -1)
			read(fd, &mrec, sizeof(mrec));
		close(fd);
		inet_printf("%d\t%s\t%s\t%s\t%s\r\n", 
	            MSG_REQUEST, mrec.fromid, 
                (mrec.username[0] == '\0') ? "#" : mrec.username,	            
	            mrec.mtext, mrec.stimestr);
	}	           
	return 0;
}
