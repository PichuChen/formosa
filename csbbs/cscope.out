cscope 15 /apps/src/bbs/FormosaBBS-1.4.0/csbbs               0000426179
	@board.c

2 
	~"bbs.h
"

3 
	~"csbbs.h
"

4 
	~<sys/°©.h
>

6 
	~"../lib/≠_bﬂrd.c
"

9 
BOOL
 
	ghasBMPîm
 = 
FALSE
;

10 
	gbﬂrddúe˘
[
PATHLEN
] = "";

12 
BOARDHEADER
 *
CurBLi°
;

16 
	$MakeBﬂrdLi°
()

18 !
num_brds
)

20 
Êags
 = 
curu£r
.flags[0];

22 
curu£r
.
Êags
[0] &~
YANK_FLAG
;

23 
	`Cª©eBﬂrdLi°
();

24 
curu£r
.
Êags
[0] = flags;

26  (
num_brds
 > 0) ? 0 : -1;

27 
	}
}

38 
	$CheckBﬂrdHñ≥r
(
bﬂrd
)

39 *
bﬂrd
;

41 
fûíame
[
PATHLEN
];

42 
b«me
[
BNAMELEN
] = "\0";

43 
™s
 = 
FALSE
;

45 
b«me
[0] !'\0' && !
	`°rcmp
(
bﬂrd
, bname))

46  
™s
;

48 
	`x°∫˝y
(
b«me
, 
bﬂrd
, (bname));

49 
	`£tbﬂrdfûe
(
fûíame
, 
bﬂrd
, 
BM_ASSISTANT
);

50 
	`£ek°r_ö_fûe
(
fûíame
, 
curu£r
.
u£rid
))

51  
TRUE
;

52  
FALSE
;

53 
	}
}

64 
	$Sñe˘Bﬂrd
(
b«me
, 
ty≥
)

65 *
b«me
;

66 
ty≥
;

68 
BﬂrdLi°
 *
bli°
;

69 
∑ø_num
 = 0, 
∑th_d©a
[10], 
∑ths
, 
i
 = 0, 
iÂ©h
;

70 *
check
, *
p
;

71 
Â
;

72 
fûehódî
 
fûeöfo
;

74 
b«me
 =
NULL
)

76 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

77  
FALSE
;

80 
ty≥
 != 0 &&Åype != 1)

82 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

86 
bli°
 = 
	`SórchBﬂrdLi°
(
b«me
);

87 !
bli°
)

89 
	`Re•⁄dPrŸocﬁ
(
BOARD_NOT_EXIST
);

95 
bli°
->
bhr
->
brdty≥
 & 
BRD_ACL
)

97 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

102 
iÂ©h
 = 
FALSE
;

103 
ty≥
)

105 
∑ø_num
 = 
	`Gë_∑øs
();

106 
i
 = 
∑ø_num
; i >= 1; i--)

108 
check
 = 
	`Gë_∑ø_°rög
(
i
);

109 !
	`°rˇ£cmp
(
check
, "PATH"))

111 
iÂ©h
 = 
TRUE
;

115 
i
 =
∑ø_num
 - 1)

116 
iÂ©h
 = 
FALSE
;

119 
CurBLi°
 = 
bli°
->
bhr
;

121 
	`•rötf
(
bﬂrddúe˘
, "%s/%s/%s",

122 (
ty≥
Ë? "åósuª" : "bﬂrds", 
b«me
, 
DIR_REC
);

123 
iÂ©h
)

125 
∑ths
 = 0;

126 
i
 = i + 1; i < 
∑ø_num
; i++)

128 
∑th_d©a
[
∑ths
] = 
	`Gë_∑ø_numbî
(
i
);

129 
∑th_d©a
[
∑ths
] == 0)

131 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

132  
FALSE
;

134 
∑ths
++;

137 
i
 = 0; i < 
∑ths
; i++)

139 (
Â
 = 
	`›í
(
bﬂrddúe˘
, 
O_RDWR
)) < 0)

141 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

142  
FALSE
;

144 
	`l£ek
(
Â
, 
FH_SIZE
 * (
∑th_d©a
[
i
] - 1), 
SEEK_SET
);

145 
	`ªad
(
Â
, &
fûeöfo
, 
FH_SIZE
);

146 
	`˛o£
(
Â
);

147 !(
fûeöfo
.
ac˚s£d
 & 
FILE_TREA
))

149 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

150  
FALSE
;

152 
p
 = 
	`°ºchr
(
bﬂrddúe˘
, '/');

153 
	`•rötf
(
p
, "/%s/%s", 
fûeöfo
.
fûíame
, 
DIR_REC
);

157 !
	`°rcmp
(
CurBLi°
->
ow√r
, 
curu£r
.
u£rid
) ||

158 
	`CheckBﬂrdHñ≥r
(
CurBLi°
->
fûíame
) ||

159 
curu£r
.
u£æevñ
 =
PERM_SYSOP
)

161 
hasBMPîm
 = 
TRUE
;

164  
TRUE
;

165 
	}
}

177 
	$DoLi°Bﬂrd
()

179 
BOARDHEADER
 *
bhr
;

180 
ifz≠
, 
iÂo°
;

181 
i
, 
ty≥
;

183 
ty≥
 = 
	`Gë_∑ø_numbî
(1);

184 
ty≥
 != 0 &&Åype != 1)

186 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

190 
	`MakeBﬂrdLi°
() == -1)

192 
	`Re•⁄dPrŸocﬁ
(
NO_ANY_BOARD
);

196 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

197 
	`√t_ˇche_öô
();

199 
i
 = 0; i < 
num_brds
; i++)

201 
bhr
 = 
Æl_brds
[
i
].bhr;

202 
ifz≠
 = 
	`Z≠RC_IsZ≠≥d
(
bhr
->
bid
, bhr->
˘ime
);

203 
iÂo°
 = 
	`check_ˇn_po°_bﬂrd
(
bhr
);

205 !(
ifz≠
 && 
ty≥
))

207 
	`√t_ˇche_¥ötf
("%s\t%d\t%d\t%c\t%d\t%s\t%s\r\n",

208 
bhr
->
fûíame
, 
ifz≠
, 
iÂo°
,

209 (
bhr
->
brdty≥
 & 
BRD_NEWS
Ë? 'B' : '#', bhr->
Àvñ
,

210 (
bhr
->
ow√r
[0]) ? bhr->owner : "#",

211 
bhr
->
tôÀ
);

214 
	`√t_ˇche_¥ötf
(".\r\n");

215 
	`√t_ˇche_ª‰esh
();

216 
	}
}

223 
	$DoZ≠
()

225 *
b«me
;

226 
BﬂrdLi°
 *
bli°
;

228 
b«me
 = 
	`Gë_∑ø_°rög
(1);

229 
b«me
 =
NULL
)

231 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

235 !(
bli°
 = 
	`SórchBﬂrdLi°
(
b«me
)))

237 
	`Re•⁄dPrŸocﬁ
(
BOARD_NOT_EXIST
);

241 
	`Z≠RC_IsZ≠≥d
(
bli°
->
bhr
->
bid
, bli°->bhr->
˘ime
))

242 
	`Z≠RC_DoUnZ≠
(
bli°
->
bhr
->
bid
);

244 
	`Z≠RC_DoZ≠
(
bli°
->
bhr
->
bid
);

245 
	`£thomefûe
(
gíbuf
, 
curu£r
.
u£rid
, 
UFNAME_ZAPRC
);

246 
	`Z≠RC_Upd©e
(
gíbuf
);

247 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

248 
	}
}

255 
	$DoChkBﬂrdWñcome
()

257 *
b«me
;

258 
∑th
[
PATHLEN
];

259 
°©
 
°
;

261 
b«me
 = 
	`Gë_∑ø_°rög
(1);

262 
b«me
 =
NULL
)

264 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

268 
	`£tbﬂrdfûe
(
∑th
, 
b«me
, 
BM_WELCOME
);

269 
	`°©
(
∑th
, &
°
) < 0)

270 
	`öë_¥ötf
("%d\t0\r\n", 
ANN_TIME
);

272 
	`öë_¥ötf
("%d\t%ld\r\n", 
ANN_TIME
, 
°
.
°_mtime
);

273 
	}
}

280 
	$DoGëBﬂrdWñcome
()

282 *
b«me
;

283 
∑th
[
PATHLEN
];

285 
b«me
 = 
	`Gë_∑ø_°rög
(1);

286 
b«me
 =
NULL
)

288 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

292 !
	`SórchBﬂrdLi°
(
b«me
))

294 
	`Re•⁄dPrŸocﬁ
(
BOARD_NOT_EXIST
);

298 
	`£tbﬂrdfûe
(
∑th
, 
b«me
, 
BM_WELCOME
);

299 
	`gë_num_ªc‹ds
(
∑th
, ()) == 0)

300 
	`Re•⁄dPrŸocﬁ
(
NO_BOARD_WELCOME
);

302 
	`SídAπi˛e
(
∑th
, 
TRUE
);

303 
	}
}

307 
	$BﬂrdWñcome_Inô
(*
b«me
)

309 
BﬂrdLi°
 *
bli°
;

311 (
bli°
 = 
	`SórchBﬂrdLi°
(
b«me
)Ë=
NULL
)

313 
	`Re•⁄dPrŸocﬁ
(
BOARD_NOT_EXIST
);

317 
	`°rcmp
(
curu£r
.
u£rid
, 
bli°
->
bhr
->
ow√r
) &&

318 (
curu£r
.
u£æevñ
 !
PERM_SYSOP
Ë&& !
	`CheckBﬂrdHñ≥r
(
b«me
))

320 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

323 
	}
}

330 
	$DoPutBﬂrdWñcome
()

332 *
b«me
;

333 
∑th
[
PATHLEN
], 
ãmp
[PATHLEN];

336 
b«me
 = 
	`Gë_∑ø_°rög
(1);

337 
b«me
 =
NULL
)

339 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

343 
	`BﬂrdWñcome_Inô
(
b«me
) == -1)

346 
	`£tbﬂrdfûe
(
∑th
, 
b«me
, 
BM_WELCOME
);

347 
	`•rötf
(
ãmp
, "tmp/_csbbs.%s.%ld", 
curu£r
.
u£rid
, 
	`time
(0));

348 !
	`RecvAπi˛e
(
ãmp
, 
FALSE
, 
NULL
, NULLË&& !
	`my˝
—emp, 
∑th
))

349 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

352 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

353 
	`u∆ök
(
ãmp
);

355 
	}
}

362 
	$DoKûlBﬂrdWñcome
()

364 
∑th
[
PATHLEN
];

365 *
b«me
;

367 
b«me
 = 
	`Gë_∑ø_°rög
(1);

368 
b«me
 =
NULL
)

370 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

374 
	`BﬂrdWñcome_Inô
(
b«me
) == -1)

377 
	`£tbﬂrdfûe
(
∑th
, 
b«me
, 
BM_WELCOME
);

378 
	`isfûe
(
∑th
Ë=0 && 
	`u∆ök
(path) == -1)

379 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

381 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

382 
	}
}

	@csbbs.h

2 #i‚de‡
_BBS_CSBBS_H_


3 
	#_BBS_CSBBS_H_


	)

5 
	~"bbs.h
"

6 
	~"¥Ÿocﬁ.h
"

7 
	~"lib¥Ÿo.h
"

8 
	~"c⁄f.h
"

9 
	~"≥rm.h
"

11 
	~"csbb•rŸo.h
"

17 
	#MAX_MULTI_BOARDS
 10

	)

19 
	#CSBBS_SERVER_PORT
 7716

	)

21 
	#CLIENT_READ_TIMEOUT
 600

	)

22 
	#CLIENT_WRITE_TIMEOUT
 300

	)

24 
USEREC
 
curu£r
;

25 
USER_INFO
 
uöfo
;

26 
USER_INFO
 *
cutmp
;

28 
gíbuf
[];

30 *
GëTokí
(*,*,);

31 *
Gë_∑ø_°rög
();

33 
ufûe_ovîrides
[];

35 
¨øy
 
‰õnd_ˇche
;

	@csbbsproto.h

1 
	~"°ru˘.h
"

	@file.c

4 
	~"bbs.h
"

5 
	~"csbbs.h
"

6 
	~<sys/°©.h
>

10 
bﬂrddúe˘
[];

11 
BOOL
 
ˇn_po°_bﬂrd
;

13 
	#FILES
 "FTP"

	)

14 
	#READ_BUF
 1024

	)

15 
	#WRITE_BUF
 (1024)

	)

16 
	#MAX_FILE_SIZE
 (1*1024*1024)

	)

18 
	s·phódî
 {

19 
	m‹i_fûíame
[
STRLEN
];

20 
	m·p_sôe
[
STRLEN
];

21 
	m∂a˚
[
STRLEN
];

24 
	#FTPSIZE
 (
·phódî
)

	)

28 
fw‹d
 *
	glök_°¨t
 = 
NULL
, *
	glök_œ°
 = NULL;

30 
	$SídFûe
(
fûíame
, 
ty≥
)

31 *
fûíame
;

32 
ty≥
;

34 
Â
;

35 
buf
[
WRITE_BUF
];

36 
Àn
;

37 
·phódî
 
fuŒ«me
;

38 
tŸÆ_Àn
 = 0;

40 (
Â
 = 
	`›í
(
fûíame
, 
O_RDONLY
)) == -1)

42 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

46 
	`ªad
(
Â
, &
fuŒ«me
, (
·phódî
));

49 
ty≥
 =
FILE_IN
)

51 
	`Re•⁄dPrŸocﬁ
(
FILE_IN_SITE
);

52 
	`öë_¥ötf
("%d\t%s\r\n", 
ORI_FILENAME
, 
fuŒ«me
.
‹i_fûíame
);

53 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

58 
	`Re•⁄dPrŸocﬁ
(
FILE_OUT_SITE
);

59 
	`öë_¥ötf
("%d\t%s\t%s\t%s\r\n", 
OUT_FILE
, 
fuŒ«me
.
‹i_fûíame
,

60 
fuŒ«me
.
·p_sôe
, fuŒ«me.
∂a˚
);

61 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

62 
	`ªad
(0, 
buf
, 1) > 0);

63 
	`F‹moßExô
();

69 (
Àn
 = 
	`ªad
(
Â
, 
buf
, 
WRITE_BUF
)))

71 
Àn
 <= 0)

75 
	`wrôe
(1, 
buf
, 
Àn
);

76 
tŸÆ_Àn
 +
Àn
;

84 
tŸÆ_Àn
 < 2048)

85 
	`¶ìp
(2);

87 
	`˛o£
(
Â
);

88 
	`F‹moßExô
();

90 
	}
}

94 
	$RecvFûe
(
fûíame
, 
fuŒ«me
, 
ty≥
)

95 *
fûíame
;

96 
·phódî
 *
fuŒ«me
;

97 
ty≥
;

99 
Â
;

100 
buf
[
READ_BUF
];

101 
w‹ds
;

102 
size
;

104 (
Â
 = 
	`›í
(
fûíame
, 
O_WRONLY
 | 
O_CREAT
)) == -1)

106 
	`˛o£
(
Â
);

109 
	`chmod
(
fûíame
, 0644);

110 
ty≥
)

112 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

113 
	`öë_gës
(
fuŒ«me
->
·p_sôe
, 
STRLEN
);

114 
	`öë_gës
(
fuŒ«me
->
∂a˚
, 
STRLEN
);

115 (
	`°æí
(
fuŒ«me
->
·p_sôe
) == 0) ||

116 (
	`°æí
(
fuŒ«me
->
∂a˚
) == 0))

118 
	`˛o£
(
Â
);

119 
	`u∆ök
(
fûíame
);

123 
	`wrôe
(
Â
, 
fuŒ«me
, 
FTPSIZE
);

124 
	`˛o£
(
Â
);

128 
	`wrôe
(
Â
, 
fuŒ«me
, 
FTPSIZE
);

129 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

149 
size
 = 0;

150 (
w‹ds
 = 
	`ªad
(0, 
buf
, 
READ_BUF
)) > 0)

152 
	`öë_¥ötf
("%d\r\n", 
w‹ds
);

153 
	`wrôe
(
Â
, 
buf
, 
w‹ds
) != words)

155 
	`˛o£
(
Â
);

156 
	`u∆ök
(
fûíame
);

157 
	`F‹moßExô
();

159 
size
 +
w‹ds
;

160 
size
 > 
MAX_FILE_SIZE
)

162 
	`˛o£
(
Â
);

163 
	`u∆ök
(
fûíame
);

164 
	`F‹moßExô
();

170 
	`˛o£
(
Â
);

172 
	}
}

177 
	$DoKûlFûe
()

179 
idx
;

180 
fûehódî
 
fûeöfo
;

182 !
	`Sñe˘Bﬂrd
(
FILES
, 1))

185 
idx
 = 
	`Gë_∑ø_numbî
(1);

186 
idx
 < 1)

188 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

192 
num
 = 
	`gë_num_ªc‹ds
(
bﬂrddúe˘
, 
FH_SIZE
);

193 
idx
 > 
num
)

195 
	`Re•⁄dPrŸocﬁ
(
FILE_NOT_EXIST
);

199 
	`°rcmp
(
CurBLi°
->
ow√r
, 
curu£r
.
u£rid
) &&

200 
curu£r
.
u£æevñ
 !
PERM_SYSOP
)

202 
	`Re•⁄dPrŸocﬁ
(
KILL_NOT_ALLOW
);

206 !
ˇn_po°_bﬂrd
)

208 
	`Re•⁄dPrŸocﬁ
(
KILL_NOT_ALLOW
);

212 
	`gë_ªc‹d
(
bﬂrddúe˘
, &
fûeöfo
, 
FH_SIZE
, 
idx
);

213 
	`dñëe_⁄e_¨ti˛e
(
idx
, 
NULL
, 
bﬂrddúe˘
, 
curu£r
.
u£rid
, 'D');

214 
	`£tdŸfûe
(
ãmp_«me
, 
bﬂrddúe˘
, 
fûeöfo
.
fûíame
);

215 
	`myu∆ök
(
ãmp_«me
);

216 
	`∑ck_¨ti˛e
(
bﬂrddúe˘
);

217 
	}
}

223 
	$DoGëFûe
()

225 
idx
;

226 *
p
, 
gíbuf
[
STRLEN
], 
ty≥
, *
fûíame
;

227 
fûehódî
 
fûeöfo
;

230 !
	`Sñe˘Bﬂrd
(
FILES
, 1))

233 
idx
 = 
	`Gë_∑ø_numbî
(1);

234 
idx
 < 0)

236 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

240 
fûíame
 = 
	`Gë_∑ø_°rög
(2);

241 
fûíame
 =
NULL
)

243 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

247 
	`gë_ªc‹d
(
bﬂrddúe˘
, &
fûeöfo
, 
FH_SIZE
, 
idx
) == 0)

249 !(
fûeöfo
.
ac˚s£d
 & 
FILE_TREA
) &&

250 !(
fûeöfo
.
ac˚s£d
 & 
FILE_DELE
) &&

251 (!
	`°rcmp
(
fûíame
, 
fûeöfo
.filename) ||

252 !
	`°rcmp
(
fûíame
, "NONAME")))

254 
fûeöfo
.
ac˚s£d
 |
FILE_READ
;

255 
	`sub°ôuã_ªc‹d
(
bﬂrdúe˘
, &
fûeöfo
, 
FH_SIZE
, 
idx
);

256 
	`£tdŸfûe
(
gíbuf
, 
bﬂrddúe˘
, 
fûeöfo
.
fûíame
);

257 
	`SídFûe
(
gíbuf
, 
ty≥
);

261 
	`Re•⁄dPrŸocﬁ
(
FILE_NOT_EXIST
);

262 
	}
}

270 
	$DoFûePut
()

272 *
tôÀ
;, 
‚ame
[
STRLEN
], 
∑th
[
PATHLEN
], *
buf„r
, 
°amp‚ame
[20];

273 
ty≥
;

274 
·phódî
 
fuŒ«me
;

276 
curu£r
.
u£æevñ
 < 50)

278 
	`Re•⁄dPrŸocﬁ
(
UPLOAD_NOT_ALLOW
);

282 
ty≥
 = 
	`Gë_∑ø_numbî
(1);

283 (
ty≥
 != 0) && (type != 1))

285 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

288 !
	`Sñe˘Bﬂrd
(
FILES
, 1))

291 
buf„r
 = 
	`Gë_∑ø_°rög
(2);

292 
buf„r
 =
NULL
)

294 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

298 
tôÀ
 = 
	`Gë_∑ø_°rög
(3);

299 
tôÀ
 =
NULL
)

301 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

305 
	`bzîo
(&
fuŒ«me
, (
·phódî
));

306 
	`°r˝y
(
fuŒ«me
.
‹i_fûíame
, 
buf„r
);

307 
	`•rötf
(
‚ame
, "tmp/%-s.%-d", 
curu£r
.
u£rid
, 
	`time
(0));

308 
	`RecvFûe
(
‚ame
, 
fuŒ«me
, 
ty≥
) != 0)

310 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

314 
	`£tdŸfûe
(
∑th
, 
bﬂrddúe˘
, 
NULL
);

315 
	`≠≥nd_¨ti˛e
(
‚ame
, 
∑th
, 
curu£r
.
u£rid
, 
tôÀ
, curu£r.
idít
,

316 
°amp‚ame
, 
FALSE
, (
ty≥
Ë? 
FILE_OUT
 : 
FILE_IN
, 
NULL
, -1, -1) == -1)

318 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

322 
	`öë_¥ötf
("%s\r\n", 
°amp‚ame
);

324 
	`u∆ök
(
‚ame
);

325 
ty≥
)

326 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

328 
num
 = 
	`gë_num_ªc‹ds
(
bﬂrddúe˘
, 
FH_SIZE
);

331 
	`F‹moßExô
();

332 
	}
}

339 
	$DoGëFûeNumbî
()

341 
num
;

343 !
	`Sñe˘Bﬂrd
(
FILES
, 1))

346 
num
 = 
	`gë_num_ªc‹ds
(
bﬂrddúe˘
, 
FH_SIZE
);

348 
	`öë_¥ötf
("%d\t%d\r\n", 
POST_NUM_IS
, 
num
);

349 
	`F‹moßExô
();

350 
	}
}

358 
	$DoGëFûeHód
()

360 
°¨t
, 
íd
, 
num
, 
fd
, 
c
, 
i
;

361 
fûehódî
 
fûeöfo
;

362 
po°_°©e
, 
chd©e
[6], 
buf„r
[
STRLEN
], *
p
;

363 
time_t
 
d©e
;

364 
fûesize
;

366 !
	`Sñe˘Bﬂrd
(
FILES
, 1))

369 
°¨t
 = 
	`Gë_∑ø_numbî
(1);

370 
°¨t
 < 1)

372 
	`Re•⁄dPrŸocﬁ
(
FILE_NOT_EXIST
);

376 
íd
 = 
	`Gë_∑ø_numbî
(2);

377 
íd
 == 0)

378 
íd
 = 
°¨t
;

379 
íd
 < 
°¨t
)

381 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

385 
num
 = 
	`gë_num_ªc‹ds
(
bﬂrddúe˘
, 
FH_SIZE
);

387 
°¨t
 > (
num
Ë|| 
íd
 > (num))

389 
	`Re•⁄dPrŸocﬁ
(
FILE_NOT_EXIST
);

393 (
fd
 = 
	`›í
(
bﬂrddúe˘
, 
O_RDWR
)) < 0)

395 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

399 
	`l£ek
(
fd
, 
FH_SIZE
 * (
°¨t
 - 1), 
SEEK_SET
) == -1)

401 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

402 
	`˛o£
(
fd
);

406 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

407 
	`√t_ˇche_öô
();

408 
i
 = 
°¨t
; i <
íd
; i++)

410 
	`ªad
(
fd
, &
fûeöfo
, 
FH_SIZE
) == FH_SIZE)

412 
fûesize
 = 0;

413 
fûeöfo
.
ac˚s£d
 =
FILE_DELE
)

414 
po°_°©e
 = 'D';

415 
fûeöfo
.
ac˚s£d
 =
FILE_TREA
)

416 
po°_°©e
 = 'T';

418 
fûeöfo
.
ac˚s£d
 =
FILE_OUT
)

419 
po°_°©e
 = 'O';

420 
fûeöfo
.
ac˚s£d
 =
FILE_IN
)

421 
po°_°©e
 = 'I';

424 
po°_°©e
 = 'N';

426 
po°_°©e
 == 'T')

428 
c
 = '0';

429 
	`°r˝y
(
fûeöfo
.
ow√r
, " mÇ");

430 
	`°r˝y
(
chd©e
, "00/00");

434 
	`°r˝y
(
buf„r
, 
bﬂrddúe˘
);

435 
p
 = 
	`°ºchr
(
buf„r
, '/');

436 
	`°r˝y
(
p
, 
fûeöfo
.
fûíame
);

437 
fûesize
 = 
	`gë_num_ªc‹ds
(
buf„r
, ()Ë- 
FTPSIZE
;

438 
c
 = (
curu£r
.
idít
 == 7) ?

439 
fûeöfo
.
idít
 + '0' : '*';

440 
d©e
 = 
	`©ﬁ
((
fûeöfo
.
fûíame
) + 2);

441 
	`°r·ime
(
chd©e
, 6, "%m/%d", 
	`loˇ…ime
(&
d©e
));

442 
po°_°©e
 == 'D')

443 
	`°r˝y
(
fûeöfo
.
tôÀ
, "");

446 
	`•rötf
(
gíbuf
, "%d\t%c\t%c\t%s\t%s\t%s\t%ld\r\n",

447 
i
, 
po°_°©e
, 
c
, 
fûeöfo
.
ow√r
, 
chd©e
, fûeöfo.
tôÀ


448 ,
fûesize
);

449 
	`√t_ˇche_wrôe
(
gíbuf
, 
	`°æí
(genbuf));

454 
	`˛o£
(
fd
);

455 
	`√t_ˇche_wrôe
(".\r\n", 3);

456 
	`√t_ˇche_ª‰esh
();

457 
	`ªad
(0, 
buf„r
, 1) > 0);

458 
	`F‹moßExô
();

459 
	}
}

	@formore.c

2 
	~"bbs.h
"

3 
	~"csbbs.h
"

4 
	~<time.h
>

5 
	~<sys/°©.h
>

9 
	$ªad 
(
Â
, 
buf
, 
size
)

10 
FILE
 *
Â
;

11 *
buf
;

12 
size
;

14 
	`fgës
(
buf
, 
size
, 
Â
))

15  (
	`°æí
(
buf
));

18 
	}
}

21 
	$SídAπi˛e
(
fûíame
, 
£ndok
)

22 *
fûíame
;

23 
£ndok
;

25 
FILE
 *
Â
;

26 
buf
[240];

27 
Àn
;

29 (
Â
 = 
	`f›í
(
fûíame
, "r")Ë=
NULL
)

31 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

35 
£ndok
)

36 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

38 
	`√t_ˇche_öô
();

40 (
Àn
 = 
	`ªad 
(
Â
, 
buf
, (buf)-2)))

43 
Àn
 > 0 && 
buf
[len - 1] == '\n')

45 
Àn
--;

46 
buf
[
Àn
] = '\0';

49 
	`SåDñR
(
buf
);

51 
buf
[0] == '.' && buf[1] == '\0')

53 
buf
[1] = '.';

54 
Àn
 = 2;

56 
buf
[
Àn
++] = '\r';

57 
buf
[
Àn
++] = '\n';

58 
	`√t_ˇche_wrôe
(
buf
, 
Àn
);

60 
	`f˛o£
(
Â
);

61 
	`√t_ˇche_wrôe
(".\r\n", 3);

62 
	`√t_ˇche_ª‰esh
();

63 
	}
}

109 
	$RecvAπi˛e
(
fûíame
, 
ö_maû
, 
¨g1
, 
¨g2
)

110 *
fûíame
;

111 
ö_maû
;

112 *
¨g1
, *
¨g2
;

114 
FILE
 *
Â
;

115 
buf
[240];

116 
Àn
;

117 
Êí
 = 0;

119 (
Â
 = 
	`f›í
(
fûíame
, "a")Ë=
NULL
 && (fp = fopen(filename, "w")) == NULL)

121 
	`f˛o£
(
Â
);

124 
	`chmod
(
fûíame
, 0644);

125 
¨g1
)

127 
	`wrôe_¨ti˛e_hódî
(
Â
, 
curu£r
.
u£rid
, curu£r.
u£∫ame
,

128 (
ö_maû
Ë? 
NULL
 : 
¨g1
, NULL, 
¨g2
,

130 
	`Ârötf
(
Â
, "\n");

139 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

143 
	`öë_gës
(
buf
, 240) < 0)

145 
	`f˛o£
(
Â
);

148 
	`SåDñR
(
buf
);

149 
buf
[0] == '.')

151 
buf
[1] == '\0')

153 
buf
[1] == '.' && buf[2] == '\0')

154 
buf
[1] = '\0';

156 
Àn
 = 
	`°æí
(
buf
);

157 
buf
[
Àn
++] = '\n';

158 
buf
[
Àn
] = '\0';

159 
	`Âuts
(
buf
, 
Â
);

160 
Êí
 +
Àn
;

161 
Êí
 > 100 * 1024)

163 
	`f˛o£
(
Â
);

164 
	`u∆ök
(
fûíame
);

165 
	`F‹moßExô
();

168 
	`f˛o£
(
Â
);

170 
	}
}

	@formosa.c

6 
	~"bbs.h
"

7 
	~"csbbs.h
"

8 
	~<°d¨g.h
>

9 
	~<sys/°©.h
>

10 
	~<sys/sockë.h
>

13 
	#VERSION_NEWEST
 310

	)

14 
	#VERSION_LEAST
 25

	)

16 
USEREC
 
	gcuru£r
;

17 
USER_INFO
 
	guöfo
;

18 
BOARDHEADER
 *
	gCurBLi°
;

19 
USER_INFO
 *
	gcutmp
;

21 
	gifPass
 = 
FALSE
;

22 
	gifCît
 = 
FALSE
;

24 
	gmy‰omho°
[16];

26 
	ggíbuf
[1024];

28 
	gMyBuf„r
[255];

29 *
	gNextTokí
;

31 
	gufûe_ovîrides
[
PATHLEN
];

33 
¨øy
 
	g‰õnd_ˇche
;

35 
	gifSayHñlo
 = 
FALSE
;

36 
MSQ
 
	gmymsq
;

38 
DoA¬oun˚
(), 
DoGëMaûNumbî
(), 
DoGëMaûHód
(), 
DoGëMaû
(), 
DoSídMaû
(),

39 
DoKûlMaû
(), 
DoLi°Bﬂrd
(), 
DoZ≠
(), 
DoGëPo°Numbî
(), 
DoGëPo°Hód
(),

40 
DoGëPo°
(), 
DoSídPo°
(), 
DoMaûPo°
(), 
DoKûlPo°
(), 
DoGëPœn
(), 
DoSídPœn
(),

41 
DoKûlPœn
(), 
DoGëSign
(), 
DoSídSign
(), 
DoKûlSign
(), 
DoCh™gePassw‹d
(),

42 
DoGëU£rD©a
(), 
DoCh™geU£rName
(), 
DoCh™geEMaû
(), 
DoMaûMaû
(), 
DoLi°O∆öeU£r
(),

43 
DoQuîy
(), 
DoPage
(), 
DoTÆk
(), 
DoGëBﬂrdWñcome
(), 
DoPutBﬂrdWñcome
(),

44 
DoKûlBﬂrdWñcome
(), 
DoTªasuªPo°
(), 
DoTÆkRïly
(), 
DoMaûGroup
(),

45 
DoLi°O∆öeFrõnd
(), 
DoGëFrõnd
(), 
DoSídFrõnd
(), 
DoU£rCheck
(), 
DoCheckNewMaû
(),

47 
DoCh©
(),

49 
DoUnkûlPo°
(), 
DoEdôPo°TôÀ
(), 
DoEdôPo°
(), 
DoUnkûlMaû
(),

50 
DoSídPo°ToBﬂrds
(), 
DoMakeDúe˘
(), 
DoVîsi⁄Check
(), 
DoSídMsg
(),

51 
DoAŒMsg
(),

53 
DoFûePut
(), 
DoGëFûeHód
(), 
DoGëFûeNumbî
(), 
DoGëFûe
(),

54 
DoKûlFûe
(),

56 
DoMu…iLogö
(), 
DoKûl
(),

58 
DoTîmOut
(),

60 
DoF‹w¨d
(), 
DoChkA¬oun˚
(),

61 
DoChkBﬂrdWñcome
(), 
DoPo°Imp
();

64 
	sPrŸocﬁJob
 {

65 
	mKeyNo
;

66 (* 
	mFunPå
)();

70 
PrŸocﬁJob
 
	gjob_èbÀ
[] =

72 {
_ANNOUNCE
, 
DoA¬oun˚
},

73 {
CHKANNOUNCE
, 
DoChkA¬oun˚
},

74 {
LOGINNUM
, 
DoMu…iLogö
},

75 {
KILLPID
, 
DoKûl
},

76 {
MAILNUM
, 
DoGëMaûNumbî
},

77 {
MAILHEAD
, 
DoGëMaûHód
},

78 {
MAILGET
, 
DoGëMaû
},

79 {
MAILPUT
, 
DoSídMaû
},

80 {
MAILKILL
, 
DoKûlMaû
},

81 {
MAILGROUP
, 
DoMaûGroup
},

82 {
MAILNEW
, 
DoCheckNewMaû
},

83 {
MAILUKILL
, 
DoUnkûlMaû
},

84 {
MAILMAIL
, 
DoMaûMaû
},

85 {
FORWARD
, 
DoF‹w¨d
},

87 {
LIST
, 
DoLi°Bﬂrd
},

88 {
_ZAP
, 
DoZ≠
},

89 {
BRDWELCHK
, 
DoChkBﬂrdWñcome
},

90 {
BRDWELGET
, 
DoGëBﬂrdWñcome
},

91 {
BRDWELPUT
, 
DoPutBﬂrdWñcome
},

92 {
BRDWELKILL
, 
DoKûlBﬂrdWñcome
},

94 {
POSTIMP
, 
DoPo°Imp
},

95 {
POSTNUM
, 
DoGëPo°Numbî
},

96 {
POSTHEAD
, 
DoGëPo°Hód
},

97 {
POSTGET
, 
DoGëPo°
},

98 {
POSTPUT
, 
DoSídPo°
},

99 {
POSTKILL
, 
DoKûlPo°
},

100 {
POSTMAIL
, 
DoMaûPo°
},

101 {
POSTTRE
, 
DoTªasuªPo°
},

102 {
POSTUKILL
, 
DoUnkûlPo°
},

103 {
POSTETITLE
, 
DoEdôPo°TôÀ
},

104 {
POSTEDIT
, 
DoEdôPo°
},

105 {
POSTMPUT
, 
DoSídPo°ToBﬂrds
},

107 {
PLANGET
, 
DoGëPœn
},

108 {
PLANPUT
, 
DoSídPœn
},

109 {
PLANKILL
, 
DoKûlPœn
},

110 {
SIGNGET
, 
DoGëSign
},

111 {
SIGNPUT
, 
DoSídSign
},

112 {
SIGNKILL
, 
DoKûlSign
},

113 {
CHGPASSWD
, 
DoCh™gePassw‹d
},

114 {
USERGET
, 
DoGëU£rD©a
},

115 {
CHGNAME
, 
DoCh™geU£rName
},

116 {
CHGEMAIL
, 
DoCh™geEMaû
},

118 {
LISTUSER
, 
DoLi°O∆öeU£r
},

119 {
_PAGE
, 
DoPage
},

120 {
_QUERY
, 
DoQuîy
},

121 {
TALKTO
, 
DoTÆk
},

122 {
TALKREP
, 
DoTÆkRïly
},

123 {
TALKSTOP
, 
NULL
},

124 {
TALKREP
, 
NULL
},

125 {
ISAY
, 
NULL
},

126 {
IKEY
, 
NULL
},

127 {
LISTFUSER
, 
DoLi°O∆öeFrõnd
},

128 {
SENDMESG
, 
DoSídMsg
},

129 {
ALLMESG
, 
DoAŒMsg
},

131 {
FRIENDGET
, 
DoGëFrõnd
},

132 {
FRIENDPUT
, 
DoSídFrõnd
},

135 {
CHAT
, 
DoCh©
},

137 {
CHATSAY
, 
NULL
},

138 {
CHATSTOP
, 
NULL
},

140 {
USERCHK
, 
DoU£rCheck
},

141 {
VERCHK
, 
DoVîsi⁄Check
},

143 {
FILEPUT
, 
DoFûePut
},

144 {
FILEHEAD
, 
DoGëFûeHód
},

145 {
FILENUM
, 
DoGëFûeNumbî
},

146 {
FILEGET
, 
DoGëFûe
},

147 {
FILEKILL
, 
DoKûlFûe
},

149 {
MAKEDIR
, 
DoMakeDúe˘
},

151 {
TERMOUT
, 
DoTîmOut
}

161 
	$DoHñlo
()

163 !
ifSayHñlo
)

164 
ifSayHñlo
 = 
TRUE
;

165 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

166 
	}
}

174 
	$DoVîsi⁄Check
()

176 
vî
;

178 
vî
 = 
	`Gë_∑ø_numbî
(1);

179 
vî
 <= 0)

180 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

183 
vî
 >
VERSION_NEWEST
)

184 
	`Re•⁄dPrŸocﬁ
(
VER_OK
);

185 
vî
 >
VERSION_LEAST
)

186 
	`Re•⁄dPrŸocﬁ
(
VER_GETNEW
);

188 
	`Re•⁄dPrŸocﬁ
(
VER_NOT
);

206 
	}
}

210 
	$DoBBSName
()

212 
	`öë_¥ötf
("%d %s\r\n", 
BBSNAME_IS
, 
BBSNAME
);

213 
	}
}

220 
	$DoChkA¬oun˚
()

222 
°©
 
°
;

224 
	`°©
(
WELCOME
, &
°
) < 0)

225 
	`Re•⁄dPrŸocﬁ
(
NO_ANNOUNCE
);

227 
	`öë_¥ötf
("%d\t%ld\r\n", 
ANN_TIME
, 
°
.
°_mtime
);

228 
	}
}

235 
	$DoA¬oun˚
()

237 !
	`isfûe
(
WELCOME
))

238 
	`Re•⁄dPrŸocﬁ
(
NO_ANNOUNCE
);

240 
	`SídAπi˛e
(
WELCOME
, 
TRUE
);

241 
	}
}

249 
	$DoAskBBSInf‹m©i⁄
()

251 
t_u£r
, 
c_u£r
, 
w_u£r
;

253 
	`num_uli°
(&
t_u£r
, &
c_u£r
, &
w_u£r
);

254 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

255 
	`öë_¥ötf
("BBSNAME:\t%s\r\nT-USER:\t%d\r\nC-USER:\t%d\r\nW-USER:\t%d\r\n.\r\n",

256 
BBSNAME
, 
t_u£r
, 
c_u£r
, 
w_u£r
);

257 
	}
}

261 
	$Rñó£Sockë
()

263 
	`shutdown
(0, 2);

264 
	`shutdown
(1, 2);

265 
	}
}

268 
	$F‹moßExô
()

270 
fd
 = 
	`gëdèbÀsize
();

272 
fd
)

273 (Ë
	`˛o£
(--
fd
);

275 
ifPass
)

276 
	`u£r_logout
(
cutmp
, &
curu£r
);

277 
	`Rñó£Sockë
();

278 
	`exô
(0);

279 
	}
}

283 
	$èlk_ªque°
(
s
)

285 
	`sig«l
(
SIGUSR1
, 
èlk_ªque°
);

287 
	`èlkª∂y
();

288 
	}
}

292 
	$msq_ªque°
(
s
)

294 
	`sig«l
(
SIGUSR2
, 
msq_ªque°
);

296 
	`mem£t
(&
mymsq
, 0, (mymsq));

297 
	`msq_rcv
(
cutmp
, &
mymsq
);

298 
	`öë_¥ötf
("%d\t%s\t%s\t%s\t%s\r\n",

299 
MSG_REQUEST
, 
mymsq
.
‰omid
,

300 (
mymsq
.
u£∫ame
[0] == '\0') ? "#" : mymsq.username,

301 
mymsq
.
mãxt
, mymsq.
°ime°r
);

302 
	}
}

306 
	$csbb¶og
(c⁄° *
mode
, c⁄° *
fmt
, ...)

308 
va_li°
 
¨gs
;

309 
time_t
 
now
;

310 
msgbuf
[128], 
buf
[128];

311 
time°r
[20];

313 
	`va_°¨t
(
¨gs
, 
fmt
);

314 
	`v•rötf
(
msgbuf
, 
fmt
, 
¨gs
);

315 
	`va_íd
(
¨gs
);

317 
	`time
(&
now
);

318 
	`°r·ime
(
time°r
, —ime°r), "%m/%d/%Y %X", 
	`loˇ…ime
(&
now
));

320 
	`•rötf
(
buf
, "%†%.8s: %s\n", 
time°r
, 
mode
, 
msgbuf
);

321 
	`≠≥nd_ªc‹d
("log/csbbs.log", 
buf
, 
	`°æí
(buf));

322 
	}
}

326 
	$Ab‹tBBS
(
s
)

328 
ifPass
)

331 
uöfo
.
a˘ive
 < 1 || uöfo.a˘ivê> 
MAXACTIVE
)

332 
	`csbb¶og
("ERR", "%†Ab‹tBBS u£r_logout:á˘ive[%d]", 
uöfo
.
u£rid
, uöfo.
a˘ive
);

334 
	`u£r_logout
(
cutmp
, &
curu£r
);

336 
	`Rñó£Sockë
();

337 
	`exô
(1);

338 
	}
}

342 
	$TimeOut
(
s
)

344 
ifPass
)

347 
uöfo
.
a˘ive
 < 1 || uöfo.a˘ivê> 
MAXACTIVE
)

348 
	`csbb¶og
("ERR", "%†TimeOuàu£r_logout:á˘ive[%d]", 
uöfo
.
u£rid
, uöfo.
a˘ive
);

350 
	`u£r_logout
(
cutmp
, &
curu£r
);

352 
	`Rñó£Sockë
();

353 
	`exô
(1);

354 
	}
}

357 
	$F‹moß
(
ho°
)

358 *
ho°
;

360 
keyw‹d
[
MAX_KEYWORD_LEN
 + 1];

361 
keyno
, 
i
;

362 
time_t
 
lmj_idÀ
 = 0;

364 
	`sig«l
(
SIGALRM
, 
TimeOut
);

365 
	`sig«l
(
SIGTERM
, 
Ab‹tBBS
);

366 
	`sig«l
(
SIGUSR1
, 
èlk_ªque°
);

367 
	`sig«l
(
SIGUSR2
, 
msq_ªque°
);

368 
	`sig«l
(
SIGCHLD
, 
SIG_IGN
);

370 
	`°r˝y
(
my‰omho°
, 
ho°
);

373 
	`öë_¥ötf
("%d\t%†%†\r\n", 
OK_CMD
, 
BBSNAME
,

382 !
	`√t_gës
(0, 
MyBuf„r
, (MyBuffer)))

384 ++
lmj_idÀ
 > 3)

385 
	`F‹moßExô
();

388 
lmj_idÀ
 = 0;

390 
NextTokí
 = 
	`GëTokí
(
MyBuf„r
, 
keyw‹d
, 
MAX_KEYWORD_LEN
);

391 
keyw‹d
[0] == '\0')

394 
keyno
 = 
	`GëKeyw‹dNo
(
keyw‹d
);

395 
	`SëP¨amëî
(
NextTokí
);

396 
keyno
)

399 
	`Re•⁄dPrŸocﬁ
(
UNKNOW_CMD
);

401 
HELLO
:

402 
	`DoHñlo
();

404 
VERCHK
:

405 !
ifSayHñlo
)

406 
	`Re•⁄dPrŸocﬁ
(
NOT_SAY_HELLO
);

408 
	`DoVîsi⁄Check
();

410 
_BBSNAME
:

411 
	`DoBBSName
();

413 
USERLOG
:

414 !
ifSayHñlo
)

415 
	`Re•⁄dPrŸocﬁ
(
NOT_SAY_HELLO
);

416 
ifPass
)

417 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

419 
	`DoU£rLogö
();

420 
ifCît
 = 
FALSE
;

422 
CERTILOG
:

423 !
ifSayHñlo
)

424 
	`Re•⁄dPrŸocﬁ
(
NOT_SAY_HELLO
);

425 
ifCît
)

426 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

429 
	`Gë_∑øs
() < 2)

430 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

433 *
˚π_«me
, *
˚π_∑sswd
;

435 
˚π_«me
 = 
	`Gë_∑ø_°rög
(1);

436 
˚π_∑sswd
 = 
	`Gë_∑ø_°rög
(2);

437 !
	`DoCîtiLogö
(
˚π_«me
, 
˚π_∑sswd
))

439 
	`Re•⁄dPrŸocﬁ
(
PASSWORD_ERROR
);

440 
	`F‹moßExô
();

444 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

445 
ifCît
 = 
TRUE
;

450 
ALOWNEW
:

451 
ifSayHñlo
)

452 
	`DoAŒowNew
();

454 
	`Re•⁄dPrŸocﬁ
(
NOT_SAY_HELLO
);

456 
USERCHK
:

457 
ifSayHñlo
)

458 
	`DoU£rCheck
();

460 
	`Re•⁄dPrŸocﬁ
(
NOT_SAY_HELLO
);

462 
USERNEW
:

463 !
ifSayHñlo
)

464 
	`Re•⁄dPrŸocﬁ
(
NOT_SAY_HELLO
);

465 
ifPass
)

466 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

468 
	`DoNewLogö
();

470 
BBSINFO
:

471 !
ifSayHñlo
)

472 
	`Re•⁄dPrŸocﬁ
(
NOT_SAY_HELLO
);

474 
	`DoAskBBSInf‹m©i⁄
();

476 
_QUIT
:

477 
	`F‹moßExô
();

480 
ifPass
 || 
ifCît
)

482 
i
 = 0; i < (
job_èbÀ
Ë/ (
PrŸocﬁJob
); i++)

484 
job_èbÀ
[
i
].
KeyNo
 =
keyno
)

486 
job_èbÀ
[
i
].
FunPå
 !
NULL
)

487 
job_èbÀ
[
i
].
	`FunPå
();

491 
i
 >(
job_èbÀ
Ë/ (
PrŸocﬁJob
))

492 
	`Re•⁄dPrŸocﬁ
(
UNKNOW_CMD
);

495 
	`Re•⁄dPrŸocﬁ
(
USER_NOT_LOGIN
);

498 
	}
}

	@forstr.c

2 
	~"bbs.h
"

3 
	~"csbbs.h
"

5 
	#KEYWORD_DELIMITER
 " \t\r\n"

	)

6 
	#KEYWORD_SEPARATE
 "\t\r\n"

	)

8 
	sP¨ad©a


10 *
	m∑ømëî
;

11 
P¨ad©a
 *
	m√xt
;

15 
P¨ad©a
 *
	gfú°_node
 = 
NULL
;

18 
	$°ru¥
(
°r
)

19 *
°r
;

21 
i
;

22 
c
;

24 
i
 = 0; (
c
 = 
°r
[i]) != '\0'; i++)

26 
c
 >= 'a' && c <= 'z')

27 
°r
[
i
] = 
c
 - 'a' + 'A';

30  
°r
;

31 
	}
}

34 
	$GëTokí
(
°r
, 
tokí
, 
maxÀn
)

35 *
°r
;

36 *
tokí
;

37 
maxÀn
;

39 
i
 = 0, 
j
;

40 *
tmp
;

42 
	`°rchr
(
KEYWORD_DELIMITER
, 
°r
[
i
]))

44 
°r
[
i
] == '\0')

46 
tokí
[0] = '\0';

47  &
°r
[
i
];

49 
i
++;

52 
tmp
 = &
°r
[
i
];

53 
j
 = 1;

54 !
	`°rchr
(
KEYWORD_SEPARATE
, 
tmp
[
j
]))

55 
j
++;

57 
j
 >
maxÀn
)

59 
tokí
[0] = '\0';

60  &
tmp
[
j
];

63 
	`°∫˝y
(
tokí
, 
tmp
, 
j
);

64 
tokí
[
j
] = '\0';

66  &
tmp
[
j
];

67 
	}
}

74 
	$‰ì_node
(
node
)

75 
P¨ad©a
 *
node
;

77 
P¨ad©a
 *
√xt_node
;

79 
node
 =
NULL
)

82 
√xt_node
 = 
node
->
√xt
;

83 
	`‰ì
(
node
);

84 
node
 = 
√xt_node
;

86 
node
 !
NULL
)

88 
√xt_node
 = 
node
->
√xt
;

89 
	`‰ì
(
node
->
∑ømëî
);

90 
	`‰ì
(
node
);

91 
node
 = 
√xt_node
;

93 
	}
}

100 
	$SëP¨amëî
(
d©a
)

101 *
d©a
;

103 
ãmp
[
MAX_PARAMETER
] = "", *
d©a_±r
;

104 
∑ø_Àn
;

105 
P¨ad©a
 *
œ°_node
, *
√w_node
;

107 
	`‰ì_node
(
fú°_node
);

108 
fú°_node
 = 
	`mÆloc
((
P¨ad©a
));

109 
	`bzîo
(
fú°_node
, (
P¨ad©a
));

110 
œ°_node
 = 
fú°_node
;

113 
d©a
 = 
	`GëTokí
(d©a, 
ãmp
, 
MAX_PARAMETER
);

115 
∑ø_Àn
 = 
	`°æí
(
ãmp
);

116 
d©a_±r
 = 
	`mÆloc
(
∑ø_Àn
 * () + 1);

117 
	`bzîo
(
d©a_±r
, 
∑ø_Àn
 * () + 1);

118 
	`°r˝y
(
d©a_±r
, 
ãmp
);

120 
√w_node
 = 
	`mÆloc
((
P¨ad©a
));

121 
œ°_node
->
√xt
 = 
√w_node
;

122 
√w_node
->
∑ømëî
 = 
d©a_±r
;

123 
√w_node
->
√xt
 = 
NULL
;

124 
œ°_node
 = 
√w_node
;

126 *
d©a
 != '\0');

127 
	}
}

136 
	$Gë_∑ø_°rög
(
num
)

137 
num
;

139 
P¨ad©a
 *
node
;

140 
i
;

142 
num
 < 1)

143  
NULL
;

145 
node
 = 
fú°_node
;

146 
i
 = 0; i < 
num
; i++)

148 
node
->
√xt
 =
NULL
)

149  
NULL
;

150 
node
 =Çode->
√xt
;

152  
node
->
∑ømëî
;

153 
	}
}

162 
	$Gë_∑ø_numbî
(
num
)

163 
num
;

165 
P¨ad©a
 *
node
;

166 
i
;

168 
num
 < 1)

171 
node
 = 
fú°_node
;

172 
i
 = 0; i < 
num
; i++)

174 
node
->
√xt
 =
NULL
)

176 
node
 =Çode->
√xt
;

179  
	`©oi
(
node
->
∑ømëî
);

180 
	}
}

187 
	$Gë_∑øs
()

189 
num
 = 0;

190 
P¨ad©a
 *
node
;

192 
node
 = 
fú°_node
;

193 
node
->
√xt
 !
NULL
)

195 
num
++;

196 
node
 =Çode->
√xt
;

198  
num
;

199 
	}
}

201 
	$SåDñR
(
°r
)

202 *
°r
;

204 
i
;

206 
°r
[0] != '\0')

208 
i
 = 
	`°æí
(
°r
) - 1;

209 
i
 >0 && 
	`°rchr
(" \t\r\n", 
°r
[i]))

210 
i
--;

211 
°r
[
i
 + 1] = '\0';

213 
	}
}

215 
	$GëSåög
(
§c
, 
dë
, 
maxÀn
)

216 *
§c
;

217 *
dë
;

218 
maxÀn
;

220 
i
, 
j
, 
Àn
;

222 
maxÀn
--;

223 
dë
[0] = '\0';

224 
Àn
 = 
	`°æí
(
§c
);

225 
Àn
 == 0)

227 
i
 = 0;

228 
i
 < 
Àn
 && 
§c
[i] != '\"')

229 
i
++;

230 
i
 =
Àn
)

232 
j
 = 
Àn
 - 1;

233 
j
 > 0 && 
§c
[j] != '\"')

234 
j
--;

235 
Àn
 = 
j
 - 
i
 - 1;

236 
Àn
 > 0)

238 
Àn
 > 
maxÀn
)

239 
Àn
 = 
maxÀn
;

240 
	`°∫˝y
(
dë
, &
§c
[
i
 + 1], 
Àn
);

241 
dë
[
Àn
] = '\0';

243 
	}
}

247 
	$chk_°r2
(
cs
)

248 *
cs
;

250 
cs
)

252 
i
, 
j
;

253 *
˘
 = 
cs
;

255 
i
 = 0, 
j
 = 0; 
cs
[i] != '\0'; i++)

257 
cs
[
i
] == 0x1b)

259 
˘
[
j
++] = 
cs
[
i
];

261 
˘
[
j
] = '\0';

263 
	}
}

	@login.c

2 
	~"bbs.h
"

3 
	~"csbbs.h
"

6 
my‰omho°
[];

7 *
gí∑sswd
();

8 
	gkûl_pid
;

9 
	gmu…i
 = 0;

10 
	gmaûdúe˘
[
PATHLEN
] = "";

11 
ifPass
;

15 
	$kûl_logö
(
u≥¡
)

16 
USER_INFO
 *
u≥¡
;

18 
u≥¡
->
pid
 =
kûl_pid
)

20 
uöfo
.
u£rid
[0] !'\0' && !
	`°rcmp
(
u≥¡
->userid, uinfo.userid))

22 
u≥¡
->
pid
 > 2)

23 
	`kûl
(
u≥¡
->
pid
, 
SIGKILL
);

24 
u≥¡
->
˘y≥
 = 
CTYPE_CSBBS
;

25 
	`purge_uli°
(
u≥¡
);

26 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

27 
kûl_pid
 = -1;

32 
	}
}

38 
	$DoKûl
()

40 
kûl_pid
 = 
	`Gë_∑ø_numbî
(1);

42 !
	`°rcmp
(
curu£r
.
u£rid
, 
GUEST
))

44 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

48 
	`≠∂y_uli°
(
kûl_logö
) == -1)

50 
	`Re•⁄dPrŸocﬁ
(
PID_NOT_EXIST
);

54 
kûl_pid
 != -1)

55 
	`Re•⁄dPrŸocﬁ
(
PID_NOT_EXIST
);

56 
	}
}

66 
	$cou¡_mu…i_logö
(
u≥¡
)

67 
USER_INFO
 *
u≥¡
;

70 
u≥¡
->
pid
 <2 || 
uöfo
.pid <= 2)

73 !
	`°rcmp
(
u≥¡
->
u£rid
, 
uöfo
.userid)

74 && 
u≥¡
->
pid
 !
uöfo
.pid)

76 
	`öë_¥ötf
("%d\t%s\r\n", 
u≥¡
->
pid
, u≥¡->
‰om
);

77 ++
mu…i
 > 
MULTILOGINS
 && 
curu£r
.
u£æevñ
 !
PERM_SYSOP
)

79 
u≥¡
->
pid
 > 2)

80 
	`kûl
(
u≥¡
->
pid
, 
SIGKILL
);

81 
	`purge_uli°
(
u≥¡
);

82 
mu…i
--;

86 
	}
}

93 
	$DoMu…iLogö
()

95 
mu…i
 = 0;

96 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

97 
	`≠∂y_uli°
(
cou¡_mu…i_logö
) == -1)

99 
	`öë_¥ötf
(".\r\n");

102 
	`öë_¥ötf
(".\r\n");

103 
	}
}

107 
	$CÆlU£rLogö
(
«me
, 
∑sswd
, 
˛õ¡_ty≥
)

108 *
«me
, *
∑sswd
, 
˛õ¡_ty≥
;

110 
	`u£r_logö
(&
cutmp
, &
curu£r
, 
˛õ¡_ty≥
, 
«me
, 
∑sswd
,

111 
my‰omho°
Ë=
ULOGIN_OK
)

113 
	`mem˝y
(&
uöfo
, 
cutmp
, (
USER_INFO
));

114 
ifPass
 = 
TRUE
;

117 
	`•rötf
(
gíbuf
, "wrôe/%s", 
curu£r
.
u£rid
);

118 
	`u∆ök
(
gíbuf
);

120 
	`£tmaûfûe
(
maûdúe˘
, 
curu£r
.
u£rid
, 
DIR_REC
);

122 #ifde‡
NSYSUBBS


124 (
curu£r
.
u£æevñ
 >
PERM_SYSOP
) &&

125 (!
	`£ek°r_ö_fûe
("c⁄f/sys›li°", 
curu£r
.
u£rid
)))

127 
curu£r
.
u£æevñ
 = 50;

133 
˛õ¡_ty≥
 =
CTYPE_CSBBS
)

134 
uöfo
.
mode
 = 
CLIENT
;

135 
˛õ¡_ty≥
 =
CTYPE_WEBBBS
)

136 
uöfo
.
mode
 = 
WEBBBS
;

137 
	`upd©e_uli°
(
cutmp
, &
uöfo
);

139 
‰õnd_ˇche
.
size
 = 0;

140 
‰õnd_ˇche
.
ids
 = 
NULL
;

141 
	`£thomefûe
(
ufûe_ovîrides
, 
curu£r
.
u£rid
, 
UFNAME_OVERRIDES
);

143 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

147 
	}
}

155 
	$DoU£rLogö
()

157 *
«me
, *
∑sswd
, *
˛õ¡
, 
˛õ¡_ty≥
;

158 
∑ss_îr
 = 0;

160 
ifPass
)

163 
«me
 = 
	`Gë_∑ø_°rög
(1);

164 
«me
[0] !'\0' && 
	`°rcmp
(name, "new"))

166 
∑sswd
 = 
	`Gë_∑ø_°rög
(2);

167 
˛õ¡
 = 
	`Gë_∑ø_°rög
(3);

169 !
	`°rcmp
(
˛õ¡
, "WEBBBS"))

170 
˛õ¡_ty≥
 = 
CTYPE_WEBBBS
;

172 
˛õ¡_ty≥
 = 
CTYPE_CSBBS
;

174 
∑sswd
 !
NULL
 && *passwd != '\0')

176 
	`CÆlU£rLogö
(
«me
, 
∑sswd
, 
˛õ¡_ty≥
) == 0)

181 
∑ss_îr
++;

182 
∑ss_îr
 >= 3)

184 
	`Re•⁄dPrŸocﬁ
(
PASSWORD_3_ERROR
);

185 
	`F‹moßExô
();

188 
	`Re•⁄dPrŸocﬁ
(
PASSWORD_ERROR
);

189 
	}
}

197 
	$DoCîtiLogö
(
«me
, 
∑sswd
)

198 *
«me
, *
∑sswd
;

200 
	`bzîo
(&
curu£r
, (curuser));

201 
	`bzîo
(&
uöfo
, (uinfo));

203 
	`gë_∑sswd
(&
curu£r
, 
«me
) <= 0

204 || !
	`check∑sswd
(
curu£r
.
∑sswd
,Öasswd))

207 *
curu£r
.
∑sswd
 == '\0')

210 
	`°r˝y
(
curu£r
.
u£rid
, 
«me
);

211 
	`°r˝y
(
uöfo
.
u£rid
, 
«me
);

212 
	`°r˝y
(
uöfo
.
‰om
, 
my‰omho°
);

213 
	`°r˝y
(
uöfo
.
u£∫ame
, 
curu£r
.username);

214 
uöfo
.
pid
 = 
	`gëpid
();

215 
uöfo
.
uid
 = 
curu£r
.uid;

216 
uöfo
.
˘y≥
 = 
CTYPE_CSBBS
;

218 (
curu£r
.
Êags
[0] & 
CLOAK_FLAG
Ë&& curu£r.
u£æevñ
 >
PERM_CLOAK
)

219 
uöfo
.
övisibÀ
 = 
TRUE
;

221 
uöfo
.
övisibÀ
 = 
FALSE
;

222 
uöfo
.
∑gî
 = 
curu£r
.pager;

224 
uöfo
.
socka˘ive
 = 
FALSE
;

225 
uöfo
.
sockaddr
 = 0;

227 
uöfo
.
mode
 = 
LOGIN
;

229 
	`£tmaûfûe
(
maûdúe˘
, 
curu£r
.
u£rid
, 
DIR_REC
);

232 #ifde‡
NSYSUBBS


234 (
curu£r
.
u£æevñ
 >
PERM_SYSOP
) &&

235 (!
	`£ek°r_ö_fûe
("c⁄f/sys›li°", 
curu£r
.
u£rid
)))

236 
curu£r
.
u£æevñ
 = 50;

242 
	}
}

249 
	$DoAŒowNew
()

252 
	`Re•⁄dPrŸocﬁ
(
NOT_ALLOW_NEW
);

255 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

257 
	}
}

264 
	$DoU£rCheck
()

266 *
u£rid
;

268 
u£rid
 = 
	`Gë_∑ø_°rög
(1);

269 
u£rid
[0] == '\0')

271 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

275 
	`gë_∑sswd
(
NULL
, 
u£rid
))

276 
	`Re•⁄dPrŸocﬁ
(
USERID_EXIST
);

278 
	`Re•⁄dPrŸocﬁ
(
USERID_NOT_EXIST
);

279 
	}
}

289 
	$DoNewLogö
()

291 
USEREC
 *
nu
 = &
curu£r
;

292 
«me
[
IDLEN
], *
u£rid
, *
∑sswd
;

293 *
tmp
;

295 
	`mem£t
(
nu
, 0, (*nu));

297 
u£rid
 = 
	`Gë_∑ø_°rög
(1);

298 !
u£rid
 || userid[0] == '\0')

300 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

304 
	`x°∫˝y
(
nu
->
u£rid
, u£rid, 
IDLEN
);

305 
	`övÆid_√w_u£rid
(
nu
->
u£rid
Ë|| 
	`gë_∑sswd
(
NULL
,Çu->userid))

307 
	`Re•⁄dPrŸocﬁ
(
USERID_EXIST
);

311 
∑sswd
 = 
	`Gë_∑ø_°rög
(2);

312 !
∑sswd
 ||Öasswd[0] == '\0')

314 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

317 
∑sswd
[8] = '\0';

318 
	`°∫˝y
(
nu
->
∑sswd
, 
	`gí∑sswd
’asswd), 
PASSLEN
);

320 
tmp
 = 
	`Gë_∑ø_°rög
(3);

321 
tmp
[0] == '0')

323 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

326 
tmp
[0] == '#')

327 
tmp
[0] = '\0';

328 
	`°r˝y
(
nu
->
emaû
, 
tmp
);

330 (
tmp
 = 
	`Gë_∑ø_°rög
(4)Ë!
NULL
)

332 
	`°r˝y
(
nu
->
u£∫ame
, 
tmp
);

333 
	`chk_°r2
(
nu
->
u£∫ame
);

336 
nu
->
u£∫ame
[0] = '\0';

338 
nu
->
fú°logö
 = 
	`time
(0);

339 
nu
->
œ°logö
 =Çu->
fú°logö
;

340 
uöfo
.
logö_time
 = 
nu
->
fú°logö
;

341 
	`°r˝y
(
nu
->
œ°ho°
, 
my‰omho°
);

342 
nu
->
u£æevñ
 = 0;

343 
nu
->
numlogös
 = 1;

345 (
nu
->
uid
 = 
	`√w_u£r
“u, 
FALSE
)) > 0)

347 
	`CÆlU£rLogö
(
«me
, 
∑sswd
, 
CTYPE_CSBBS
) == 0)

350 
	`Re•⁄dPrŸocﬁ
(
NEWUSER_FAIL
);

351 
	`F‹moßExô
();

352 
	}
}

	@mail.c

2 
	~"bbs.h
"

3 
	~"csbbs.h
"

5 
maûdúe˘
[];

6 
ifPass
;

12 
	$DoF‹w¨d
()

14 !
	`°rcmp
(
curu£r
.
u£rid
, 
GUEST
))

16 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

20 
curu£r
.
Êags
[0] & 
FORWARD_FLAG
)

21 
curu£r
.
Êags
[0] &~
FORWARD_FLAG
;

24 !
	`is_emaûaddr
(
curu£r
.
emaû
))

26 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

29 
curu£r
.
Êags
[0] |
FORWARD_FLAG
;

32 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

33 
	}
}

39 
	$DoGëMaûNumbî
()

41 
num
;

43 
num
 = 
	`gë_num_ªc‹ds
(
maûdúe˘
, 
FH_SIZE
);

45 
	`öë_¥ötf
("%d\t%d\r\n", 
MAIL_NUM_IS
, 
num
);

46 
	}
}

54 
	$DoGëMaûHód
()

56 
°¨t
, 
íd
, 
num
, 
fd
, 
i
;

57 
fûehódî
 
fh
;

58 
maû_°©e
, 
chd©e
[6], 
c
;

59 
time_t
 
d©e
;

61 
°¨t
 = 
	`Gë_∑ø_numbî
(1);

62 
°¨t
 < 1)

64 
	`Re•⁄dPrŸocﬁ
(
MAIL_NOT_EXIST
);

68 
íd
 = 
	`Gë_∑ø_numbî
(2);

69 
íd
 < 1)

70 
íd
 = 
°¨t
;

71 
íd
 < 
°¨t
)

73 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

77 
num
 = 
	`gë_num_ªc‹ds
(
maûdúe˘
, 
FH_SIZE
);

79 
°¨t
 > 
num
 || 
íd
 >Çum)

81 
	`Re•⁄dPrŸocﬁ
(
MAIL_NOT_EXIST
);

85 (
fd
 = 
	`›í
(
maûdúe˘
, 
O_RDWR
)) < 0)

87 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

91 
	`l£ek
(
fd
, 
FH_SIZE
 * (
°¨t
 - 1), 
SEEK_SET
) == -1)

93 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

94 
	`˛o£
(
fd
);

98 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

99 
	`√t_ˇche_öô
();

100 
i
 = 
°¨t
; i <
íd
; i++)

102 
	`ªad
(
fd
, &
fh
, 
FH_SIZE
) == FH_SIZE)

104 
fh
.
ac˚s£d
 & 
FILE_DELE
)

105 
maû_°©e
 = 'D';

106 
fh
.
ac˚s£d
 & 
FILE_READ
)

107 
maû_°©e
 = 'R';

109 
maû_°©e
 = 'N';

111 
d©e
 = 
	`©ﬁ
((
fh
.
fûíame
) + 2);

112 
	`°r·ime
(
chd©e
, 6, "%m/%d", 
	`loˇ…ime
(&
d©e
));

113 
	`chk_°r2
(
fh
.
ow√r
);

114 
	`chk_°r2
(
fh
.
tôÀ
);

116 
curu£r
.
idít
 == 7)

117 
c
 = 
fh
.
idít
 + '0';

119 
c
 = '*';

120 
maû_°©e
 != 'D')

121 
	`√t_ˇche_¥ötf
("%d\t%c\t%c\t%s\t%s\t%s\r\n",

122 
i
, 
maû_°©e
, 
c
, 
fh
.
ow√r
, 
chd©e
, fh.
tôÀ
);

124 
	`√t_ˇche_¥ötf
("%d\t%c\t%c\t%s\t%s\r\n",

125 
i
, 
maû_°©e
, 
c
, 
fh
.
ow√r
, 
chd©e
);

130 
	`˛o£
(
fd
);

131 
	`√t_ˇche_wrôe
(".\r\n", 3);

132 
	`√t_ˇche_ª‰esh
();

133 
	}
}

137 
	$£t_maû
(
idx
, 
fhr
)

138 *
idx
;

139 
FILEHEADER
 *
fhr
;

141 
fd
;

142 
maxkìpmaû
;

145 !
	`°rcmp
(
curu£r
.
u£rid
, 
GUEST
))

147 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

151 *
idx
 = 
	`Gë_∑ø_numbî
(1);

152 *
idx
 < 1)

154 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

158 
PERM_BM
 =
curu£r
.
u£æevñ
)

159 
maxkìpmaû
 = 
SPEC_MAX_KEEP_MAIL
;

161 
maxkìpmaû
 = 
MAX_KEEP_MAIL
;

162 
curu£r
.
u£æevñ
 !
PERM_SYSOP
 && *
idx
 > 
maxkìpmaû
)

164 
	`Re•⁄dPrŸocﬁ
(
MAIL_NOT_EXIST
);

168 *
idx
 > 
	`gë_num_ªc‹ds
(
maûdúe˘
, 
FH_SIZE
))

170 
	`Re•⁄dPrŸocﬁ
(
MAIL_NOT_EXIST
);

174 (
fd
 = 
	`›í
(
maûdúe˘
, 
O_RDWR
)) > 0)

176 
	`l£ek
(
fd
, 
FH_SIZE
 * (*
idx
 - 1), 
SEEK_SET
) != -1

177 && 
	`ªad
(
fd
, 
fhr
, 
FH_SIZE
) == FH_SIZE)

179 
	`˛o£
(
fd
);

182 
	`˛o£
(
fd
);

184 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

186 
	}
}

193 
	$DoGëMaû
()

195 
idx
;

196 
fûehódî
 
fh
;

198 
	`£t_maû
(&
idx
, &
fh
) < 0)

200 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

204 
fh
.
ac˚s£d
 & 
FILE_DELE
)

206 
	`Re•⁄dPrŸocﬁ
(
MAIL_NOT_EXIST
);

210 
fh
.
ac˚s£d
 |
FILE_READ
;

212 
	`sub°ôuã_ªc‹d
(
maûdúe˘
, &
fh
, 
FH_SIZE
, 
idx
) < 0)

214 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

218 
	`£tdŸfûe
(
gíbuf
, 
maûdúe˘
, 
fh
.
fûíame
);

219 
	`SídAπi˛e
(
gíbuf
, 
TRUE
);

220 
	}
}

228 
	$DoSídMaû
()

230 *
to
, *
tôÀ
, 
‚ame
[
STRLEN
];

231 
sign
, 
ch
;

233 !
	`°rcmp
(
curu£r
.
u£rid
, 
GUEST
))

235 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

238 #ifde‡
NSYSUBBS1


239 
curu£r
.
idít
 != 7)

241 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

246 
to
 = 
	`Gë_∑ø_°rög
(1);

247 *
to
 == '\0')

249 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

253 (
	`°rchr
(
to
, '@'Ë=
NULL
))

255 
	`gë_∑sswd
(
NULL
, 
to
) == 0)

257 
	`Re•⁄dPrŸocﬁ
(
USERID_NOT_EXIST
);

262 
sign
 = 
	`Gë_∑ø_numbî
(2);

263 
sign
 < 0)

265 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

269 
tôÀ
 = 
	`Gë_∑ø_°rög
(3);

270 
tôÀ
 !
NULL
)

271 
	`chk_°r2
(
tôÀ
);

274 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

278 
	`•rötf
(
‚ame
, "tmp/_csbbs.%sM.%ld", 
curu£r
.
u£rid
, 
	`time
(0));

279 
	`RecvAπi˛e
(
‚ame
, 
TRUE
, 
to
, 
tôÀ
) == 0)

281 (
sign
 >= 1) && (sign <= 3))

282 
	`ö˛ude_sig
(
curu£r
.
u£rid
, 
‚ame
, 
sign
);

284 
ch
 = 
	`SídMaû
(-1, 
‚ame
, 
curu£r
.
u£rid
, 
to
, 
tôÀ
,

285 
curu£r
.
idít
);

286 
	`u∆ök
(
‚ame
);

287 !
ch
)

289 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

293 
	`u∆ök
(
‚ame
);

294 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

295 
	}
}

300 
	$DoKûlMaû
()

302 
idx
;

303 
fûehódî
 
fh
;

306 
	`£t_maû
(&
idx
, &
fh
) < 0)

309 !
	`dñëe_⁄e_¨ti˛e
(
idx
, &
fh
, 
maûdúe˘
, 
curu£r
.
u£rid
, 'd'))

311 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

312 
uöfo
.
evî_dñëe_maû
 = 
TRUE
;

313 
ifPass
)

314 
	`upd©e_uli°
(
cutmp
, &
uöfo
);

317 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

318 
	}
}

333 
	$DoMaûGroup
()

335 *
tôÀ
, 
‚ame
[
STRLEN
], 
to
[STRLEN];

336 *
mgroup
[
MAX_MAILGROUPS
];

337 
sign
;

338 
ms
;

339 
i
, 
mgcou¡
, 
ªtvÆ
 = 0;

341 !
	`°rcmp
(
curu£r
.
u£rid
, 
GUEST
))

343 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

346 #ifde‡
NSYSUBBS1


347 
curu£r
.
idít
 != 7)

349 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

354 
sign
 = 
	`Gë_∑ø_numbî
(1);

355 
sign
 < 0)

357 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

361 
tôÀ
 = 
	`Gë_∑ø_°rög
(2);

362 
tôÀ
 !
NULL
)

363 
	`chk_°r2
(
tôÀ
);

366 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

370 
mgcou¡
 = 0;

371 
i
 = 0; i < 
MAX_MAILGROUPS
; i++)

372 
mgroup
[
i
] = (*Ë
NULL
;

374 
ªtvÆ
 = 0;

376 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

379 
	`öë_gës
(
to
, 
STRLEN
 - 1) < 0)

380 
	`F‹moßExô
();

382 
to
[0] == '.' &&Åo[1] == '\0')

385 
mgcou¡
 >
MAX_MAILGROUPS
 || 
to
[0] == '\0')

387 
ªtvÆ
 = -1;

388 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

392 !
	`°rchr
(
to
, '@'Ë&& !
	`gë_∑sswd
(
NULL
,Åo))

394 
ªtvÆ
 = -1;

395 
	`Re•⁄dPrŸocﬁ
(
USERID_NOT_EXIST
);

399 
mgroup
[
mgcou¡
] = (*Ë
	`mÆloc
(
	`°æí
(
to
) + 1);

400 !
mgroup
[
mgcou¡
])

402 
ªtvÆ
 = -1;

403 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

407 
	`°r˝y
(
mgroup
[
mgcou¡
], 
to
);

408 
mgcou¡
++;

409 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

412 
mgcou¡
 =0 || 
ªtvÆ
 == -1)

414 
i
 = 0; i < 
mgcou¡
; i++)

415 
	`‰ì
(
mgroup
[
mgcou¡
]);

419 
	`•rötf
(
‚ame
, "tmp/_csbbs.%s.%ld", 
curu£r
.
u£rid
, 
	`time
(0));

420 
	`RecvAπi˛e
(
‚ame
, 
TRUE
, 
to
, 
tôÀ
) == 0)

422 (
ms
 = 
	`Cª©eMaûSockë
()) > 0)

424 
	`ö˛ude_sig
(
curu£r
.
u£rid
, 
‚ame
, 
sign
);

426 
i
 = 0; i < 
mgcou¡
; i++)

429 
	`SídMaû
(
ms
, 
‚ame
, 
curu£r
.
u£rid
, 
mgroup
[
i
],

430 
tôÀ
, 
curu£r
.
idít
);

432 
	`Clo£MaûSockë
(
ms
);

433 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

435 
	`u∆ök
(
‚ame
);

440 
	`u∆ök
(
‚ame
);

441 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

444 
i
 = 0; i < 
mgcou¡
; i++)

445 
	`‰ì
(
mgroup
[
mgcou¡
]);

446 
	}
}

452 
	$DoCheckNewMaû
()

454 
	`CheckNewmaû
(
curu£r
.
u£rid
, 
FALSE
))

455 
	`Re•⁄dPrŸocﬁ
(
HAVE_NEW_MAIL
);

457 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

458 
	}
}

464 
	$DoUnkûlMaû
()

466 
idx
;

467 
fûehódî
 
fh
;

469 
	`£t_maû
(&
idx
,&
fh
) < 0)

472 !
	`dñëe_⁄e_¨ti˛e
(
idx
, &
fh
, 
maûdúe˘
, 
curu£r
.
u£rid
, 'u'))

473 
	`öë_¥ötf
("%d\t%c\t%s\r\n", 
OK_CMD
,

474 (
fh
.
ac˚s£d
 & 
FILE_READ
) ? 'R' : 'N',

475 
fh
.
tôÀ
);

477 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

478 
	}
}

484 
	$DoMaûMaû
()

486 
idx
;

487 *
to
, 
‚ame
[
STRLEN
];

488 
fûehódî
 
fh
;

490 #ifde‡
NSYSUBBS1


491 
curu£r
.
idít
 != 7)

493 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

498 
	`£t_maû
(&
idx
, &
fh
) < 0)

501 
to
 = 
	`Gë_∑ø_°rög
(2);

502 *
to
 == '\0')

504 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

508 !
	`is_emaûaddr
(
to
Ë&& 
	`gë_∑sswd
(
NULL
,Åo) <= 0)

510 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

514 
fh
.
ac˚s£d
 & 
FILE_DELE
)

516 
	`Re•⁄dPrŸocﬁ
(
MAIL_NOT_EXIST
);

520 
	`£tdŸfûe
(
‚ame
, 
maûdúe˘
, 
fh
.
fûíame
);

521 
	`SídMaû
(-1, 
‚ame
, 
curu£r
.
u£rid
, 
to
, 
fh
.
tôÀ
, 0))

522 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

524 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

525 
	}
}

	@main.c

2 
	~<sys/∑øm.h
>

4 
	~<sys/sockë.h
>

5 
	~<sys/fûe.h
>

6 
	~<sys/waô.h
>

7 
	~<sys/time.h
>

8 
	~<sys/ªsour˚.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<√töë/ö.h
>

11 
	~<¨∑/öë.h
>

12 
	~<î∫o.h
>

13 
	~<sig«l.h
>

14 
	~<√tdb.h
>

15 
	~<sy¶og.h
>

16 
	~<pwd.h
>

17 
	~<°dio.h
>

18 
	~<°rög.h
>

19 
	~<uni°d.h
>

20 
	~<f˙é.h
>

22 
	~"csbbs.h
"

24 
î∫o
;

32 
	$ª≠î
()

34 #if 
	`deföed
(
SOLARIS
Ë|| deföed(
AIX
)

35 
°©us
;

37 
waô
 
°©us
;

40 
	`waô3
(&
°©us
, 
WNOHANG
, (
rußge
 *) 0) > 0)

42 (Ë
	`sig«l
(
SIGCHLD
, 
ª≠î
);

43 
	}
}

47 
	$maö
(
¨gc
, 
¨gv
)

48 
¨gc
;

49 *
¨gv
[];

51 
aha
, 
⁄
 = 1, 
maxs
;

52 
fd_£t
 
ibôs
;

53 
sockaddr_ö
 
i‰om
, 
sö
;

54 
s
, 
ns
;

55 
check
 = 0;

56 
timevÆ
 
waô
;

57 
buf
[80];

58 
key_t
 
utmp_£mid
;

60 (
¨gc
 > 1Ë&& (!
	`°rcmp
(
¨gv
[1], "d")))

62 
	`¥ötf
("ProcessÉnter DEBUG modeÇow!!\n");

63 
	`öô_bb£nv
();

64 
	`F‹moß
("127.0.0.1");

65 
	`exô
(0);

68 
¨gc
 > 1 && !
	`°rcmp
(
¨gv
[1], "check"))

69 
check
++;

71 
	`f‹k
() != 0)

72 
	`exô
(0);

74 
aha
 = 64;áha >= 3;áha--)

75 
	`˛o£
(
aha
);

77 
	`sig«l
(
SIGHUP
, 
SIG_IGN
);

78 
	`sig«l
(
SIGCHLD
, 
ª≠î
);

80 (
s
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0)) < 0)

81 
	`exô
(1);

83 
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*Ë&
⁄
, (on));

84 #i‡
	`deföed
(
IP_OPTIONS
Ë&& deföed(
IPPROTO_IP
)

85 
	`£tsock›t
(
s
, 
IPPROTO_IP
, 
IP_OPTIONS
, (*Ë
NULL
, 0);

88 
sö
.
sö_Ámûy
 = 
AF_INET
;

89 
sö
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

90 
sö
.
sö_p‹t
 = 
	`ht⁄s
((
u_sh‹t
)
CSBBS_SERVER_PORT
);

92 
	`böd
(
s
, (
sockaddr
 *Ë&
sö
,  sin) < 0 ||

93 #if 
	`deföed
(
SOLARIS
Ë|| deföed(
AIX
)

94 
	`li°í
(
s
, 256) < 0)

96 
	`li°í
(
s
, 5) < 0)

99 
	`≥º‹
("bind");

100 
	`exô
(1);

103 (
aha
 = 
	`›í
("/dev/nuŒ", 
O_RDONLY
)) < 0)

104 
	`exô
(1);

105 
aha
)

107 
	`dup2
(
aha
, 0);

108 
	`˛o£
(
aha
);

110 
	`dup2
(0, 1);

111 
	`dup2
(0, 2);

113 
	`•rötf
(
buf
, "/tmp/csbbsd.7716");

114 (
aha
 = 
	`›í
(
buf
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0644)) > 0)

116 
	`•rötf
(
buf
, "%d\n", ()
	`gëpid
());

117 
	`wrôe
(
aha
, 
buf
, 
	`°æí
(buf));

118 
	`˛o£
(
aha
);

121 
	`öô_bb£nv
();

123 
check
)

124 
	`ho°_díy
((*Ë
NULL
);

126 
utmp_£mid
 = 
	`£m_öô
(
UTMPSEM_KEY
);

128 
aha
 = (
i‰om
);

129 
maxs
 = 
s
 + 1;

133 
	`FD_ZERO
(&
ibôs
);

134 
	`FD_SET
(
s
, &
ibôs
);

136 
waô
.
tv_£c
 = 5;

137 
waô
.
tv_u£c
 = 0;

139 (
⁄
 = 
	`£À˘
(
maxs
, &
ibôs
, 0, 0, &
waô
)) < 1)

141 (
⁄
 < 0 && 
î∫o
 =
EINTR
) || on == 0)

145 
	`shutdown
(
s
, 2);

146 
	`˛o£
(
s
);

147 
	`f‹k
())

148 
	`exô
(0);

151 
	`execv
("bö/csbbsd", 
¨gv
);

152 
	`exô
(-1);

156 !
	`FD_ISSET
(
s
, &
ibôs
))

158 (
ns
 = 
	`ac˚±
(
s
, (
sockaddr
 *Ë&
i‰om
, &
aha
)) < 0)

162 
	`f‹k
())

165 
	`˛o£
(
ns
);

169 *
ho°
;

171 
	`˛o£
(
s
);

172 
	`dup2
(
ns
, 0);

173 
	`˛o£
(
ns
);

174 
	`dup2
(0, 1);

175 
	`dup2
(0, 2);

176 
⁄
 = 1;

177 
	`£tsock›t
(0, 
SOL_SOCKET
, 
SO_KEEPALIVE
,

178 (*Ë&
⁄
, (on));

179 
ho°
 = 
	`öë_¡ﬂ
(
i‰om
.
sö_addr
);

180 
check
 && 
	`ho°_díy
(
ho°
))

182 
	`Re•⁄dPrŸocﬁ
(
NOT_WELCOME
);

183 
	`F‹moßExô
();

186 
	`F‹moß
(
ho°
);

188 
	`shutdown
(0, 2);

189 
	`exô
(0);

192 
	`˛o£
(
ns
);

196 
	}
}

	@netio.c

2 
	~"bbs.h
"

3 
	~"csbbs.h
"

4 
	~<°d¨g.h
>

7 
	#MAX_CACHE_SIZE
 8192

	)

9 
	g¥öt°r1
[1024];

11 
	g√t_ˇche
[
MAX_CACHE_SIZE
];

12 
	g√t_ˇche_cou¡
;

14 
	$öë_wrôe
(
buf
, 
nbyã
)

15 *
buf
;

16 
nbyã
;

18 
cou¡
, 
ªlwrôe
;

20 
	`Æ¨m
(
CLIENT_WRITE_TIMEOUT
);

21 
cou¡
 = 0;

22 
cou¡
 < 
nbyã
)

24 
ªlwrôe
 = 
	`wrôe
(1, &
buf
[
cou¡
], 
nbyã
 - count);

25 
ªlwrôe
 < 0)

26 
	`F‹moßExô
();

28 
cou¡
 +
ªlwrôe
;

30 
	`Æ¨m
(0);

31 
	}
}

35 
	$öë_gës
(
buf
, 
maxÀn
)

36 *
buf
;

37 
maxÀn
;

39 
i
, 
j
;

40 
c
;

42 
	`Æ¨m
(
CLIENT_READ_TIMEOUT
);

43 
i
 = 0;

44 
maxÀn
--;

45 
i
 < 
maxÀn
)

47 
j
 = 
	`ªad
(0, &
c
, 1);

52 
j
 <= 0)

54 
c
 == '\n')

56 
c
 != '\r')

57 
buf
[
i
++] = 
c
;

59 
buf
[
i
] = '\0';

60 
	`Æ¨m
(0);

61  
i
;

62 
	}
}

65 
	$sock_gës
(
buf
, 
maxÀn
, 
sockë
)

66 *
buf
;

67 
maxÀn
;

68 
sockë
;

70 
i
, 
j
;

71 
c
;

73 
	`Æ¨m
(
CLIENT_READ_TIMEOUT
);

74 
i
 = 0;

75 
maxÀn
--;

76 
i
 < 
maxÀn
)

78 
j
 = 
	`ªad
(
sockë
, &
c
, 1);

83 
j
 <= 0)

85  
c
 == '\n')

87 
c
 != '\r')

88 
buf
[
i
++] = 
c
;

90 
buf
[
i
] = '\0';

91 
	`Æ¨m
(0);

92  
i
;

93 
	}
}

97 
	$öë_¥ötf
(*
fmt
, ...)

99 
va_li°
 
¨gs
;

100 
Àn
;

102 
	`va_°¨t
(
¨gs
, 
fmt
);

103 
	`v•rötf
(
¥öt°r1
, 
fmt
, 
¨gs
);

104 
	`va_íd
(
¨gs
);

105 
Àn
 = 
	`°æí
(
¥öt°r1
);

107 
Àn
 > 0)

108 
	`öë_wrôe
(
¥öt°r1
, 
Àn
);

110 
	}
}

114 
	$my_ªad
(
fd
, 
buf
, 
maxÀn
, 
waôtime
)

115 
fd
, 
maxÀn
, 
waôtime
;

116 *
buf
;

118 
fd_£t
 
ªadmask
;

119 
timevÆ
 
timeout
;

120 
i
, 
j
;

121 
c
;

123 
	`FD_ZERO
(&
ªadmask
);

124 
	`FD_SET
(
fd
, &
ªadmask
);

126 
timeout
.
tv_£c
 = 
waôtime
;

127 
timeout
.
tv_u£c
 = 0;

129 
	`£À˘
(
fd
 + 1, &
ªadmask
, 
NULL
, NULL, &
timeout
) < 0)

132 
maxÀn
--;

133 
	`FD_ISSET
(
fd
, &
ªadmask
))

135 
i
 = 0;

136 
i
 < 
maxÀn
)

138 
j
 = 
	`ªad
(
fd
, &
c
, 1);

139 
j
 < 0)

141  
c
 == '\n')

143 
c
 != '\r')

144 
buf
[
i
++] = 
c
;

146 
buf
[
i
] = '\0';

147  
i
;

151 
	}
}

154 
	$√t_ˇche_öô
()

156 
√t_ˇche_cou¡
 = 0;

157 
	}
}

161 
	$√t_ˇche_¥ötf
(*
fmt
, ...)

163 
va_li°
 
¨gs
;

164 
Àn
;

166 
	`va_°¨t
(
¨gs
, 
fmt
);

167 
	`v•rötf
(
¥öt°r1
, 
fmt
, 
¨gs
);

168 
	`va_íd
(
¨gs
);

169 
Àn
 = 
	`°æí
(
¥öt°r1
);

171 
	`√t_ˇche_wrôe
(
¥öt°r1
, 
Àn
);

172 
	}
}

176 
	$√t_ˇche_wrôe
(*
buf
, 
buÊí
)

178 
MAX_CACHE_SIZE
 - 
√t_ˇche_cou¡
 < 
buÊí
)

179 
	`√t_ˇche_ª‰esh
();

181 
buÊí
 > 
MAX_CACHE_SIZE
)

184 
	`mem˝y
(&
√t_ˇche
[
√t_ˇche_cou¡
], 
buf
, 
buÊí
);

185 
√t_ˇche_cou¡
 +
buÊí
;

186 
	}
}

188 
	$√t_ˇche_ª‰esh
()

190 
√t_ˇche_cou¡
 == 0)

192 
	`öë_wrôe
(
√t_ˇche
, 
√t_ˇche_cou¡
);

193 
√t_ˇche_cou¡
 = 0;

194 
	}
}

	@post.c

2 
	~"bbs.h
"

3 
	~"csbbs.h
"

5 
bﬂrddúe˘
[];

6 
BOOL
 
hasBMPîm
;

7 
BOARDHEADER
 *
CurBLi°
;

8 
BﬂrdLi°
 *
SórchBﬂrdLi°
(*
b«me
);

14 
	$DoPo°Imp
()

16 
idx
;

18 !
	`Sñe˘Bﬂrd
(
	`Gë_∑ø_°rög
(1), 0))

21 !
hasBMPîm
)

23 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

27 
idx
 = 
	`Gë_∑ø_numbî
(2);

28 
idx
 < 1 || idx > 
	`gë_num_ªc‹ds
(
bﬂrddúe˘
, 
FH_SIZE
))

30 
	`Re•⁄dPrŸocﬁ
(
POST_NOT_EXIST
);

34 
	`ª£rve_⁄e_¨ti˛e
(
idx
, 
bﬂrddúe˘
) == 0)

35 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

37 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

38 
	}
}

45 
	$DoGëPo°Numbî
()

47 *
BﬂrdName
;

49 
BﬂrdName
 = 
	`Gë_∑ø_°rög
(1);

50 !
BﬂrdName
)

52 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

56 
	`Sñe˘Bﬂrd
(
BﬂrdName
, 
	`Gë_∑ø_numbî
(2)))

58 
	`RódRC_Inô
(
CurBLi°
->
bid
, 
curu£r
.
u£rid
);

59 
	`RódRC_Re‰esh
(
CurBLi°
->
fûíame
);

61 
	`öë_¥ötf
("%d\t%d\r\n", 
POST_NUM_IS
,

62 
	`gë_num_ªc‹ds
(
bﬂrddúe˘
, 
FH_SIZE
));

64 
	}
}

73 
	$DoGëPo°Hód
()

75 
°¨t
, 
íd
, 
num
, 
fd
, 
c
, 
i
;

76 
FILEHEADER
 
fûeöfo
;

77 
po°_°©e
, 
chd©e
[6];

78 
time_t
 
d©e
;

80 !
	`Sñe˘Bﬂrd
(
	`Gë_∑ø_°rög
(1), 
	`Gë_∑ø_numbî
(2)))

83 
°¨t
 = 
	`Gë_∑ø_numbî
(3);

84 
°¨t
 < 1)

86 
	`Re•⁄dPrŸocﬁ
(
POST_NOT_EXIST
);

90 
íd
 = 
	`Gë_∑ø_numbî
(4);

91 
íd
 == 0)

92 
íd
 = 
°¨t
;

93 
íd
 < 
°¨t
)

95 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

99 
num
 = 
	`gë_num_ªc‹ds
(
bﬂrddúe˘
, 
FH_SIZE
);

101 
°¨t
 > 
num
 || 
íd
 < start)

103 
	`Re•⁄dPrŸocﬁ
(
POST_NOT_EXIST
);

107 (
fd
 = 
	`›í
(
bﬂrddúe˘
, 
O_RDWR
)) < 0)

109 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

113 
	`l£ek
(
fd
, (Ë(
FH_SIZE
 * (
°¨t
 - 1)), 
SEEK_SET
) == -1)

115 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

116 
	`˛o£
(
fd
);

120 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

121 
	`√t_ˇche_öô
();

123 
i
 = 
°¨t
; i <
íd
 && 
	`ªad
(
fd
, &
fûeöfo
, 
FH_SIZE
) == FH_SIZE; i++)

125 
fûeöfo
.
ac˚s£d
 & 
FILE_DELE
)

126 
po°_°©e
 = 'D';

128 
fûeöfo
.
ac˚s£d
 & 
FILE_OUT
)

129 
po°_°©e
 = 'O';

130 
fûeöfo
.
ac˚s£d
 & 
FILE_IN
)

131 
po°_°©e
 = 'I';

133 
fûeöfo
.
ac˚s£d
 & 
FILE_TREA
)

134 
po°_°©e
 = 'T';

135 
fûeöfo
.
ac˚s£d
 & 
FILE_RESV
)

136 
po°_°©e
 = 'E';

137 !
	`RódRC_UnRód
(
fûeöfo
.
po°no
))

138 
po°_°©e
 = 'R';

140 
po°_°©e
 = 'N';

142 
po°_°©e
 == 'T')

144 
c
 = '0';

145 
	`°r˝y
(
fûeöfo
.
ow√r
, " mÇ");

146 
	`°r˝y
(
chd©e
, "00/00");

150 
c
 = (
curu£r
.
idít
 =7Ë? 
fûeöfo
.ident + '0' : '*';

151 
d©e
 = 
	`©ﬁ
((
fûeöfo
.
fûíame
) + 2);

152 
	`°r·ime
(
chd©e
, 6, "%m/%d", 
	`loˇ…ime
(&
d©e
));

155 
	`√t_ˇche_¥ötf
("%d\t%c\t%c\t%s\t%s\t%s\r\n",

156 
i
, 
po°_°©e
, 
c
, 
fûeöfo
.
ow√r
, 
chd©e
, fûeöfo.
tôÀ
);

158 
	`˛o£
(
fd
);

159 
	`√t_ˇche_wrôe
(".\r\n", 3);

160 
	`√t_ˇche_ª‰esh
();

161 
	}
}

167 
	$DoGëPo°
()

169 
idx
;

170 
FILEHEADER
 
fûeöfo
;

172 !
	`Sñe˘Bﬂrd
(
	`Gë_∑ø_°rög
(1), 
	`Gë_∑ø_numbî
(2)))

175 
idx
 = 
	`Gë_∑ø_numbî
(3);

176 
	`check_po°_exi°
(
idx
, 
bﬂrddúe˘
, &
fûeöfo
) < 0)

179 
fûeöfo
.
ac˚s£d
 & 
FILE_TREA
)

181 
	`Re•⁄dPrŸocﬁ
(
NOT_POST
);

185 
fûeöfo
.
ac˚s£d
 & 
FILE_DELE
)

187 
	`Re•⁄dPrŸocﬁ
(
POST_NOT_EXIST
);

191 
	`RódRC_Addli°
(
fûeöfo
.
po°no
);

192 
	`RódRC_Upd©e
();

194 
	`£tdŸfûe
(
gíbuf
, 
bﬂrddúe˘
, 
fûeöfo
.
fûíame
);

195 
	`SídAπi˛e
(
gíbuf
, 
TRUE
);

196 
	}
}

204 
	$DoSídPo°
()

206 *
b«me
, *
tôÀ
, *
√ws
;

207 
‚ame
[
STRLEN
], 
∑th
[
PATHLEN
];

208 
ty≥
, 
sign
, 
t⁄ews
;

211 
b«me
 = 
	`Gë_∑ø_°rög
(1);

212 
b«me
 =
NULL
)

214 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

218 !
	`°rcmp
(
curu£r
.
u£rid
, 
GUEST
))

220 
	`°rcmp
(
b«me
, "sysop") && strcmp(bname, "test"))

222 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

227 
ty≥
 = 
	`Gë_∑ø_numbî
(2);

228 (
ty≥
 != 0) && (type != 1))

230 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

234 !
	`Sñe˘Bﬂrd
(
b«me
, 
ty≥
))

237 !
	`check_ˇn_po°_bﬂrd
(
CurBLi°
))

239 
	`Re•⁄dPrŸocﬁ
(
POST_NOT_ALLOW
);

243 
ty≥
 =1 && 
	`°rcmp
(
CurBLi°
->
ow√r
, 
curu£r
.
u£rid
) != 0

244 && 
curu£r
.
u£æevñ
 !
PERM_SYSOP
)

246 
	`Re•⁄dPrŸocﬁ
(
POST_NOT_ALLOW
);

250 
sign
 = 
	`Gë_∑ø_numbî
(3);

251 (
sign
 < 0) || (sign > 3))

253 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

257 
√ws
 = 
	`Gë_∑ø_°rög
(4);

258 (*
√ws
 != 'Y') && (*news != 'N'))

260 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

264 
tôÀ
 = 
	`Gë_∑ø_°rög
(5);

265 
tôÀ
 !
NULL
)

266 
	`chk_°r2
(
tôÀ
);

269 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

273 
	`•rötf
(
‚ame
, "tmp/_csbbs.%s.%ld", 
curu£r
.
u£rid
, 
	`time
(0));

274 
	`RecvAπi˛e
(
‚ame
, 
FALSE
, 
b«me
, 
tôÀ
) == 0)

276 (
sign
 >= 1) && (sign <= 3))

277 
	`ö˛ude_sig
(
curu£r
.
u£rid
, 
‚ame
, 
sign
);

279 
ty≥
 !1 && *
√ws
 == 'Y' &&

280 (
CurBLi°
->
brdty≥
 & 
BRD_NEWS
) &&

281 
curu£r
.
idít
 == 7)

283 
t⁄ews
 = 
TRUE
;

286 
t⁄ews
 = 
FALSE
;

288 
	`£âªafûe
(
∑th
, 
b«me
, 
NULL
);

290 #ifdef 
USE_THREADING


291 
	`PublishPo°
(
‚ame
, 
curu£r
.
u£rid
, curu£r.
u£∫ame
, 
b«me
, 
tôÀ
,

292 
curu£r
.
idít
, 
uöfo
.
‰om
, 
t⁄ews
,

293 (
ty≥
 =1Ë? 
∑th
 : 
NULL
, 0,

296 
	`PublishPo°
(
‚ame
, 
curu£r
.
u£rid
, curu£r.
u£∫ame
, 
b«me
, 
tôÀ
,

297 
curu£r
.
idít
, 
uöfo
.
‰om
, 
t⁄ews
,

298 (
ty≥
 =1Ë? 
∑th
 : 
NULL
, 0) != -1)

302 
ty≥
 =0 && !(
CurBLi°
->
brdty≥
 & 
BRD_NOPOSTNUM
))

303 
curu£r
.
numpo°s
++;

305 
	`u∆ök
(
‚ame
);

306 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

310 
	`u∆ök
(
‚ame
);

311 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

312 
	}
}

316 
	$check_po°_exi°
(
idx
, 
bﬂrddúe˘
, 
fûeöfo
)

317 
idx
;

318 *
bﬂrddúe˘
;

319 
FILEHEADER
 *
fûeöfo
;

321 
idx
 < 1)

323 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

326 
idx
 > 
	`gë_num_ªc‹ds
(
bﬂrddúe˘
, 
FH_SIZE
))

328 
	`Re•⁄dPrŸocﬁ
(
POST_NOT_EXIST
);

332 
	`gë_ªc‹d
(
bﬂrddúe˘
, 
fûeöfo
, 
FH_SIZE
, 
idx
) < 0)

334 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

337 
	}
}

343 
	$DoMaûPo°
()

345 
idx
;

346 *
to
, 
‚ame
[
STRLEN
];

347 
FILEHEADER
 
fûeöfo
;

349 !
	`°rcmp
(
curu£r
.
u£rid
, 
GUEST
))

351 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

354 #ifde‡
NSYSUBBS1


355 
curu£r
.
idít
 != 7)

357 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

362 !
	`Sñe˘Bﬂrd
(
	`Gë_∑ø_°rög
(1), 
	`Gë_∑ø_numbî
(2)))

365 
to
 = 
	`Gë_∑ø_°rög
(4);

366 !
	`is_emaûaddr
(
to
Ë&& 
	`gë_∑sswd
(
NULL
,Åo) <= 0)

368 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

372 
idx
 = 
	`Gë_∑ø_numbî
(3);

373 
	`check_po°_exi°
(
idx
, 
bﬂrddúe˘
, &
fûeöfo
) < 0)

376 
fûeöfo
.
ac˚s£d
 & 
FILE_DELE
)

378 
	`Re•⁄dPrŸocﬁ
(
POST_NOT_EXIST
);

382 
	`£tdŸfûe
(
‚ame
, 
bﬂrddúe˘
, 
fûeöfo
.
fûíame
);

384 
	`SídMaû
(-1, 
‚ame
, 
curu£r
.
u£rid
, 
to
, 
fûeöfo
.
tôÀ
, 0) == -1)

385 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

387 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

388 
	}
}

394 
	$DoKûlPo°
()

396 
idx
;

397 
FILEHEADER
 
fûeöfo
;

398 
buf
[
PATHLEN
];

399 
ty≥
;

401 !
	`°rcmp
(
curu£r
.
u£rid
, 
GUEST
))

403 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

407 
ty≥
 = 
	`Gë_∑ø_numbî
(2);

408 
ty≥
 != 0 &&Åype != 1)

410 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

414 !
	`Sñe˘Bﬂrd
(
	`Gë_∑ø_°rög
(1), 
ty≥
))

417 
ty≥
 =1 && !
hasBMPîm
)

419 
	`Re•⁄dPrŸocﬁ
(
KILL_NOT_ALLOW
);

423 
idx
 = 
	`Gë_∑ø_numbî
(3);

424 
	`check_po°_exi°
(
idx
, 
bﬂrddúe˘
, &
fûeöfo
) < 0)

427 !(
fûeöfo
.
ac˚s£d
 & 
FILE_TREA
))

429 
ty≥
 =0 && !
hasBMPîm
 && 
	`°rcmp
(
fûeöfo
.
ow√r
, 
curu£r
.
u£rid
))

431 
	`Re•⁄dPrŸocﬁ
(
KILL_NOT_ALLOW
);

435 
fûeöfo
.
ac˚s£d
 & 
FILE_DELE
)

437 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

441 
fûeöfo
.
ac˚s£d
 & 
FILE_RESV
)

443 
	`ª£rve_⁄e_¨ti˛e
(
idx
, 
bﬂrddúe˘
) != 0)

445 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

449 
	`dñëe_⁄e_¨ti˛e
(
idx
, &
fûeöfo
, 
bﬂrddúe˘
, 
curu£r
.
u£rid
, 'd') < 0)

451 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

458 
	`dñëe_ªc‹d
(
bﬂrddúe˘
, 
FH_SIZE
, 
idx
) < 0)

460 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

463 
	`£tdŸfûe
(
buf
, 
bﬂrddúe˘
, 
fûeöfo
.
fûíame
);

464 
	`myu∆ök
(
buf
);

465 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

467 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

468 
	}
}

473 
	$DoTªasuªPo°
()

475 
idx
;

476 
‚ame
[
STRLEN
], 
ç©h
[STRLEN];

477 
FILEHEADER
 
fûeöfo
;

478 *
b«me
;

480 
b«me
 = 
	`Gë_∑ø_°rög
(1);

481 !
	`Sñe˘Bﬂrd
(
b«me
, 0))

484 !
hasBMPîm
)

486 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

490 
idx
 = 
	`Gë_∑ø_numbî
(2);

491 
	`check_po°_exi°
(
idx
, 
bﬂrddúe˘
, &
fûeöfo
) < 0)

494 
fûeöfo
.
ac˚s£d
 & 
FILE_DELE
)

496 
	`Re•⁄dPrŸocﬁ
(
POST_NOT_EXIST
);

500 
	`£tdŸfûe
(
‚ame
, 
bﬂrddúe˘
, 
fûeöfo
.
fûíame
);

502 !
	`Sñe˘Bﬂrd
(
	`Gë_∑ø_°rög
(1), 1))

504 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

508 
	`£âªafûe
(
ç©h
, 
b«me
, 
NULL
);

509 #ifde‡
USE_THREADING


510 
	`PublishPo°
(
‚ame
, 
fûeöfo
.
ow√r
, 
NULL
, NULL, fûeöfo.
tôÀ
,

511 
fûeöfo
.
idít
, 
NULL
, 
FALSE
, 
ç©h
, 0, -1, -1) == -1)

513 
	`PublishPo°
(
‚ame
, 
fûeöfo
.
ow√r
, 
NULL
, NULL, fûeöfo.
tôÀ
,

514 
fûeöfo
.
idít
, 
NULL
, 
FALSE
, 
ç©h
, 0) == -1)

516 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

518 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

519 
	}
}

525 
	$DoUnkûlPo°
()

527 
idx
;

528 
FILEHEADER
 
fûeöfo
;

529 
ty≥
;

531 !
	`°rcmp
(
curu£r
.
u£rid
, 
GUEST
))

533 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

537 
ty≥
 = 
	`Gë_∑ø_numbî
(2);

538 
ty≥
 != 0 &&Åype != 1)

540 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

544 !
	`Sñe˘Bﬂrd
(
	`Gë_∑ø_°rög
(1), 
ty≥
))

547 
idx
 = 
	`Gë_∑ø_numbî
(3);

548 
	`check_po°_exi°
(
idx
, 
bﬂrddúe˘
, &
fûeöfo
) < 0)

551 
curu£r
.
u£æevñ
 !
PERM_SYSOP
 &&

552 
	`°rcmp
(
fûeöfo
.
dñby
, 
curu£r
.
u£rid
) &&

553 (
ty≥
 =1 || 
	`°rcmp
(
CurBLi°
->
ow√r
, 
curu£r
.
u£rid
) ||

554 !
	`°rcmp
(
fûeöfo
.
dñby
, fûeöfo.
ow√r
)))

556 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

560 !
	`dñëe_⁄e_¨ti˛e
(
idx
, &
fûeöfo
, 
bﬂrddúe˘
, 
curu£r
.
u£rid
, 'u'))

561 
	`öë_¥ötf
("%d\t%c\t%s\r\n", 
OK_CMD
,

562 (
fûeöfo
.
ac˚s£d
 & 
FILE_READ
) ? 'R' : 'N',

563 
fûeöfo
.
tôÀ
);

566 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

567 
	}
}

573 
	$DoEdôPo°TôÀ
()

575 
idx
;

576 
FILEHEADER
 
fûeöfo
;

577 *
tôÀ
, *
ow√r
;

578 
ty≥
;

580 !
	`°rcmp
(
curu£r
.
u£rid
, 
GUEST
))

582 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

586 
ty≥
 = 
	`Gë_∑ø_numbî
(2);

587 
ty≥
 != 0 &&Åype != 1)

589 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

593 !
	`Sñe˘Bﬂrd
(
	`Gë_∑ø_°rög
(1), 
ty≥
))

596 
ty≥
 =1 && !
hasBMPîm
)

598 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

602 
idx
 = 
	`Gë_∑ø_numbî
(3);

603 
	`check_po°_exi°
(
idx
, 
bﬂrddúe˘
, &
fûeöfo
) < 0)

606 
ow√r
 = 
	`Gë_∑ø_°rög
(4);

608 
curu£r
.
u£æevñ
 !
PERM_SYSOP
)

609 *
ow√r
 = '\0';

612 
tôÀ
 = 
	`Gë_∑ø_°rög
(5);

613 
tôÀ
 !
NULL
)

614 
	`chk_°r2
(
tôÀ
);

617 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

621 
ty≥
 =0 && 
	`°rcmp
(
curu£r
.
u£rid
, 
fûeöfo
.
ow√r
))

623 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

631 
	`°r˝y
(
fûeöfo
.
tôÀ
,Åitle);

633 
	`sub°ôuã_ªc‹d
(
bﬂrddúe˘
, &
fûeöfo
, 
FH_SIZE
, 
idx
) == 0)

635 
	`öë_¥ötf
("%d\t%s\r\n", 
OK_CMD
, 
tôÀ
);

638 
	}
}

646 
	$DoEdôPo°
()

648 
‚ame
[
STRLEN
], 
∑th
[STRLEN];

649 
idx
, 
ty≥
, 
sign
;

650 
FILEHEADER
 
fûeöfo
;

653 
	`Re•⁄dPrŸocﬁ
(
POST_NOT_ALLOW
);

657 !
	`°rcmp
(
curu£r
.
u£rid
, 
GUEST
))

659 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

663 
ty≥
 = 
	`Gë_∑ø_numbî
(2);

664 (
ty≥
 != 0) && (type != 1))

666 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

670 
	`Sñe˘Bﬂrd
(
	`Gë_∑ø_°rög
(1), 
ty≥
) < 0)

673 
idx
 = 
	`Gë_∑ø_numbî
(3);

674 
	`check_po°_exi°
(
idx
, 
bﬂrddúe˘
, &
fûeöfo
) < 0)

677 
sign
 = 
	`Gë_∑ø_numbî
(4);

678 
sign
 < 0 || sign > 3)

680 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

684 
ty≥
 =1 && !
hasBMPîm
 && 
curu£r
.
u£æevñ
 !
PERM_SYSOP
)

686 
	`Re•⁄dPrŸocﬁ
(
POST_NOT_ALLOW
);

689 
curu£r
.
u£æevñ
 !
PERM_SYSOP
 &&

690 !
hasBMPîm
 && 
	`°rcmp
(
fûeöfo
.
ow√r
, 
curu£r
.
u£rid
))

692 
	`Re•⁄dPrŸocﬁ
(
POST_NOT_ALLOW
);

696 
	`•rötf
(
‚ame
, "tmp/_csbbs.%s.%ld", 
curu£r
.
u£rid
, 
	`time
(0));

697 
	`RecvAπi˛e
(
‚ame
, 
FALSE
, 
NULL
, NULL) == 0)

699 
sign
 != 0)

700 
	`ö˛ude_sig
(
curu£r
.
u£rid
, 
‚ame
, 
sign
);

702 
	`£tdŸfûe
(
∑th
, 
bﬂrddúe˘
, 
fûeöfo
.
fûíame
);

703 
	`myª«me
(
‚ame
, 
∑th
) == 0)

705 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

709 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

710 
	`u∆ök
(
‚ame
);

711 
	}
}

715 
	$check_ˇn_po°_bﬂrd
(
bhr
)

716 
BOARDHEADER
 *
bhr
;

718 
ªt
 = 
TRUE
;

720 
curu£r
.
u£æevñ
 < 
bhr
->
Àvñ
)

721 
ªt
 = 
FALSE
;

722 (
bhr
->
brdty≥
 & 
BRD_IDENT
Ë&& (
curu£r
.
idít
 != 7))

723 
ªt
 = 
FALSE
;

725  
ªt
;

726 
	}
}

732 
	$DoSídPo°ToBﬂrds
()

734 
b«me
[
STRLEN
], *
tôÀ
, 
‚ame
[STRLEN];

735 
BﬂrdLi°
 *
bli°
;

736 *
√ws
;

737 *
mbﬂrds
[
MAX_MULTI_BOARDS
];

738 
mcou¡
, 
i
, 
sign
;

739 
t⁄ews
, 
ªtvÆ
;

741 !
	`°rcmp
(
curu£r
.
u£rid
, 
GUEST
))

743 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

747 
sign
 = 
	`Gë_∑ø_numbî
(1);

748 (
sign
 < 0) || (sign > 3))

750 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

754 
√ws
 = 
	`Gë_∑ø_°rög
(2);

755 (*
√ws
 != 'Y') && (*news != 'N'))

757 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

761 
tôÀ
 = 
	`Gë_∑ø_°rög
(3);

762 
tôÀ
 !
NULL
)

763 
	`chk_°r2
(
tôÀ
);

766 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

770 
mcou¡
 = 0;

771 
i
 = 0; i < 
MAX_MULTI_BOARDS
; i++)

772 
mbﬂrds
[
i
] = (*Ë
NULL
;

774 
ªtvÆ
 = 0;

776 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

779 
	`öë_gës
(
b«me
, 
STRLEN
 - 1) < 0)

780 
	`F‹moßExô
();

782 
b«me
[0] == '.' && bname[1] == '\0')

785 
mcou¡
 >
MAX_MULTI_BOARDS
 || 
b«me
[0] == '\0')

787 
ªtvÆ
 = -1;

788 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

792 (
bli°
 = 
	`SórchBﬂrdLi°
(
b«me
)Ë=
NULL
)

794 
ªtvÆ
 = -1;

795 
	`Re•⁄dPrŸocﬁ
(
BOARD_NOT_EXIST
);

800 
bli°
->
bhr
->
brdty≥
 & 
BRD_ACL
)

802 
ªtvÆ
 = -1;

803 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

808 !
	`check_ˇn_po°_bﬂrd
(
bli°
->
bhr
))

810 
ªtvÆ
 = -1;

811 
	`Re•⁄dPrŸocﬁ
(
POST_NOT_ALLOW
);

815 
mbﬂrds
[
mcou¡
] = (*Ë
	`mÆloc
(
	`°æí
(
b«me
) + 1);

816 !
mbﬂrds
[
mcou¡
])

818 
ªtvÆ
 = -1;

819 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

823 
	`°r˝y
(
mbﬂrds
[
mcou¡
++], 
b«me
);

824 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

827 
mcou¡
 =0 || 
ªtvÆ
 == -1)

829 
i
 = 0; i < 
mcou¡
; i++)

830 
	`‰ì
(
mbﬂrds
[
i
]);

834 
	`•rötf
(
‚ame
, "tmp/_csbbs.%s.%ld", 
curu£r
.
u£rid
, 
	`time
(0));

835 
	`RecvAπi˛e
(
‚ame
, 
FALSE
, 
b«me
, 
tôÀ
) == 0)

837 (
sign
 >= 1) && (sign <= 3))

838 
	`ö˛ude_sig
(
curu£r
.
u£rid
, 
‚ame
, 
sign
);

840 
i
 = 0; i < 
mcou¡
; i++)

842 
bli°
 = 
	`SórchBﬂrdLi°
(
mbﬂrds
[
i
]);

843 
	`£tbﬂrdfûe
(
bﬂrddúe˘
, 
mbﬂrds
[
i
], 
DIR_REC
);

845 *
√ws
 == 'Y' &&

846 (
bli°
->
bhr
->
brdty≥
 & 
BRD_NEWS
) &&

847 
curu£r
.
idít
 == 7)

849 
t⁄ews
 = 
TRUE
;

852 
t⁄ews
 = 
FALSE
;

854 #ifdef 
USE_THREADING


855 
	`PublishPo°
(
‚ame
, 
curu£r
.
u£rid
, curu£r.
u£∫ame
, 
mbﬂrds
[
i
], 
tôÀ
, curu£r.
idít
,

856 
uöfo
.
‰om
, 
t⁄ews
, 
NULL
, 0, -1, -1) != -1)

858 
	`PublishPo°
(
‚ame
, 
curu£r
.
u£rid
, curu£r.
u£∫ame
, 
mbﬂrds
[
i
], 
tôÀ
, curu£r.
idít
,

859 
uöfo
.
‰om
, 
t⁄ews
, 
NULL
, 0) != -1)

864 !(
bli°
->
bhr
->
brdty≥
 & 
BRD_NOPOSTNUM
))

865 
curu£r
.
numpo°s
++;

868 
	`u∆ök
(
‚ame
);

869 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

873 
	`u∆ök
(
‚ame
);

874 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

877 
i
 = 0; i < 
mcou¡
; i++)

878 
	`‰ì
(
mbﬂrds
[
i
]);

879 
	}
}

888 
	$DoMakeDúe˘
()

890 *
åó_«me
;

892 !
	`Sñe˘Bﬂrd
(
	`Gë_∑ø_°rög
(1), 1))

895 !
hasBMPîm
)

897 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

901 
åó_«me
 = 
	`Gë_∑ø_°rög
(2);

902 *
åó_«me
 != '\0')

904 
	`make_åósuª_fﬁdî
(
bﬂrddúe˘
, 
åó_«me
, 
NULL
) == 0)

906 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

910 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

912 
	}
}

	@protocol.c

2 
	~"bbs.h
"

3 
	~"csbbs.h
"

5 
	sPROTOCOL


7 
	mnum
;

8 *
	mkeyw‹d
;

11 
	sRESPOND_PROTOCOL


13 
	mnum
;

14 *
	mex∂aö
;

18 
PROTOCOL
 
	gÂ
[] =

20 {
HELLO
, "HELLO"},

21 {
VERCHK
, "VERCHK"},

22 {
LOGINNUM
, "LOGINNUM"},

23 {
KILLPID
, "KILLPID"},

24 {
_BBSNAME
, "BBSNAME"},

25 {
BBSINFO
, "BBSINFO"},

26 {
_ANNOUNCE
, "ANNOUNCE"},

27 {
CHKANNOUNCE
, "CHKANNOUNCE"},

28 {
SENDHELP
, "SENDHELP"},

29 {
USERLOG
, "USERLOG"},

30 {
CERTILOG
, "CERTILOG"},

31 {
USERNEW
, "USERNEW"},

32 {
ALOWNEW
, "ALOWNEW"},

33 {
USERCHK
, "USERCHK"},

34 {
_QUIT
, "QUIT"},

35 {
MAILNUM
, "MAILNUM"},

36 {
MAILHEAD
, "MAILHEAD"},

37 {
MAILGET
, "MAILGET"},

38 {
MAILPUT
, "MAILPUT"},

39 {
MAILKILL
, "MAILKILL"},

40 {
MAILGROUP
, "MAILGROUP"},

41 {
MAILNEW
, "MAILNEW"},

42 {
MAILUKILL
, "MAILUKILL"},

43 {
MAILMAIL
, "MAILMAIL"},

44 {
FORWARD
, "FORWARD"},

45 {
LIST
, "LIST"},

46 {
_ZAP
, "ZAP"},

47 {
BRDWELCHK
, "BRDWELCHK"},

48 {
BRDWELGET
, "BRDWELGET"},

49 {
BRDWELPUT
, "BRDWELPUT"},

50 {
BRDWELKILL
, "BRDWELKILL"},

51 {
POSTIMP
, "POSTIMP"},

52 {
POSTNUM
, "POSTNUM"},

53 {
POSTHEAD
, "POSTHEAD"},

54 {
POSTGET
, "POSTGET"},

55 {
POSTPUT
, "POSTPUT"},

56 {
POSTKILL
, "POSTKILL"},

57 {
POSTMAIL
, "POSTMAIL"},

58 {
POSTTRE
, "POSTTRE"},

59 {
POSTUKILL
, "POSTUKILL"},

60 {
POSTETITLE
, "POSTETITLE"},

61 {
POSTEDIT
, "POSTEDIT"},

62 {
POSTMPUT
, "POSTMPUT"},

63 {
PLANGET
, "PLANGET"},

64 {
PLANPUT
, "PLANPUT"},

65 {
PLANKILL
, "PLANKILL"},

66 {
SIGNGET
, "SIGNGET"},

67 {
SIGNPUT
, "SIGNPUT"},

68 {
SIGNKILL
, "SIGNKILL"},

69 {
CHGPASSWD
, "CHGPASSWD"},

70 {
CHGNAME
, "CHGNAME"},

71 {
CHGEMAIL
, "CHGEMAIL"},

72 {
USERGET
, "USERGET"},

73 {
LISTUSER
, "LISTUSER"},

74 {
_PAGE
, "PAGE"},

75 {
_QUERY
, "QUERY"},

76 {
TALKTO
, "TALKTO"},

77 {
TALKSTOP
, "TALKSTOP"},

78 {
TALKREP
, "TALKREP"},

79 {
ISAY
, "ISAY"},

80 {
IKEY
, "IKEY"},

81 {
LISTFUSER
, "LISTFUSER"},

82 {
SENDMESG
, "SENDMESG"},

83 {
ALLMESG
, "ALLMESG"},

84 {
FRIENDGET
, "FRIENDGET"},

85 {
FRIENDPUT
, "FRIENDPUT"},

86 {
CHAT
, "CHAT"},

87 {
CHATSAY
, "CHATSAY"},

88 {
CHATSTOP
, "CHATSTOP"},

89 {
FILEPUT
, "FILEPUT"},

90 {
FILEHEAD
, "FILEHEAD"},

91 {
FILENUM
, "FILENUM"},

92 {
FILEGET
, "FILEGET"},

93 {
FILEKILL
, "FILEKILL"},

94 {
MAKEDIR
, "MAKEDIR"},

95 {
TERMOUT
, "TERMOUT"}};

98 
RESPOND_PROTOCOL
 
	gÂ_îr
[] =

100 {
VER_OK
, " T"},

101 {
VER_GETNEW
, "É w s , s "},

102 {
USERID_NOT_EXIST
, " b s b"},

103 {
USERID_EXIST
, " b w s b"},

104 {
HAVE_NEW_MAIL
, " s H!!"},

105 {
NOT_SAY_HELLO
, " | I"},

106 {
NOT_WELCOME
, " _!! w "},

107 {
NOT_ENTER
, " | E J"},

108 {
VER_NOT
, " !! s "},

109 {
NO_ANNOUNCE
, " L i "},

110 {
NEWUSER_FAIL
, " U "},

111 {
NOT_ALLOW_NEW
, " \\ s b U"},

112 {
NO_MORE_USER
, " H F W "},

113 {
PASSWORD_ERROR
, " K X ~"},

114 {
PASSWORD_3_ERROR
, " K X ~ T , j u"},

115 {
MAIL_NOT_EXIST
, " H s b"},

116 {
MAIL_NOT_ALLOW
, " \\ H X H "},

117 {
NO_ANY_BOARD
, " S G i "},

118 {
BOARD_NOT_EXIST
, " s b"},

119 {
BOARD_NOT_ALLOW
, " \\ G i "},

120 {
NO_BOARD_WELCOME
, " L iÉ "},

121 {
NOT_SELECT_BOARD
, " | G i "},

122 {
POST_NOT_EXIST
, " G i s b"},

123 {
NOT_POST
, " D i G i"},

124 {
POST_NOT_ALLOW
, " \\ i K G i"},

125 {
NO_PLAN
, " LÖ "},

126 {
NO_SIGN
, " L W "},

127 {
NOT_ALLOW_PAGE
, " B Z A"},

128 {
NOT_ALLOW_TALK
, " B A"},

129 {
USER_NOT_ONLINE
, " H b u W"},

130 {
NOT_ALLOW_REQ
, "Ç D"},

131 {
PID_NOT_EXIST
, "Öid b u W"},

132 {
NO_FRIEND
, " L H W "},

133 {
UNKNOW_CMD
, " S R O !!!"},

134 {
SYNTAX_ERROR
, " y k ~"},

135 {
USER_NOT_LOGIN
, " | J"},

136 {
WORK_ERROR
, " u @ "},

137 {
KILL_NOT_ALLOW
, " \\ R "},

138 {
LEVEL_TOO_LOW
, " C"},

139 {
OK_CMD
, "OK!!"},

140 {
TALK_EXIT
, " }"},

141 {
CHAT_EXIT
, " } ChatÑoom"},

142 {
CHAT_CLS
, " M "},

143 {
FILE_NOT_EXIST
, " s b"},

144 {
UPLOAD_NOT_ALLOW
, " W \""},

145 {
FILE_IN_SITE
, " b "},

146 {
FILE_OUT_SITE
, " b ~"},

147 {
NOT_SELECT_TREA
, " | "}};

151 
	$GëKeyw‹dNo
(
keyw‹d
)

152 *
keyw‹d
;

154 
i
;

156 
	`°ru¥
(
keyw‹d
);

157 
i
 = 0; i < ((
Â
Ë/ (
PROTOCOL
)); i++)

159 !
	`°rcmp
(
keyw‹d
, 
Â
[
i
].keyword))

160  
Â
[
i
].
num
;

163 
	}
}

165 
	$Re•⁄dPrŸocﬁ
(
ª•no
)

166 
ª•no
;

168 
i
;

170 
i
 = 0; i < ((
Â_îr
Ë/ (
RESPOND_PROTOCOL
)); i++)

172 
Â_îr
[
i
].
num
 =
ª•no
)

173 
	`öë_¥ötf
("%d\t%†\r\n", 
ª•no
, 
Â_îr
[
i
].
ex∂aö
);

175 
	}
}

	@protocol.h

1 
	#MAX_KEYWORD_LEN
 12

	)

2 
	#MAX_PARAMETER
 80

	)

6 
	#HELLO
 10

	)

7 
	#VERCHK
 11

	)

8 
	#_BBSNAME
 12

	)

9 
	#BBSINFO
 13

	)

10 
	#_ANNOUNCE
 15

	)

11 
	#CHKANNOUNCE
 16

	)

12 
	#LOGINNUM
 17

	)

13 
	#KILLPID
 18

	)

14 
	#SENDHELP
 19

	)

16 
	#USERLOG
 20

	)

17 
	#USERNEW
 21

	)

18 
	#ALOWNEW
 22

	)

19 
	#USERCHK
 23

	)

20 
	#CERTILOG
 24

	)

21 
	#_QUIT
 29

	)

23 
	#MAILNUM
 30

	)

24 
	#MAILHEAD
 31

	)

25 
	#MAILGET
 32

	)

26 
	#MAILPUT
 33

	)

27 
	#MAILKILL
 34

	)

28 
	#MAILGROUP
 35

	)

29 
	#MAILNEW
 36

	)

30 
	#MAILUKILL
 37

	)

31 
	#MAILMAIL
 38

	)

32 
	#FORWARD
 39

	)

34 
	#LIST
 40

	)

35 
	#BOARD
 41

	)

36 
	#_ZAP
 42

	)

37 
	#BRDWELCHK
 44

	)

38 
	#BRDWELGET
 45

	)

39 
	#BRDWELPUT
 46

	)

40 
	#BRDWELKILL
 47

	)

42 
	#POSTNUM
 50

	)

43 
	#POSTHEAD
 51

	)

44 
	#POSTGET
 52

	)

45 
	#POSTPUT
 53

	)

46 
	#POSTKILL
 54

	)

47 
	#POSTMAIL
 55

	)

48 
	#POSTTRE
 56

	)

49 
	#POSTUKILL
 57

	)

50 
	#POSTETITLE
 58

	)

51 
	#POSTEDIT
 59

	)

52 
	#POSTMPUT
 49

	)

53 
	#POSTIMP
 48

	)

55 
	#PLANGET
 60

	)

56 
	#PLANPUT
 61

	)

57 
	#PLANKILL
 62

	)

58 
	#SIGNGET
 63

	)

59 
	#SIGNPUT
 64

	)

60 
	#SIGNKILL
 65

	)

61 
	#CHGPASSWD
 66

	)

62 
	#USERGET
 67

	)

63 
	#CHGNAME
 68

	)

64 
	#CHGEMAIL
 69

	)

66 
	#FILEPUT
 70

	)

67 
	#FILEHEAD
 71

	)

68 
	#FILENUM
 72

	)

69 
	#FILEGET
 73

	)

70 
	#FILEKILL
 74

	)

72 
	#ALLMESG
 79

	)

73 
	#SENDMESG
 80

	)

74 
	#LISTUSER
 81

	)

75 
	#_PAGE
 82

	)

76 
	#_QUERY
 83

	)

77 
	#TALKTO
 84

	)

78 
	#TALKSTOP
 85

	)

79 
	#TALKREP
 86

	)

80 
	#ISAY
 87

	)

81 
	#IKEY
 88

	)

82 
	#LISTFUSER
 89

	)

84 
	#FRIENDGET
 90

	)

85 
	#FRIENDPUT
 91

	)

87 
	#CHAT
 95

	)

88 
	#CHATSAY
 96

	)

89 
	#CHATSTOP
 97

	)

91 
	#MAKEDIR
 100

	)

93 
	#TERMOUT
 110

	)

97 
	#VER_OK
 611

	)

98 
	#VER_GETNEW
 612

	)

99 
	#BBSNAME_IS
 613

	)

100 
	#ANN_TIME
 614

	)

102 
	#USERID_NOT_EXIST
 621

	)

103 
	#USERID_EXIST
 622

	)

105 
	#MAIL_NUM_IS
 631

	)

106 
	#HAVE_NEW_MAIL
 632

	)

108 
	#POST_NUM_IS
 641

	)

110 
	#NOT_SAY_HELLO
 711

	)

111 
	#NOT_WELCOME
 712

	)

112 
	#NOT_ENTER
 713

	)

113 
	#VER_NOT
 714

	)

114 
	#NO_ANNOUNCE
 716

	)

116 
	#NEWUSER_FAIL
 721

	)

117 
	#NOT_ALLOW_NEW
 722

	)

118 
	#NO_MORE_USER
 723

	)

119 
	#PASSWORD_ERROR
 724

	)

120 
	#PASSWORD_3_ERROR
 725

	)

122 
	#MAIL_NOT_EXIST
 731

	)

123 
	#MAIL_NOT_ALLOW
 739

	)

126 
	#NO_ANY_BOARD
 741

	)

127 
	#BOARD_NOT_EXIST
 742

	)

128 
	#BOARD_NOT_ALLOW
 743

	)

129 
	#NO_BOARD_WELCOME
 745

	)

131 
	#NOT_SELECT_BOARD
 751

	)

132 
	#POST_NOT_EXIST
 752

	)

133 
	#NOT_POST
 753

	)

134 
	#POST_NOT_ALLOW
 759

	)

136 
	#NO_PLAN
 761

	)

137 
	#NO_SIGN
 763

	)

139 
	#NOT_ALLOW_PAGE
 780

	)

140 
	#NOT_ALLOW_TALK
 781

	)

141 
	#USER_NOT_ONLINE
 782

	)

142 
	#NOT_ALLOW_REQ
 783

	)

143 
	#PID_NOT_EXIST
 784

	)

145 
	#NO_FRIEND
 785

	)

147 
	#UNKNOW_CMD
 790

	)

148 
	#SYNTAX_ERROR
 791

	)

149 
	#USER_NOT_LOGIN
 792

	)

150 
	#WORK_ERROR
 793

	)

151 
	#KILL_NOT_ALLOW
 794

	)

152 
	#LEVEL_TOO_LOW
 795

	)

154 
	#OK_CMD
 800

	)

156 
	#TALK_REQUEST
 900

	)

157 
	#SHE_SAY
 901

	)

158 
	#SHE_KEY
 902

	)

159 
	#TALK_EXIT
 903

	)

160 
	#TALK_PORT
 904

	)

161 
	#MSG_REQUEST
 905

	)

162 
	#TERM_PORT
 906

	)

165 
	#CHAT_MSG
 910

	)

166 
	#CHAT_CHG_NICKNAME
 911

	)

167 
	#CHAT_EXIT
 912

	)

168 
	#CHAT_CLS
 913

	)

170 
	#PAGER_CHANGE
 920

	)

172 
	#FILE_NOT_EXIST
 950

	)

173 
	#UPLOAD_NOT_ALLOW
 951

	)

174 
	#FILE_IN_SITE
 952

	)

175 
	#FILE_OUT_SITE
 953

	)

176 
	#ORI_FILENAME
 954

	)

177 
	#OUT_FILE
 955

	)

178 
	#END_FILE
 956

	)

180 
	#NOT_SELECT_TREA
 1000

	)

	@talk.c

2 
	~"bbs.h
"

3 
	~"csbbs.h
"

5 
	~<sys/sockë.h
>

6 
	~<sys/waô.h
>

7 
	~<√töë/ö.h
>

8 
	~<√tdb.h
>

11 
ifCît
;

12 
ifPass
;

14 
USER_INFO
 *
£¨ch_uli°
();

15 
cmp_u£rid
();

18 
	#FACE0
 0x18

	)

19 
	#FACE1
 0x19

	)

20 
	#FACE2
 0x1®

	)

21 
	#FACE3
 0x1b

	)

22 
	#FACE4
 0x1c

	)

23 
	#FACE5
 0x1d

	)

24 
	#FACE6
 0x1e

	)

27 *
	gcheck_u£rid
;

28 
USER_INFO
 *
	gcheck_u£r_öfo
;

29 
MSQ
 
	gmymsq
;

33 
	$èlkCheckPîm
()

35 #ifde‡
GUEST


36 !
	`°rcmp
(
curu£r
.
u£rid
, 
GUEST
))

38 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

44 
curu£r
.
u£æevñ
 < 
PERM_PAGE
)

46 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

50 #ifde‡
NSYSUBBS1


51 
curu£r
.
idít
 != 7)

53 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

58 
curu£r
.
u£æevñ
 !
PERM_SYSOP
)

60 
check_u£r_öfo
->
∑gî
 & 
PAGER_QUIET
)

62 
	`Re•⁄dPrŸocﬁ
(
NOT_ALLOW_PAGE
);

65 (
check_u£r_öfo
->
∑gî
 & 
PAGER_FRIEND
)

66 && !
	`ˇn_ovîride
(
check_u£rid
, 
curu£r
.
u£rid
))

68 
	`Re•⁄dPrŸocﬁ
(
NOT_ALLOW_PAGE
);

71 (
check_u£r_öfo
->
∑gî
 & 
PAGER_FIDENT
)

72 && !
	`ˇn_ovîride
(
check_u£rid
, 
curu£r
.
u£rid
)

73 && 
curu£r
.
idít
 != 7)

75 
	`Re•⁄dPrŸocﬁ
(
NOT_ALLOW_PAGE
);

80 
	}
}

84 
	$∑gîch¨
(
me
, 
them
, 
∑gî
)

85 *
me
, *
them
;

86 
∑gî
;

89 
	`ˇn_ovîride
(
them
, 
me
))

93 !
∑gî
)

97 
	}
}

104 
	$DoQuîy
()

106 *
quîy_u£rid
;

107 
USEREC
 
lookupu£r
;

108 
‚ame
[
PATHLEN
];

110 
quîy_u£rid
 = 
	`Gë_∑ø_°rög
(1);

111 
quîy_u£rid
 =
NULL
)

113 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

116 !
	`gë_∑sswd
(&
lookupu£r
, 
quîy_u£rid
))

118 
	`Re•⁄dPrŸocﬁ
(
USERID_NOT_EXIST
);

123 
	`°r˝y
(
EMaû
, 
lookupu£r
.
emaû
);

124 (
EMaû
[0] == '\0') || (EMail[0] == ' '))

125 
	`°r˝y
(
EMaû
, "#");

128 
	`öë_¥ötf
("800\t%s\t%s\t%d\t%d\t%d",

129 
lookupu£r
.
u£rid
,

130 (*
lookupu£r
.
u£∫ame
) ?Üookupuser.username : "#",

131 
lookupu£r
.
u£æevñ
,

132 
lookupu£r
.
idít
,

133 
lookupu£r
.
numlogös
);

134 
	`öë_¥ötf
("\t%d\t%s\t%s\t%s\t%c\n",

135 
lookupu£r
.
numpo°s
,

136 
	`Ctime
(&(
lookupu£r
.
œ°logö
)),

137 (*
lookupu£r
.
œ°ho°
) ?Üookupuser.lasthost : "(unknown)",

139 (
	`CheckNewmaû
(
lookupu£r
.
u£rid
, 
TRUE
)) ? '1' : '0');

141 
	`£thomefûe
(
‚ame
, 
quîy_u£rid
, 
UFNAME_PLANS
);

142 
	`gë_num_ªc‹ds
(
‚ame
, ()) > 0)

143 
	`SídAπi˛e
(
‚ame
, 
FALSE
);

145 
	`öë_¥ötf
(" S W .\r\n\r\n.\r\n");

146 
	}
}

150 
	$¥ötcuít
(
uíç
)

151 
USER_INFO
 *
uíç
;

153 
uíç
->
u£rid
[0] == '\0')

155 
curu£r
.
u£æevñ
 < 
PERM_CLOAK
 && 
uíç
->
övisibÀ
)

158 
	`öë_¥ötf
("%s\t%s\t%c\t%s\t%s\r\n",

159 
uíç
->
u£rid
,

160 
uíç
->
‰om
,

161 
	`∑gîch¨
(
curu£r
.
u£rid
, 
uíç
->u£rid, uíç->
∑gî
),

162 
	`mode°rög
(
uíç
, 1),

163 
uíç
->
u£∫ame
);

165 
	}
}

177 
	$DoLi°O∆öeU£r
()

179 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

180 
	`≠∂y_uli°
(
¥ötcuít
);

181 
	`öë_¥ötf
(".\r\n");

182 
	}
}

189 
	$DoPage
()

191 !
uöfo
.
∑gî
)

192 
uöfo
.
∑gî
 = 
PAGER_FRIEND
;

194 
uöfo
.
∑gî
 ^= uinfo.pager;

195 
ifPass
)

196 
	`upd©e_uli°
(
cutmp
, &
uöfo
);

197 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

198 
	}
}

205 
	$DoAŒMsg
()

207 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

223 
	`öë_¥ötf
(".\r\n");

224 
	}
}

231 
	$DoSídMsg
()

233 *
mesßge
;

234 
USEREC
 
lookupu£r
;

235 
ßve_de°id
[
IDLEN
];

238 
ifCît
)

240 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

244 
check_u£rid
 = 
	`Gë_∑ø_°rög
(1);

245 
check_u£rid
 =
NULL
)

247 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

250 !
	`gë_∑sswd
(&
lookupu£r
, 
check_u£rid
))

252 
	`Re•⁄dPrŸocﬁ
(
USERID_NOT_EXIST
);

255 
mesßge
 = 
	`Gë_∑ø_°rög
(2);

256 
mesßge
 =
NULL
)

258 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

262 
check_u£r_öfo
 = 
	`£¨ch_uli°
(
cmp_u£rid
, 
check_u£rid
);

263 !
check_u£r_öfo
)

265 
	`Re•⁄dPrŸocﬁ
(
USER_NOT_ONLINE
);

269 
	`èlkCheckPîm
() < 0)

272 
	`x°∫˝y
(
ßve_de°id
, 
uöfo
.
de°id
, 
IDLEN
);

273 
	`x°∫˝y
(
uöfo
.
de°id
, 
check_u£r_öfo
->
u£rid
, 
IDLEN
);

274 
ifPass
)

275 
	`upd©e_uli°
(
cutmp
, &
uöfo
);

277 
	`msq_£t
(&
mymsq
, 
curu£r
.
u£rid
, curu£r.
u£∫ame
, 
check_u£rid
, 
mesßge
);

278 
	`msq_¢d
(
check_u£r_öfo
, &
mymsq
) == -1)

279 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

281 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

283 
	`x°∫˝y
(
uöfo
.
de°id
, 
ßve_de°id
, 
IDLEN
);

284 
ifPass
)

285 
	`upd©e_uli°
(
cutmp
, &
uöfo
);

287 
	}
}

291 
	$TÆkög
(
fd
)

292 
fd
;

294 
buf
[258];

295 
tmp
[259];

296 
c
;

297 
i
, 
j
, 
d©ac
;

298 
sock
, 
tsock
, 
Àngth
;

299 
sockaddr_ö
 
t£rvî
;

300 
keyw‹d
[
MAX_KEYWORD_LEN
 + 1];

301 
keyno
;

302 
fd_£t
 
ªadmask
;

303 
timevÆ
 
timeout
;

305 
uöfo
.
mode
 = 
TALK
;

306 
ifPass
)

307 
	`upd©e_uli°
(
cutmp
, &
uöfo
);

311 
	`f‹k
())

314 
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

315 
t£rvî
.
sö_Ámûy
 = 
AF_INET
;

316 
t£rvî
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

317 
t£rvî
.
sö_p‹t
 = 0;

319 
	`böd
(
sock
, (
sockaddr
 *Ë&
t£rvî
, Åserver) < 0)

321 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

325 
Àngth
 =  
t£rvî
;

326 
	`gësock«me
(
sock
, (
sockaddr
 *Ë&
t£rvî
, &
Àngth
) < 0)

328 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

329 
	`˛o£
(1);

330 
	`˛o£
(0);

331 
	`˛o£
(
fd
);

332 
	`exô
(0);

335 
	`öë_¥ötf
("%d\t%d\r\n", 
TALK_PORT
, 
	`¡ohs
((
u_sh‹t
Ë
t£rvî
.
sö_p‹t
));

337 
	`li°í
(
sock
, 1);

338 
tsock
 = 
	`ac˚±
(
sock
, (
sockaddr
 *) 0, (*) 0);

339 
	`˛o£
(
sock
);

340 
	`˛o£
(0);

341 
	`˛o£
(1);

342 
	`˛o£
(2);

344 
tsock
 == -1)

346 
	`˛o£
(0);

347 
	`˛o£
(1);

348 
	`˛o£
(
fd
);

349 
	`exô
(0);

355 
TRUE
)

357 
	`FD_ZERO
(&
ªadmask
);

358 
	`FD_SET
(
fd
, &
ªadmask
);

359 
	`FD_SET
(
tsock
, &
ªadmask
);

360 
timeout
.
tv_£c
 = 20;

361 
timeout
.
tv_u£c
 = 0;

363 
	`£À˘
(
tsock
 + 1, &
ªadmask
, 
NULL
, NULL, &
timeout
) < 0)

365 
î∫o
 =
EINTR
)

368 
	`˛o£
(0);

369 
	`˛o£
(1);

370 
	`˛o£
(
fd
);

371 
	`˛o£
(
tsock
);

372 
	`exô
(0);

374 
	`FD_ISSET
(
tsock
, &
ªadmask
))

376 (
i
 = 
	`sock_gës
(
buf
, (buf), 
tsock
)) < 0)

378 
	`˛o£
(
fd
);

379 
	`exô
(0);

384 
i
 > 0)

386 *
NextTokí
;

388 
NextTokí
 = 
	`GëTokí
(
buf
, 
keyw‹d
, 
MAX_KEYWORD_LEN
);

389 
keyw‹d
[0] == '\0')

391 
keyno
 = 
	`GëKeyw‹dNo
(
keyw‹d
);

392 
keyno
)

394 
ISAY
:

399 
	`GëTokí
(
NextTokí
, 
tmp
, (tmp));

400 
tmp
[0] != '\0')

401 
	`wrôe
(
fd
, 
tmp
, 
	`°æí
(tmp));

403 
IKEY
:

404 
	`GëTokí
(
NextTokí
, 
tmp
, (tmp));

405 !
	`°rˇ£cmp
(
tmp
, "BACK"))

407 
c
 = '\177';

408 
	`wrôe
(
fd
, &
c
, 1);

410 !
	`°rˇ£cmp
(
tmp
, "ENTER"))

412 
c
 = '\n';

413 
	`wrôe
(
fd
, &
c
, 1);

415 !
	`°rcmp
(
tmp
, "SPACE"))

417 
c
 = ' ';

418 
	`wrôe
(
fd
, &
c
, 1);

420 !
	`°rcmp
(
tmp
, "face0"))

422 
c
 = 0x18;

423 
	`wrôe
(
fd
, &
c
, 1);

425 !
	`°rcmp
(
tmp
, "face1"))

427 
c
 = 0x19;

428 
	`wrôe
(
fd
, &
c
, 1);

430 !
	`°rcmp
(
tmp
, "face2"))

432 
c
 = 0x1a;

433 
	`wrôe
(
fd
, &
c
, 1);

435 !
	`°rcmp
(
tmp
, "face3"))

437 
c
 = 0x1b;

438 
	`wrôe
(
fd
, &
c
, 1);

440 !
	`°rcmp
(
tmp
, "face4"))

442 
c
 = 0x1c;

443 
	`wrôe
(
fd
, &
c
, 1);

445 !
	`°rcmp
(
tmp
, "face5"))

447 
c
 = 0x1d;

448 
	`wrôe
(
fd
, &
c
, 1);

450 !
	`°rcmp
(
tmp
, "face6"))

452 
c
 = 0x1e;

453 
	`wrôe
(
fd
, &
c
, 1);

471 
TALKSTOP
:

472 
_QUIT
:

473 
	`˛o£
(0);

474 
	`˛o£
(1);

475 
	`˛o£
(
fd
);

476 
	`˛o£
(
tsock
);

477 
	`exô
(0);

481 
	`FD_ISSET
(
fd
, &
ªadmask
))

486 (
d©ac
 = 
	`ªad
(
fd
, 
buf
, (buf))) <= 0)

489 
	`˛o£
(0);

490 
	`˛o£
(1);

491 
	`˛o£
(
fd
);

492 
	`˛o£
(
tsock
);

493 
	`exô
(0);

495 
j
 = 0;

496 
i
 = 0; i < 
d©ac
; i++)

498 
c
 = 
buf
[
i
];

499 
c
)

501 
	`CTRL
('H'):

503 
j
 > 0)

505 
tmp
[
j
] = '\0';

506 
	`√t_¥ötf
(
tsock
, "%d\t%s\r\n", 
SHE_SAY
, 
tmp
);

507 
j
 = 0;

509 
	`√t_¥ötf
(
tsock
, "%d\tBACK\r\n", 
SHE_KEY
);

511 
	`CTRL
('M'):

512 
	`CTRL
('J'):

513 
j
 > 0)

515 
tmp
[
j
] = '\0';

516 
	`√t_¥ötf
(
tsock
, "%d\t%s\r\n", 
SHE_SAY
, 
tmp
);

517 
j
 = 0;

519 
	`√t_¥ötf
(
tsock
, "%d\tENTER\r\n", 
SHE_KEY
);

521 
	`CTRL
('G'):

524 
j
 > 0)

526 
tmp
[
j
] = '\0';

527 
	`√t_¥ötf
(
tsock
, "%d\t%s\r\n", 
SHE_SAY
, 
tmp
);

528 
j
 = 0;

530 
	`√t_¥ötf
(
tsock
, "%d\tSPACE\r\n", 
SHE_KEY
);

532 
FACE0
:

533 
j
 > 0)

535 
tmp
[
j
] = '\0';

536 
	`√t_¥ötf
(
tsock
, "%d\t%s\r\n", 
SHE_SAY
, 
tmp
);

537 
j
 = 0;

539 
	`√t_¥ötf
(
tsock
, "%d\tFACE0\r\n", 
SHE_KEY
);

541 
FACE1
:

542 
j
 > 0)

544 
tmp
[
j
] = '\0';

545 
	`√t_¥ötf
(
tsock
, "%d\t%s\r\n", 
SHE_SAY
, 
tmp
);

546 
j
 = 0;

548 
	`√t_¥ötf
(
tsock
, "%d\tFACE1\r\n", 
SHE_KEY
);

550 
FACE2
:

551 
j
 > 0)

553 
tmp
[
j
] = '\0';

554 
	`√t_¥ötf
(
tsock
, "%d\t%s\r\n", 
SHE_SAY
, 
tmp
);

555 
j
 = 0;

557 
	`√t_¥ötf
(
tsock
, "%d\tFACE2\r\n", 
SHE_KEY
);

559 
FACE3
:

560 
j
 > 0)

562 
tmp
[
j
] = '\0';

563 
	`√t_¥ötf
(
tsock
, "%d\t%s\r\n", 
SHE_SAY
, 
tmp
);

564 
j
 = 0;

566 
	`√t_¥ötf
(
tsock
, "%d\tFACE3\r\n", 
SHE_KEY
);

568 
FACE4
:

569 
j
 > 0)

571 
tmp
[
j
] = '\0';

572 
	`√t_¥ötf
(
tsock
, "%d\t%s\r\n", 
SHE_SAY
, 
tmp
);

573 
j
 = 0;

575 
	`√t_¥ötf
(
tsock
, "%d\tFACE4\r\n", 
SHE_KEY
);

577 
FACE5
:

578 
j
 > 0)

580 
tmp
[
j
] = '\0';

581 
	`√t_¥ötf
(
tsock
, "%d\t%s\r\n", 
SHE_SAY
, 
tmp
);

582 
j
 = 0;

584 
	`√t_¥ötf
(
tsock
, "%d\tFACE5\r\n", 
SHE_KEY
);

586 
FACE6
:

587 
j
 > 0)

589 
tmp
[
j
] = '\0';

590 
	`√t_¥ötf
(
tsock
, "%d\t%s\r\n", 
SHE_SAY
, 
tmp
);

591 
j
 = 0;

593 
	`√t_¥ötf
(
tsock
, "%d\tFACE6\r\n", 
SHE_KEY
);

597 
tmp
[
j
++] = 
c
;

601 
j
 > 0)

603 
tmp
[
j
] = '\0';

604 
	`√t_¥ötf
(
tsock
, "%d\t%s\r\n", 
SHE_SAY
, 
tmp
);

610 
	`öë_¥ötf
("%s\n", "This isÉrror");

611 
	`exô
(1);

614 
	`sig«l
(
SIGCHLD
, 
SIG_IGN
);

616 
	}
}

627 
	$DoTÆk
()

629 
sock
, 
msgsock
, 
Àngth
;

630 
sockaddr_ö
 
£rvî
;

631 
USEREC
 
lookupu£r
;

632 
c
;

633 
buf
[257];

634 
fd_£t
 
ªadmask
;

635 
timevÆ
 
timeout
;

636 
i
, 
keyno
;

638 
ifCît
)

640 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

644 
check_u£rid
 = 
	`Gë_∑ø_°rög
(1);

645 
check_u£rid
 =
NULL
)

647 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

651 !
	`gë_∑sswd
(&
lookupu£r
, 
check_u£rid
))

653 
	`Re•⁄dPrŸocﬁ
(
USERID_NOT_EXIST
);

657 
check_u£r_öfo
 = 
	`£¨ch_uli°
(
cmp_u£rid
, 
check_u£rid
);

658 !
check_u£r_öfo
)

660 
	`Re•⁄dPrŸocﬁ
(
USER_NOT_ONLINE
);

664 
	`èlkCheckPîm
() < 0)

668 
check_u£r_öfo
->
mode
 =
IRCCHAT
 || check_u£r_öfo->modê=
LOCALIRC
)

670 
	`Re•⁄dPrŸocﬁ
(
NOT_ALLOW_TALK
);

675 (
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0)) < 0)

677 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

681 
£rvî
.
sö_Ámûy
 = 
AF_INET
;

682 
£rvî
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

683 
£rvî
.
sö_p‹t
 = 0;

684 
	`böd
(
sock
, (
sockaddr
 *Ë&
£rvî
,  server) < 0)

686 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

689 
Àngth
 =  
£rvî
;

690 
	`gësock«me
(
sock
, (
sockaddr
 *Ë&
£rvî
, &
Àngth
) < 0)

692 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

695 
uöfo
.
socka˘ive
 = 
TRUE
;

696 
uöfo
.
sockaddr
 = 
£rvî
.
sö_p‹t
;

697 
	`x°∫˝y
(
uöfo
.
de°id
, 
check_u£rid
, 
IDLEN
);

698 
uöfo
.
mode
 = 
PAGE
;

699 
ifPass
)

700 
	`upd©e_uli°
(
cutmp
, &
uöfo
);

702 
check_u£r_öfo
->
pid
 > 2)

703 
	`kûl
(
check_u£r_öfo
->
pid
, 
SIGUSR1
);

706 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

710 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

712 
	`li°í
(
sock
, 1);

715 
	`FD_ZERO
(&
ªadmask
);

716 
	`FD_SET
(
sock
, &
ªadmask
);

717 
	`FD_SET
(0, &
ªadmask
);

718 
timeout
.
tv_£c
 = 20;

719 
timeout
.
tv_u£c
 = 0;

721 
	`£À˘
(
sock
 + 1, &
ªadmask
, 
NULL
, NULL, &
timeout
) < 0)

723 
	`˛o£
(
sock
);

724 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

728 
	`FD_ISSET
(
sock
, &
ªadmask
))

730 
msgsock
 = 
	`ac˚±
(
sock
, (
sockaddr
 *) 0, (*) 0);

731 
	`˛o£
(
sock
);

732 
uöfo
.
socka˘ive
 = 
FALSE
;

733 
msgsock
 == -1)

735 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

738 
	`ªad
(
msgsock
, &
c
, (c));

739 
c
 == 'y')

742 
	`TÆkög
(
msgsock
);

743 
	`˛o£
(
msgsock
);

748 
i
 = 0;

749 
i
 < (
buf
) - 1)

751 
	`ªad
(
msgsock
, &
c
, (c));

752 
c
 == '\0')

754 
buf
[
i
++] = 
c
;

756 
buf
[
i
] = '\0';

757 
	`˛o£
(
msgsock
);

758 
	`SåDñR
(
buf
);

759 
	`öë_¥ötf
("%d\t%s\r\n", 
NOT_ALLOW_REQ
, 
buf
);

764 
	`FD_ISSET
(0, &
ªadmask
))

766 (
i
 = 
	`öë_gës
(
buf
, (buf))) < 0)

768 
	`F‹moßExô
();

770 
i
 > 0)

775 
keyno
 = 
	`GëKeyw‹dNo
(
buf
);

776 
keyno
 =
TALKSTOP
)

778 
	`˛o£
(
sock
);

779 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

782 
keyno
 == 0x666)

784 
	`˛o£
(
sock
);

785 
	`F‹moßExô
();

790 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

792 
check_u£r_öfo
->
pid
 > 2)

794 
	`kûl
(
check_u£r_öfo
->
pid
, 
SIGUSR1
) == -1)

796 
	`˛o£
(
sock
);

797 
	`Re•⁄dPrŸocﬁ
(
USER_NOT_ONLINE
);

803 
	`Re•⁄dPrŸocﬁ
(
USER_NOT_ONLINE
);

808 
uöfo
.
socka˘ive
 = 
FALSE
;

812 
uöfo
.
mode
 = 
CLIENT
;

813 
ifPass
)

814 
	`upd©e_uli°
(
cutmp
, &
uöfo
);

815 
	}
}

819 
	g∑gî_id
[
IDLEN
 + 2];

820 
USEREC
 
	gau
;

824 
	$cmp_de°id
(
u£rid
, 
up
)

825 *
u£rid
;

826 
USER_INFO
 *
up
;

828 !
up
)

830  (!
	`°rcmp
(
u£rid
, 
up
->
de°id
));

831 
	}
}

835 
	$£¨chu£æi°
(
u£rid
)

836 *
u£rid
;

838 
USER_INFO
 *
up
;

840 (
up
 = 
	`£¨ch_uli°
(
cmp_de°id
, 
u£rid
)Ë!
NULL
)

842 
check_u£r_öfo
 = 
up
;

846 
	}
}

850 
	$£çagîeque°
()

852 !
	`£¨chu£æi°
(
curu£r
.
u£rid
))

855 !
check_u£r_öfo
->
socka˘ive
)

858 
	`gë_∑sswd
(&
au
, 
check_u£r_öfo
->
u£rid
);

862 
	`x°∫˝y
(
uöfo
.
de°id
, 
au
.
u£rid
, 
IDLEN
);

864 
	}
}

868 
	$èlkª∂y
()

870 
	`£çagîeque°
())

872 
	`°r˝y
(
∑gî_id
, 
au
.
u£rid
);

874 
	`öë_¥ötf
("%d\t%s\t%s\t%s\r\n",

875 
TALK_REQUEST
, 
au
.
u£rid
,

876 
check_u£r_öfo
->
‰om
, 
au
.
u£∫ame
);

877 
	}
}

884 
	$DoTÆkRïly
()

886 
a
;

887 
ho°ít
 *
h
;

888 *
buf
, *
tmp
;

889 
ho°«me
[
STRLEN
];

890 
sockaddr_ö
 
sö
;

893 
tmp
 = 
	`Gë_∑ø_°rög
(1);

894 
tmp
 =
NULL
)

896 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

900 
	`£çagîeque°
())

902 
	`Re•⁄dPrŸocﬁ
(
USER_NOT_ONLINE
);

906 
buf
 = 
	`Gë_∑ø_°rög
(2);

907 
	`°rcmp
(
buf
, 
∑gî_id
))

909 
	`Re•⁄dPrŸocﬁ
(
USER_NOT_ONLINE
);

913 
	`gëho°«me
(
ho°«me
, 
STRLEN
);

914 (
h
 = 
	`gëho°by«me
(
ho°«me
)Ë=
NULL
)

916 
	`≥º‹
("gethostbyname");

917 
	`¥ötf
("ERROR\r\n");

918 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

922 
	`bzîo
(&
sö
,  sin);

926 
sö
.
sö_Ámûy
 = 
AF_INET
;

927 
	`bc›y
(
h
->
h_addr
, &
sö
.
sö_addr
, h->
h_Àngth
);

928 
sö
.
sö_p‹t
 = 
check_u£r_öfo
->
sockaddr
;

929 
a
 = 
	`sockë
(
sö
.
sö_Ámûy
, 
SOCK_STREAM
, 0);

930 (
	`c⁄√˘
(
a
, (
sockaddr
 *Ë&
sö
,  sin)))

932 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

936 (
tmp
[0] == 'N') || (tmp[0] == 'n'))

938 
tmp
[0] = 'n';

939 
buf
 = 
	`Gë_∑ø_°rög
(3);

940 
	`°rˇt
(
buf
, "\r\n");

941 
	`wrôe
(
a
, 
tmp
, 1);

942 
	`wrôe
(
a
, 
buf
, 
	`°æí
(buf) + 1);

943 
	`˛o£
(
a
);

948 
tmp
[0] = 'y';

949 
	`wrôe
(
a
, 
tmp
, 1);

950 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

951 
	`TÆkög
(
a
);

952 
	`˛o£
(
a
);

956 
uöfo
.
mode
 = 
CLIENT
;

957 
ifPass
)

958 
	`upd©e_uli°
(
cutmp
, &
uöfo
);

960 
	}
}

964 
	$¥öt‰õnd
(
uíç
)

965 
USER_INFO
 *
uíç
;

967 
uíç
->
pid
 < 2)

969 
uíç
->
u£rid
[0] == '\0')

971 
curu£r
.
u£æevñ
 < 
PERM_CLOAK
 && 
uíç
->
övisibÀ
)

974 
	`cmp_¨øy
(&
‰õnd_ˇche
, 
uíç
->
u£rid
) == 1)

976 
	`öë_¥ötf
("%s\t%s\t%c\t%s\t%s\r\n",

977 
uíç
->
u£rid
,

978 
uíç
->
‰om
,

979 
	`∑gîch¨
(
curu£r
.
u£rid
, 
uíç
->u£rid, uíç->
∑gî
),

980 
	`mode°rög
(
uíç
, 1),

981 
uíç
->
u£∫ame
);

984 
	}
}

991 
	$DoLi°O∆öeFrõnd
()

993 
	`mÆloc_¨øy
(&
‰õnd_ˇche
, 
ufûe_ovîrides
);

994 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

995 
	`≠∂y_uli°
(
¥öt‰õnd
);

996 
	`öë_¥ötf
(".\r\n");

997 
	}
}

1004 
	$DoGëFrõnd
()

1006 *
cbegö
, *
˚nd
;

1008 
	`mÆloc_¨øy
(&
‰õnd_ˇche
, 
ufûe_ovîrides
);

1009 !
‰õnd_ˇche
.
size
)

1011 
	`Re•⁄dPrŸocﬁ
(
NO_FRIEND
);

1015 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

1016 
	`√t_ˇche_öô
();

1018 
cbegö
 = 
‰õnd_ˇche
.
ids
;

1019 
cbegö
 - 
‰õnd_ˇche
.
ids
 < frõnd_ˇche.
size
; cbegö = 
˚nd
 + 1)

1021 
˚nd
 = 
cbegö
; *cend; cend++)

1023 *
cbegö
)

1024 
	`√t_ˇche_¥ötf
("%s\r\n", 
cbegö
);

1027 
	`√t_ˇche_wrôe
(".\r\n", 3);

1028 
	`√t_ˇche_ª‰esh
();

1029 
	}
}

1036 
	$DoSídFrõnd
()

1038 
ãmp
[
STRLEN
];

1039 
FILE
 *
Â
;

1041 #ifde‡
GUEST


1042 !
	`°rcmp
(
curu£r
.
u£rid
, 
GUEST
))

1044 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

1049 (
Â
 = 
	`f›í
(
ufûe_ovîrides
, "w")Ë=
NULL
)

1051 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

1055 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

1058 
	`öë_gës
(
ãmp
, 
STRLEN
 - 1) < 0)

1060 
	`f˛o£
(
Â
);

1061 
	`F‹moßExô
();

1063 
ãmp
[0] == '.' &&Åemp[1] == '\0')

1065 
	`SåDñR
(
ãmp
);

1066 
ãmp
[0] !'\0' && 
	`gë_∑sswd
(
NULL
,Åemp))

1067 
	`Ârötf
(
Â
, "%s\n", 
ãmp
);

1069 
	`f˛o£
(
Â
);

1070 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

1072 
	`‰ì_¨øy
(&
‰õnd_ˇche
);

1073 
	}
}

1077 
	$t_∑gî
()

1079 
curu£r
.
Êags
[0] |= 1;

1080 
curu£r
.
Êags
[0] ^= 1;

1090 
uöfo
.
∑gî
 = 
FALSE
;

1092 
ifPass
)

1093 
	`upd©e_uli°
(
cutmp
, &
uöfo
);

1094 
	}
}

1101 
	$DoTîmOut
()

1103 
buf
[256];

1104 
sock
, 
tsock
, 
Àngth
;

1105 
sockaddr_ö
 
t£rvî
;

1106 
timevÆ
 
timeout
;

1108 
ifPass
)

1109 
	`upd©e_uli°
(
cutmp
, &
uöfo
);

1111 
	`f‹k
())

1114 
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

1115 
t£rvî
.
sö_Ámûy
 = 
AF_INET
;

1116 
t£rvî
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

1117 
t£rvî
.
sö_p‹t
 = 0;

1119 
	`böd
(
sock
, (
sockaddr
 *Ë&
t£rvî
, Åserver) < 0)

1121 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

1122 
	`exô
(1);

1125 
Àngth
 =  
t£rvî
;

1126 
	`gësock«me
(
sock
, (
sockaddr
 *Ë&
t£rvî
, &
Àngth
) < 0)

1128 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

1129 
	`exô
(1);

1132 
	`öë_¥ötf
("%d\t%d\r\n", 
TERM_PORT
, 
	`¡ohs
((
u_sh‹t
Ë
t£rvî
.
sö_p‹t
));

1134 
timeout
.
tv_£c
 = 20;

1135 
timeout
.
tv_u£c
 = 0;

1136 
	`li°í
(
sock
, 1);

1137 
tsock
 = 
	`ac˚±
(
sock
, (
sockaddr
 *) 0, (*) 0);

1138 
	`˛o£
(
sock
);

1139 
tsock
 == -1)

1141 
	`exô
(1);

1143 
	`dup2
(
tsock
, 0);

1144 
	`˛o£
(
tsock
);

1145 
	`dup2
(0, 1);

1146 
	`dup2
(0, 2);

1148 
	`•rötf
(
buf
, "bö/tsbb†0 %s", 
curu£r
.
u£rid
);

1149 
	`do_exec
(
buf
, 
NULL
);

1153 
	`öë_¥ötf
("%s\n", "This isÉrror");

1154 
	`exô
(1);

1157 
	`sig«l
(
SIGCHLD
, 
SIG_IGN
);

1159 
	}
}

	@xyz.c

2 
	~"bbs.h
"

3 
	~"csbbs.h
"

7 
	$gë_u£r_fûe
(
keyw‹d
)

8 *
keyw‹d
;

10 
buf
[
PATHLEN
];

12 
	`£thomefûe
(
buf
, 
curu£r
.
u£rid
, 
keyw‹d
);

13 
	`gë_num_ªc‹ds
(
buf
, ()) == 0)

15 
	`SídAπi˛e
(
buf
, 
TRUE
);

17 
	}
}

21 
	$£nd_u£r_fûe
(
keyw‹d
)

22 *
keyw‹d
;

24 
buf
[
PATHLEN
], 
‚ame
[PATHLEN];

26 #ifde‡
GUEST


27 !
	`°rcmp
(
curu£r
.
u£rid
, 
GUEST
))

29 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

34 
	`£thomefûe
(
buf
, 
curu£r
.
u£rid
, 
keyw‹d
);

35 
	`•rötf
(
‚ame
, "tmp/_csbbs.%s.%ld", 
curu£r
.
u£rid
, 
	`time
(0));

37 !
	`RecvAπi˛e
(
‚ame
, 
FALSE
, 
NULL
, NULL))

39 !
	`my˝
(
‚ame
, 
buf
))

41 
	`u∆ök
(
‚ame
);

42 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

46 
	`u∆ök
(
‚ame
);

47 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

48 
	}
}

52 
	$kûl_u£r_fûe
(
keyw‹d
)

53 *
keyw‹d
;

55 
buf
[
PATHLEN
];

57 
	`£thomefûe
(
buf
, 
curu£r
.
u£rid
, 
keyw‹d
);

58 
	`isfûe
(
buf
Ë&& 
	`u∆ök
(buf) == -1)

59 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

61 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

63 
	}
}

70 
	$DoGëPœn
()

72 
	`gë_u£r_fûe
(
UFNAME_PLANS
) < 0)

73 
	`Re•⁄dPrŸocﬁ
(
NO_PLAN
);

74 
	}
}

81 
	$DoKûlPœn
()

83 
	`kûl_u£r_fûe
(
UFNAME_PLANS
);

84 
	}
}

91 
	$DoSídPœn
()

93 
	`£nd_u£r_fûe
(
UFNAME_PLANS
);

94 
	}
}

101 
	$DoGëSign
()

103 
	`gë_u£r_fûe
(
UFNAME_SIGNATURES
) < 0)

104 
	`Re•⁄dPrŸocﬁ
(
NO_SIGN
);

105 
	}
}

112 
	$DoKûlSign
()

114 
	`kûl_u£r_fûe
(
UFNAME_SIGNATURES
);

115 
	}
}

122 
	$DoSídSign
()

124 
	`£nd_u£r_fûe
(
UFNAME_SIGNATURES
);

125 
	}
}

132 
	$DoCh™gePassw‹d
()

134 *
∑ssbuf
;

135 *
∑ss
;

136 *
	`gí∑sswd
();

137 
≈ass
[8];

139 #ifde‡
GUEST


140 !
	`°rcmp
(
curu£r
.
u£rid
, 
GUEST
))

142 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

148 
∑ssbuf
 = 
	`Gë_∑ø_°rög
(1);

149 
∑ssbuf
 =
NULL
 ||Öassbuf[0] == '\0')

151 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

154 
∑ssbuf
[8] = '\0';

155 
	`x°∫˝y
(
≈ass
, 
∑ssbuf
, (npass));

156 
	`chk_°r2
(
∑ssbuf
);

157 
	`°rcmp
(
∑ssbuf
, 
≈ass
))

159 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

163 
∑ss
 = 
	`gí∑sswd
(
∑ssbuf
);

164 
	`°∫˝y
(
curu£r
.
∑sswd
, 
∑ss
, 
PASSLEN
);

172 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

173 
	}
}

180 
	$DoGëU£rD©a
()

182 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

184 
	`öë_¥ötf
("%s\t%s\t",

185 (
curu£r
.
u£∫ame
[0]) ? curuser.username : "#",

186 (
curu£r
.
emaû
[0]) ? curuser.email : "#");

187 
	`öë_¥ötf
("%s\t%d\t%d\t%d\t%d\t",

188 "#", 
curu£r
.
numlogös
, curu£r.
numpo°s
,

189 
curu£r
.
u£æevñ
, curu£r.
uid
);

190 
	`öë_¥ötf
("%s\t%s\t%c\t",

191 
curu£r
.
œ°ho°
, 
	`Ctime
(&curu£r.
œ°logö
),

192 (
curu£r
.
∑gî
) ? '1' : '0');

193 
	`öë_¥ötf
("%c\t%c\r\n", 
curu£r
.
idít
 + '0',

194 (
curu£r
.
Êags
[0] & 
FORWARD_FLAG
) ? '1' : '0');

195 
	}
}

202 
	$DoCh™geU£rName
()

204 *
«me
;

206 #ifde‡
GUEST


207 !
	`°rcmp
(
curu£r
.
u£rid
, 
GUEST
))

209 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

214 
«me
 = 
	`Gë_∑ø_°rög
(1);

215 
«me
 !
NULL
)

217 
	`°r˝y
(
curu£r
.
u£∫ame
, 
«me
);

218 
	`chk_°r2
(
curu£r
.
u£∫ame
);

221 
curu£r
.
u£∫ame
[0] = '\0';

230 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

231 
	}
}

238 
	$DoCh™geEMaû
()

240 *
emaû
;

242 #ifde‡
GUEST


243 !
	`°rcmp
(
curu£r
.
u£rid
, 
GUEST
))

245 
	`Re•⁄dPrŸocﬁ
(
WORK_ERROR
);

250 
emaû
 = 
	`Gë_∑ø_°rög
(1);

251 !
emaû
)

253 
	`Re•⁄dPrŸocﬁ
(
SYNTAX_ERROR
);

256 
	`chk_°r2
(
emaû
);

258 
	`°r˝y
(
curu£r
.
emaû
,Émail);

266 
	`Re•⁄dPrŸocﬁ
(
OK_CMD
);

267 
	}
}

	@../lib/ap_board.c

3 
	gnum_brds
 = 0;

4 
	gnum_Æloc_brds
 = 0;

5 
BﬂrdLi°
 *
	gÆl_brds
 = 
NULL
;

8 
	$mÆloc_bﬂrd
(
bö‰
)

9 
bﬂrd_t
 *
bö‰
;

11 
ønk
;

13 #i‚de‡
_BBS2G4_C_


14 !
	`ˇn_£e_bﬂrd
(&(
bö‰
->
bhr
), 
curu£r
.
u£æevñ
))

17 !
	`ˇn_£e_bﬂrd
(&(
bö‰
->
bhr
), 0))

21 
num_brds
 >
num_Æloc_brds
)

23 
ønk
 = 
bö‰
->rank;

24 
ønk
 < 1 ||Ñ™k > 
num_Æloc_brds
)

27 #i‚de‡
_BBS2G4_C_


28 (
bö‰
->
bhr
.
brdty≥
 & 
BRD_UNZAP
)

29 || !(
	`Z≠RC_IsZ≠≥d
(
bö‰
->
bhr
.
bid
, bö‰->bhr.
˘ime
Ë&& (
curu£r
.
Êags
[0] & 
YANK_FLAG
)))

32 
Æl_brds
[
ønk
 - 1].
íãr_˙t
 = 0;

33 #i‚de‡
_BBS2G4_C_


34 #ifde‡
USE_VOTE


35 
Æl_brds
[
ønk
 - 1].
vŸög
 =

36 
	`is_√w_vŸe
(
bö‰
->
bhr
.
fûíame
, 
curu£r
.
œ°logö
);

39 
Æl_brds
[
ønk
 - 1].
bcur
 = 0;

40 
Æl_brds
[
ønk
 - 1].
bhr
 = &(
bö‰
->bhr);

41 
Æl_brds
[
ønk
 - 1].
bö‰
 = binfr;

43 
num_brds
++;

48 
	}
}

52 
	$Cª©eBﬂrdLi°
()

54 #i‚de‡
_BBS2G4_C_


55 
‚ame_z≠rc
[
PATHLEN
];

59 
Æl_brds
)

61 
	`‰ì
(
Æl_brds
);

62 
Æl_brds
 = 
NULL
;

64 
num_Æloc_brds
 = 
	`ªsﬁve_brdshm
();

65 
num_brds
 = 0;

66 !
Æl_brds
)

68 (
Æl_brds
 = (
BﬂrdLi°
 *Ë
	`ˇŒoc
(1, (BoardList) *

69 
num_Æloc_brds
)Ë=
NULL
)

71  
num_brds
;

75 #i‚de‡
_BBS2G4_C_


76 
	`£thomefûe
(
‚ame_z≠rc
, 
curu£r
.
u£rid
, 
UFNAME_ZAPRC
);

77 
	`Z≠RC_Inô
(
‚ame_z≠rc
);

80 
	`≠∂y_brdshm_bﬂrd_t
(
mÆloc_bﬂrd
);

82 
	`qs‹t
(
Æl_brds
, 
num_brds
, (
BﬂrdLi°
), 
cmp_b«me
);

85 
i
, 
j
;

87 
i
 = 0; i < 
num_brds
; i++)

89 !
Æl_brds
[
i
].
bhr
)

91 
j
 = 
i
; j < 
MAXBOARD
; j++)

93 
Æl_brds
[
j
].
bhr
)

95 
	`mem˝y
(&(
Æl_brds
[
i
]), &◊Œ_brds[
j
]), (
BﬂrdLi°
));

96 
	`mem£t
(&(
Æl_brds
[
j
]), 0, (
BﬂrdLi°
));

107 
curbe
 = &(
Æl_brds
[0]);

108 
CurBLi°
 = 
Æl_brds
[0].
bhr
;

111  
num_brds
;

112 
	}
}

116 
	$cmp_b«me
(
a
, 
b
)

117 
BﬂrdLi°
 *
a
, *
b
;

119  
	`°rˇ£cmp
(
a
->
bhr
->
fûíame
, 
b
->bhr->filename);

120 
	}
}

123 
BﬂrdLi°
 *

124 
	$SórchBﬂrdLi°
(
b«me
)

125 
b«me
[];

127 
b«me
[0])

129 
BﬂrdLi°
 *
be1
;

130 
BﬂrdLi°
 
which_be
;

131 
BOARDHEADER
 
èrgë_bh
;

133 
	`°r˝y
(
èrgë_bh
.
fûíame
, 
b«me
);

134 
	`mem£t
(&
which_be
, 0, (which_be));

135 
which_be
.
bhr
 = &
èrgë_bh
;

136 (
be1
 = (
BﬂrdLi°
 *)
	`b£¨ch
(&
which_be
, 
Æl_brds
, 
num_brds
,

137 (
BﬂrdLi°
), 
cmp_b«me
)Ë!
NULL
)

139  
be1
;

142  (
BﬂrdLi°
 *Ë
NULL
;

143 
	}
}

	@/usr/include/arpa/inet.h

31 #i‚de‡
_ARPA_INET_H


32 
	#_ARPA_INET_H


	)

34 #¥agm®
idít
 "@(#)inet.h 1.17 99/03/21 SMI"

36 
	~<sys/„©uª_ã°s.h
>

38 
	~<√töë/ö.h
>

39 #i‡
deföed
(
_XPG4_2
Ë&& !deföed(
__EXTENSIONS__
)

40 
	~<sys/byã‹dî.h
>

43 #ifdef 
__˝lu•lus


51 #ifde‡
__STDC__


52 
öë_©⁄
(c⁄° *, 
ö_addr
 *);

53 
öë_√t_±⁄
(, c⁄° *, *, 
size_t
);

54 
öë_±⁄
(, const *, *);

55 c⁄° *
öë_¡›
(, c⁄° *, *, 
size_t
);

56 
ö_addr_t
 
öë_addr
(const *);

57 
ö_addr_t
 
öë_ aof
(
ö_addr
);

58 
ö_addr
 
öë_makóddr
(
ö_addr_t
, in_addr_t);

59 
ö_addr_t
 
öë_√tof
(
ö_addr
);

60 
ö_addr_t
 
öë_√tw‹k
(const *);

61 *
öë_¡ﬂ
(
ö_addr
);

67 
size_t
 
__öë6_πhdr_•a˚
(, );

68 *
__öë6_πhdr_öô
(*, , , );

69 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

70 
__öë6_πhdr_add
(*, c⁄° 
ö6_addr
 *);

72 
__öë6_πhdr_ªvî£
(const *, *);

73 
__öë6_πhdr_£gmíts
(const *);

74 
ö6_addr
 *
__öë6_πhdr_gëaddr
(*, );

76 
öë_addr
();

77 *
öë_¡ﬂ
();

78 
ö_addr
 
öë_makóddr
();

79 
öë_√tw‹k
();

80 
öë_ aof
();

81 
öë_√tof
();

82 
öë_±⁄
();

83 c⁄° *
öë_¡›
();

84 
size_t
 
__öë6_πhdr_•a˚
();

85 *
__öë6_πhdr_öô
();

86 
__öë6_πhdr_add
();

87 
__öë6_πhdr_ªvî£
();

88 
__öë6_πhdr_£gmíts
();

89 
ö6_addr
 *
__öë6_πhdr_gëaddr
();

92 #ifdef 
__˝lu•lus


	@/usr/include/errno.h

14 #i‚de‡
_ERRNO_H


15 
	#_ERRNO_H


	)

17 #¥agm®
idít
 "@(#)errno.h 1.16 99/07/26 SMI"

23 
	~<sys/î∫o.h
>

25 #ifdef 
__˝lu•lus


29 #i‡
deföed
(
_LP64
)

36 #i‡(
deföed
(
_REENTRANT
Ë|| deföed(
_TS_ERRNO
) || \

37 
_POSIX_C_SOURCE
 - 0 >199506LË&& !(
deföed
(
löt
Ë|| 
	$deföed
(
__löt
))

38 *
	`___î∫o
();

39 
	#î∫o
 (*(
	`___î∫o
()))

	)

41 
î∫o
;

43 #i‡
__˝lu•lus
 >= 199711L

44 
	#î∫o
 
î∫o


	)

48 #ifdef 
__˝lu•lus


49 
	}
}

	@/usr/include/fcntl.h

13 #i‚def 
_FCNTL_H


14 
	#_FCNTL_H


	)

16 #¥agm®
idít
 "@(#)fcntl.h 1.14 97/12/05 SMI"

18 
	~<sys/„©uª_ã°s.h
>

19 #i‡
deföed
(
__EXTENSIONS__
) || \

20 (
deföed
(
_XOPEN_SOURCE
Ë&& (
	g_XOPEN_VERSION
 - 0 >= 4))

21 
	~<sys/°©.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<sys/f˙é.h
>

26 #ifdef 
__˝lu•lus


30 #i‡
deföed
(
__EXTENSIONS__
) || \

31 (
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >= 4))

35 #i‚def 
SEEK_SET


36 
	#SEEK_SET
 0

	)

39 #i‚def 
SEEK_CUR


40 
	#SEEK_CUR
 1

	)

43 #i‚def 
SEEK_END


44 
	#SEEK_END
 2

	)

50 #i‡!
deföed
(
_LP64
Ë&& 
_FILE_OFFSET_BITS
 == 64

51 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


52 #¥agm®
ªdeföe_exäame
 
›í
 
›í64


53 #¥agm®
ªdeföe_exäame
 
¸ót
 
¸ót64


55 
	#›í
 
›í64


	)

56 
	#¸ót
 
¸ót64


	)

60 #i‡
deföed
(
_LP64
Ë&& deföed(
_LARGEFILE64_SOURCE
)

61 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


62 #¥agma 
ªdeföe_exäame
 
›í64
 
›í


63 #¥agma 
ªdeföe_exäame
 
¸ót64
 
¸ót


65 
	#›í64
 
›í


	)

66 
	#¸ót64
 
¸ót


	)

70 #i‡
deföed
(
__STDC__
)

72 
f˙é
(, , ...);

73 
›í
(const *, , ...);

74 
¸ót
(c⁄° *, 
mode_t
);

75 #i‡
deföed
(
__EXTENSIONS__
) || \

76 (!
deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
))

77 
dúe˘io
(, );

81 #if 
deföed
(
_LARGEFILE64_SOURCE
Ë&& !((
_FILE_OFFSET_BITS
 == 64) && \

82 !
deföed
(
__PRAGMA_REDEFINE_EXTNAME
))

83 
›í64
(const *, , ...);

84 
¸ót64
(c⁄° *, 
mode_t
);

89 
f˙é
();

90 
›í
();

91 
¸ót
();

92 #i‡
deföed
(
__EXTENSIONS__
) || \

93 (!
deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
))

94 
dúe˘io
();

98 #if 
deföed
(
_LARGEFILE64_SOURCE
Ë&& !((
_FILE_OFFSET_BITS
 == 64) && \

99 !
deföed
(
__PRAGMA_REDEFINE_EXTNAME
))

100 
›í64
();

101 
¸ót64
();

106 #ifdef 
__˝lu•lus


	@/usr/include/netdb.h

90 #i‚de‡
_NETDB_H


91 
	#_NETDB_H


	)

93 #¥agm®
idít
 "@(#)netdb.h 1.23 99/12/06 SMI"

95 
	~<sys/ty≥s.h
>

96 
	~<√töë/ö.h
>

97 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

98 
	~<sys/sockë.h
>

100 
	~<sys/„©uª_ã°s.h
>

102 #ifdef 
__˝lu•lus


106 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

107 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

108 
	#_PATH_IPNODES
 "/ëc/öë/ùnodes"

	)

109 
	#_PATH_NETMASKS
 "/ëc/√tmasks"

	)

110 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

111 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

112 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

114 
	sho°ít
 {

115 *
h_«me
;

116 **
h_Æü£s
;

117 
h_addπy≥
;

118 
h_Àngth
;

119 **
h_addr_li°
;

120 
	#h_addr
 
h_addr_li°
[0]

	)

129 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

130 
	saddröfo
 {

131 
ai_Êags
;

132 
ai_Ámûy
;

133 
ai_sockty≥
;

134 
ai_¥Ÿocﬁ
;

135 
size_t
 
ai_addæí
;

136 *
ai_ˇn⁄«me
;

137 
sockaddr
 *
ai_addr
;

138 
addröfo
 *
ai_√xt
;

141 
	#AI_PASSIVE
 0x0008

	)

142 
	#AI_CANONNAME
 0x0010

	)

143 
	#AI_NUMERICHOST
 0x0020

	)

146 
	#AI_V4MAPPED
 0x0001

	)

147 
	#AI_ALL
 0x0002

	)

148 
	#AI_ADDRCONFIG
 0x0004

	)

149 
	#AI_DEFAULT
 (
AI_V4MAPPED
 | 
AI_ADDRCONFIG
)

	)

152 
	#EAI_ADDRFAMILY
 1

	)

153 
	#EAI_AGAIN
 2

	)

154 
	#EAI_BADFLAGS
 3

	)

155 
	#EAI_FAIL
 4

	)

156 
	#EAI_FAMILY
 5

	)

157 
	#EAI_MEMORY
 6

	)

158 
	#EAI_NODATA
 7

	)

159 
	#EAI_NONAME
 8

	)

160 
	#EAI_SERVICE
 9

	)

161 
	#EAI_SOCKTYPE
 10

	)

162 
	#EAI_SYSTEM
 11

	)

166 
	#NI_MAXHOST
 1025

	)

167 
	#NI_MAXSERV
 32

	)

171 
	#NI_NOFQDN
 0x0001

	)

172 
	#NI_NUMERICHOST
 0x0002

	)

173 
	#NI_NAMEREQD
 0x0004

	)

174 
	#NI_NUMERICSERV
 0x0008

	)

175 
	#NI_DGRAM
 0x0010

	)

183 
	s√ã¡
 {

184 *
n_«me
;

185 **
n_Æü£s
;

186 
n_addπy≥
;

187 
ö_addr_t
 
n_√t
;

190 
	s¥Ÿ€¡
 {

191 *
p_«me
;

192 **
p_Æü£s
;

193 
p_¥Ÿo
;

196 
	s£rvít
 {

197 *
s_«me
;

198 **
s_Æü£s
;

199 
s_p‹t
;

200 *
s_¥Ÿo
;

203 #ifdef 
__STDC__


204 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

205 
ho°ít
 *
gëho°by«me_r


206 (c⁄° *, 
ho°ít
 *, *, , *
h_î∫›
);

207 
ho°ít
 *
gëho°byaddr_r


208 (c⁄° *, , , 
ho°ít
 *, *, , *
h_î∫›
);

209 
ho°ít
 *
gëùnodeby«me
(const *, , , *);

210 
ho°ít
 *
gëùnodebyaddr
(c⁄° *, 
size_t
, , *);

211 
‰ìho°ít
(
ho°ít
 *);

212 
ho°ít
 *
gëho°ít_r
(ho°íà*, *, , *
h_î∫›
);

214 
£rvít
 *
gë£rvby«me_r


215 (c⁄° *
«me
, c⁄° *, 
£rvít
 *, *, );

216 
£rvít
 *
gë£rvbyp‹t_r


217 (
p‹t
, c⁄° *, 
£rvít
 *, *, );

218 
£rvít
 *
gë£rvít_r
(servent *, *, );

220 
√ã¡
 *
gë√tby«me_r


221 (c⁄° *, 
√ã¡
 *, *, );

222 
√ã¡
 *
gë√tbyaddr_r
(, , netent *, *, );

223 
√ã¡
 *
gë√ã¡_r
(netent *, *, );

225 
¥Ÿ€¡
 *
gë¥Ÿoby«me_r


226 (c⁄° *, 
¥Ÿ€¡
 *, *, );

227 
¥Ÿ€¡
 *
gë¥Ÿobynumbî_r


228 (, 
¥Ÿ€¡
 *, *, );

229 
¥Ÿ€¡
 *
gë¥Ÿ€¡_r
(protoent *, *, );

231 
gë√tgª¡_r
(**, **, **, *, );

232 
ö√tgr
(const *, const *, const *, const *);

236 
ho°ít
 *
gëho°by«me
(const *);

237 
ho°ít
 *
gëho°ít
();

238 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

239 
√ã¡
 *
gë√tbyaddr
(
ö_addr_t
, );

241 
√ã¡
 *
gë√tbyaddr
(
ö_addr_t
, );

243 
√ã¡
 *
gë√tby«me
(const *);

244 
√ã¡
 *
gë√ã¡
();

245 
¥Ÿ€¡
 *
gë¥Ÿoby«me
(const *);

246 
¥Ÿ€¡
 *
gë¥Ÿobynumbî
();

247 
¥Ÿ€¡
 *
gë¥Ÿ€¡
();

248 
£rvít
 *
gë£rvby«me
(const *, const *);

249 
£rvít
 *
gë£rvbyp‹t
(, const *);

250 
£rvít
 *
gë£rvít
();

252 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

253 
gë√tgª¡
(**, **, **);

254 
ho°ít
 *
gëho°byaddr
(const *, , );

256 
ho°ít
 *
gëho°byaddr
(c⁄° *, 
size_t
, );

259 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

260 
ídho°ít
();

261 
íd√ã¡
();

262 
íd¥Ÿ€¡
();

263 
íd£rvít
();

264 
£tho°ít
();

265 
£äëít
();

266 
£çrŸ€¡
();

267 
£t£rvít
();

269 
ídho°ít
();

270 
íd√ã¡
();

271 
íd¥Ÿ€¡
();

272 
íd£rvít
();

273 
£tho°ít
();

274 
£äëít
();

275 
£çrŸ€¡
();

276 
£t£rvít
();

282 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

283 
£äëgª¡
(const *);

284 
íd√tgª¡
();

285 
rcmd
(**, ,

287 
rcmd_af
(**, ,

289 
ºesvp‹t_af
(*, );

290 
ªxec
(**, ,

292 
ªxec_af
(**, ,

294 
ºesvp‹t
(*);

295 
ru£rok
(const *, , const *, const *);

297 
ho°ít
 *
gëho°by«me2
(const *, );

298 
hîr‹
(const *);

299 c⁄° *
h°ªº‹
();

303 
gëaddröfo
(const *, const *,

304 c⁄° 
addröfo
 *, addrinfo **);

305 
‰ìaddröfo
(
addröfo
 *);

306 *
gai_°ªº‹
();

307 
gë«meöfo
(c⁄° 
sockaddr
 *, 
sockÀn_t
,

308 *, 
size_t
, *, size_t, );

314 
ho°ít
 *
gëho°by«me_r
();

315 
ho°ít
 *
gëho°byaddr_r
();

316 
ho°ít
 *
gëùnodeby«me
();

317 
ho°ít
 *
gëùnodebyaddr
();

318 
‰ìho°ít
();

319 
ho°ít
 *
gëho°ít_r
();

320 
£rvít
 *
gë£rvby«me_r
();

321 
£rvít
 *
gë£rvbyp‹t_r
();

322 
£rvít
 *
gë£rvít_r
();

323 
√ã¡
 *
gë√tby«me_r
();

324 
√ã¡
 *
gë√tbyaddr_r
();

325 
√ã¡
 *
gë√ã¡_r
();

326 
¥Ÿ€¡
 *
gë¥Ÿoby«me_r
();

327 
¥Ÿ€¡
 *
gë¥Ÿobynumbî_r
();

328 
¥Ÿ€¡
 *
gë¥Ÿ€¡_r
();

329 
gë√tgª¡_r
();

330 
ö√tgr
();

333 
ho°ít
 *
gëho°by«me
();

334 
ho°ít
 *
gëho°byaddr
();

335 
ho°ít
 *
gëho°ít
();

336 
√ã¡
 *
gë√tby«me
();

337 
√ã¡
 *
gë√tbyaddr
();

338 
√ã¡
 *
gë√ã¡
();

339 
£rvít
 *
gë£rvby«me
();

340 
£rvít
 *
gë£rvbyp‹t
();

341 
£rvít
 *
gë£rvít
();

342 
¥Ÿ€¡
 *
gë¥Ÿoby«me
();

343 
¥Ÿ€¡
 *
gë¥Ÿobynumbî
();

344 
¥Ÿ€¡
 *
gë¥Ÿ€¡
();

345 
gë√tgª¡
();

347 
£tho°ít
();

348 
ídho°ít
();

349 
£äëít
();

350 
íd√ã¡
();

351 
£t£rvít
();

352 
íd£rvít
();

353 
£çrŸ€¡
();

354 
íd¥Ÿ€¡
();

355 
£äëgª¡
();

356 
íd√tgª¡
();

357 
rcmd
();

358 
rcmd_af
();

359 
ªxec
();

360 
ªxec_af
();

361 
ºesvp‹t
();

362 
ºesvp‹t_af
();

363 
ru£rok
();

365 
ho°ít
 *
gëho°by«me2
();

366 
hîr‹
();

367 *
h°ªº‹
();

369 
gëaddröfo
();

370 
‰ìaddröfo
();

371 *
gai_°ªº‹
();

372 
gë«meöfo
();

382 
h_î∫o
;

384 
	#HOST_NOT_FOUND
 1

	)

385 
	#TRY_AGAIN
 2

	)

386 
	#NO_RECOVERY
 3

	)

387 
	#NO_DATA
 4

	)

389 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

390 
	#NO_ADDRESS
 
NO_DATA


	)

393 
	#NETDB_INTERNAL
 -1

	)

394 
	#NETDB_SUCCESS
 0

	)

397 
	#MAXHOSTNAMELEN
 256

	)

399 
	#MAXALIASES
 35

	)

400 
	#MAXADDRS
 35

	)

403 #ifdef 
__˝lu•lus


	@/usr/include/netinet/in.h

27 #i‚de‡
_NETINET_IN_H


28 
	#_NETINET_IN_H


	)

30 #¥agm®
idít
 "@(#)in.h 1.26 99/10/25 SMI"

32 
	~<sys/„©uª_ã°s.h
>

34 
	~<sys/ty≥s.h
>

36 #ifdef 
__˝lu•lus


40 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

41 
	~<sys/°ªam.h
>

47 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
Ë|| deföed(
_XPG5
)

48 
	~<sys/byã‹dî.h
>

51 #i‚de‡
_IN_PORT_T


52 
	#_IN_PORT_T


	)

53 
uöt16_t
 
	tö_p‹t_t
;

67 #i‚de‡
_IN_ADDR_T


68 
	#_IN_ADDR_T


	)

69 
uöt32_t
 
	tö_addr_t
;

72 #i‚de‡
_IPADDR_T


73 
	#_IPADDR_T


	)

74 
uöt32_t
 
	tùaddr_t
;

77 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

79 
	sö6_addr
 {

80 
	u
{

92 #ifde‡
_KERNEL


93 
uöt32_t
 
	m_S6_u32
[4];

94 
uöt8_t
 
	m_S6_u8
[16];

96 
uöt8_t
 
	m_S6_u8
[16];

97 
uöt32_t
 
	m_S6_u32
[4];

99 
uöt32_t
 
	m__S6_Æign
;

100 } 
	m_S6_un
;

102 
	#s6_addr
 
_S6_un
.
_S6_u8


	)

104 #ifde‡
_KERNEL


105 
	#s6_addr8
 
_S6_un
.
_S6_u8


	)

106 
	#s6_addr32
 
_S6_un
.
_S6_u32


	)

109 
ö6_addr
 
	tö6_addr_t
;

113 #i‚de‡
_SA_FAMILY_T


114 
	#_SA_FAMILY_T


	)

115 
	tß_Ámûy_t
;

121 
	#IPPROTO_IP
 0

	)

122 
	#IPPROTO_HOPOPTS
 0

	)

123 
	#IPPROTO_ICMP
 1

	)

124 
	#IPPROTO_IGMP
 2

	)

125 
	#IPPROTO_GGP
 3

	)

126 
	#IPPROTO_ENCAP
 4

	)

127 
	#IPPROTO_TCP
 6

	)

128 
	#IPPROTO_EGP
 8

	)

129 
	#IPPROTO_PUP
 12

	)

130 
	#IPPROTO_UDP
 17

	)

131 
	#IPPROTO_IDP
 22

	)

132 
	#IPPROTO_IPV6
 41

	)

133 
	#IPPROTO_ROUTING
 43

	)

134 
	#IPPROTO_FRAGMENT
 44

	)

135 
	#IPPROTO_RSVP
 46

	)

136 
	#IPPROTO_ESP
 50

	)

137 
	#IPPROTO_AH
 51

	)

138 
	#IPPROTO_ICMPV6
 58

	)

139 
	#IPPROTO_NONE
 59

	)

140 
	#IPPROTO_DSTOPTS
 60

	)

141 
	#IPPROTO_HELLO
 63

	)

142 
	#IPPROTO_ND
 77

	)

143 
	#IPPROTO_EON
 80

	)

144 
	#IPPROTO_PIM
 103

	)

146 
	#IPPROTO_RAW
 255

	)

147 
	#IPPROTO_MAX
 256

	)

152 
	#IPPORT_ECHO
 7

	)

153 
	#IPPORT_DISCARD
 9

	)

154 
	#IPPORT_SYSTAT
 11

	)

155 
	#IPPORT_DAYTIME
 13

	)

156 
	#IPPORT_NETSTAT
 15

	)

157 
	#IPPORT_FTP
 21

	)

158 
	#IPPORT_TELNET
 23

	)

159 
	#IPPORT_SMTP
 25

	)

160 
	#IPPORT_TIMESERVER
 37

	)

161 
	#IPPORT_NAMESERVER
 42

	)

162 
	#IPPORT_WHOIS
 43

	)

163 
	#IPPORT_MTP
 57

	)

168 
	#IPPORT_BOOTPS
 67

	)

169 
	#IPPORT_BOOTPC
 68

	)

170 
	#IPPORT_TFTP
 69

	)

171 
	#IPPORT_RJE
 77

	)

172 
	#IPPORT_FINGER
 79

	)

173 
	#IPPORT_TTYLINK
 87

	)

174 
	#IPPORT_SUPDUP
 95

	)

179 
	#IPPORT_EXECSERVER
 512

	)

180 
	#IPPORT_LOGINSERVER
 513

	)

181 
	#IPPORT_CMDSERVER
 514

	)

182 
	#IPPORT_EFSSERVER
 520

	)

187 
	#IPPORT_BIFFUDP
 512

	)

188 
	#IPPORT_WHOSERVER
 513

	)

189 
	#IPPORT_ROUTESERVER
 520

	)

197 
	#IPPORT_RESERVED
 1024

	)

198 
	#IPPORT_USERRESERVED
 5000

	)

203 
	#IMPLINK_IP
 155

	)

204 
	#IMPLINK_LOWEXPER
 156

	)

205 
	#IMPLINK_HIGHEXPER
 158

	)

215 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

216 
	#_S_un_b
 
S_un_b


	)

217 
	#_S_un_w
 
S_un_w


	)

218 
	#_S_addr
 
S_addr


	)

219 
	#_S_un
 
S_un


	)

222 
	sö_addr
 {

223 
	u
{

224 
	s
{ 
uöt8_t
 
	gs_b1
, 
	gs_b2
, 
	gs_b3
, 
	gs_b4
; } 
	g_S_un_b
;

225 
	s
{ 
uöt16_t
 
	gs_w1
, 
	gs_w2
; } 
	g_S_un_w
;

226 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

227 
uöt32_t
 
	g_S_addr
;

229 
ö_addr_t
 
	g_S_addr
;

231 } 
	g_S_un
;

232 
	#s_addr
 
_S_un
.
_S_addr


	)

233 
	#s_ho°
 
_S_un
.
_S_un_b
.
s_b2


	)

234 
	#s_√t
 
_S_un
.
_S_un_b
.
s_b1


	)

235 
	#s_imp
 
_S_un
.
_S_un_w
.
s_w2


	)

236 
	#s_im≤o
 
_S_un
.
_S_un_b
.
s_b4


	)

237 
	#s_lh
 
_S_un
.
_S_un_b
.
s_b3


	)

245 
	#IN_CLASSA
(
i
) (((iË& 0x80000000UË=0)

	)

246 
	#IN_CLASSA_NET
 0xff000000U

	)

247 
	#IN_CLASSA_NSHIFT
 24

	)

248 
	#IN_CLASSA_HOST
 0x00ffffffU

	)

249 
	#IN_CLASSA_MAX
 128

	)

251 
	#IN_CLASSB
(
i
) (((iË& 0xc0000000UË=0x80000000U)

	)

252 
	#IN_CLASSB_NET
 0xffff0000U

	)

253 
	#IN_CLASSB_NSHIFT
 16

	)

254 
	#IN_CLASSB_HOST
 0x0000ffffU

	)

255 
	#IN_CLASSB_MAX
 65536

	)

257 
	#IN_CLASSC
(
i
) (((iË& 0xe0000000UË=0xc0000000U)

	)

258 
	#IN_CLASSC_NET
 0xffffff00U

	)

259 
	#IN_CLASSC_NSHIFT
 8

	)

260 
	#IN_CLASSC_HOST
 0x000000ffU

	)

262 
	#IN_CLASSD
(
i
) (((iË& 0xf0000000UË=0xe0000000U)

	)

263 
	#IN_CLASSD_NET
 0xf0000000U

	)

264 
	#IN_CLASSD_NSHIFT
 28

	)

265 
	#IN_CLASSD_HOST
 0x0fffffffU

	)

266 
	#IN_MULTICAST
(
i
) 
	`IN_CLASSD
(i)

	)

268 
	#IN_EXPERIMENTAL
(
i
) (((iË& 0xe0000000UË=0xe0000000U)

	)

269 
	#IN_BADCLASS
(
i
) (((iË& 0xf0000000UË=0xf0000000U)

	)

271 
	#INADDR_ANY
 0x00000000U

	)

272 
	#INADDR_LOOPBACK
 0x7F000001U

	)

273 
	#INADDR_BROADCAST
 0xffffffffU

	)

275 
	#INADDR_UNSPEC_GROUP
 0xe0000000U

	)

276 
	#INADDR_ALLHOSTS_GROUP
 0xe0000001U

	)

277 
	#INADDR_ALLRTRS_GROUP
 0xe0000002U

	)

278 
	#INADDR_MAX_LOCAL_GROUP
 0xe00000ffU

	)

280 
	#IN_LOOPBACKNET
 127

	)

285 #i‡!
deföed
(
_XPG4_2
Ë|| !deföed(
__EXTENSIONS__
)

286 
	#IN_SET_LOOPBACK_ADDR
(
a
) \

287 { (
a
)->
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_LOOPBACK
); \

288 (
a
)->
sö_Ámûy
 = 
AF_INET
; }

	)

294 
	ssockaddr_ö
 {

295 
ß_Ámûy_t
 
	gsö_Ámûy
;

296 
ö_p‹t_t
 
	gsö_p‹t
;

297 
ö_addr
 
	gsö_addr
;

298 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

299 
	gsö_zîo
[8];

301 
	gsö_zîo
[8];

305 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

309 
	ssockaddr_ö6
 {

310 
ß_Ámûy_t
 
	gsö6_Ámûy
;

311 
ö_p‹t_t
 
	gsö6_p‹t
;

312 
uöt32_t
 
	gsö6_Êowöfo
;

313 
ö6_addr
 
	gsö6_addr
;

314 
uöt32_t
 
	gsö6_sc›e_id
;

315 
uöt32_t
 
	g__sö6_§c_id
;

323 #ifde‡
_BIG_ENDIAN


326 
	#IPV6_FLOWINFO_FLOWLABEL
 0x000fffffU

	)

327 
	#IPV6_FLOWINFO_TCLASS
 0x0ff00000U

	)

332 
	#IPV6_FLOWINFO_FLOWLABEL
 0xffff0f00U

	)

333 
	#IPV6_FLOWINFO_TCLASS
 0x0000f00fU

	)

348 #ifde‡
_KERNEL


349 
	#IN6ADDR_ANY_INIT
 { 0, 0, 0, 0 }

	)

351 #ifde‡
_BIG_ENDIAN


352 
	#IN6ADDR_LOOPBACK_INIT
 { 0, 0, 0, 0x00000001U }

	)

354 
	#IN6ADDR_LOOPBACK_INIT
 { 0, 0, 0, 0x01000000U }

	)

359 
	#IN6ADDR_ANY_INIT
 { 0, 0, 0, 0, \

362 0, 0, 0, 0 }

	)

364 
	#IN6ADDR_LOOPBACK_INIT
 { 0, 0, 0, 0, \

367 0, 0, 0, 0x1U }

	)

400 
	#IN6_IS_ADDR_UNSPECIFIED
(
addr
) \

401 (((
addr
)->
_S6_un
.
_S6_u32
[3] == 0) && \

402 ((
addr
)->
_S6_un
.
_S6_u32
[2] == 0) && \

403 ((
addr
)->
_S6_un
.
_S6_u32
[1] == 0) && \

404 ((
addr
)->
_S6_un
.
_S6_u32
[0] =0))

	)

406 #ifde‡
_BIG_ENDIAN


407 
	#IN6_IS_ADDR_LOOPBACK
(
addr
) \

408 (((
addr
)->
_S6_un
.
_S6_u32
[3] == 0x00000001) && \

409 ((
addr
)->
_S6_un
.
_S6_u32
[2] == 0) && \

410 ((
addr
)->
_S6_un
.
_S6_u32
[1] == 0) && \

411 ((
addr
)->
_S6_un
.
_S6_u32
[0] =0))

	)

413 
	#IN6_IS_ADDR_LOOPBACK
(
addr
) \

414 (((
addr
)->
_S6_un
.
_S6_u32
[3] == 0x01000000) && \

415 ((
addr
)->
_S6_un
.
_S6_u32
[2] == 0) && \

416 ((
addr
)->
_S6_un
.
_S6_u32
[1] == 0) && \

417 ((
addr
)->
_S6_un
.
_S6_u32
[0] =0))

	)

420 #ifde‡
_BIG_ENDIAN


421 
	#IN6_IS_ADDR_MULTICAST
(
addr
) \

422 (((
addr
)->
_S6_un
.
_S6_u32
[0] & 0xff000000Ë=0xff000000)

	)

424 
	#IN6_IS_ADDR_MULTICAST
(
addr
) \

425 (((
addr
)->
_S6_un
.
_S6_u32
[0] & 0x000000ffË=0x000000ff)

	)

428 #ifde‡
_BIG_ENDIAN


429 
	#IN6_IS_ADDR_LINKLOCAL
(
addr
) \

430 (((
addr
)->
_S6_un
.
_S6_u32
[0] & 0xffc00000Ë=0x„800000)

	)

432 
	#IN6_IS_ADDR_LINKLOCAL
(
addr
) \

433 (((
addr
)->
_S6_un
.
_S6_u32
[0] & 0x0000c0ffË=0x000080„)

	)

436 #ifde‡
_BIG_ENDIAN


437 
	#IN6_IS_ADDR_SITELOCAL
(
addr
) \

438 (((
addr
)->
_S6_un
.
_S6_u32
[0] & 0xffc00000Ë=0x„c00000)

	)

440 
	#IN6_IS_ADDR_SITELOCAL
(
addr
) \

441 (((
addr
)->
_S6_un
.
_S6_u32
[0] & 0x0000c0ffË=0x0000c0„)

	)

444 #ifde‡
_BIG_ENDIAN


445 
	#IN6_IS_ADDR_V4MAPPED
(
addr
) \

446 (((
addr
)->
_S6_un
.
_S6_u32
[2] == 0x0000ffff) && \

447 ((
addr
)->
_S6_un
.
_S6_u32
[1] == 0) && \

448 ((
addr
)->
_S6_un
.
_S6_u32
[0] =0))

	)

450 
	#IN6_IS_ADDR_V4MAPPED
(
addr
) \

451 (((
addr
)->
_S6_un
.
_S6_u32
[2] == 0xffff0000U) && \

452 ((
addr
)->
_S6_un
.
_S6_u32
[1] == 0) && \

453 ((
addr
)->
_S6_un
.
_S6_u32
[0] =0))

	)

461 #ifde‡
_BIG_ENDIAN


462 
	#IN6_IS_ADDR_V4MAPPED_ANY
(
addr
) \

463 (((
addr
)->
_S6_un
.
_S6_u32
[3] == 0) && \

464 ((
addr
)->
_S6_un
.
_S6_u32
[2] == 0x0000ffff) && \

465 ((
addr
)->
_S6_un
.
_S6_u32
[1] == 0) && \

466 ((
addr
)->
_S6_un
.
_S6_u32
[0] =0))

	)

468 
	#IN6_IS_ADDR_V4MAPPED_ANY
(
addr
) \

469 (((
addr
)->
_S6_un
.
_S6_u32
[3] == 0) && \

470 ((
addr
)->
_S6_un
.
_S6_u32
[2] == 0xffff0000U) && \

471 ((
addr
)->
_S6_un
.
_S6_u32
[1] == 0) && \

472 ((
addr
)->
_S6_un
.
_S6_u32
[0] =0))

	)

476 #ifde‡
_BIG_ENDIAN


477 
	#IN6_IS_ADDR_V4COMPAT
(
addr
) \

478 (((
addr
)->
_S6_un
.
_S6_u32
[2] == 0) && \

479 ((
addr
)->
_S6_un
.
_S6_u32
[1] == 0) && \

480 ((
addr
)->
_S6_un
.
_S6_u32
[0] == 0) && \

481 !((
addr
)->
_S6_un
.
_S6_u32
[3] == 0) && \

482 !((
addr
)->
_S6_un
.
_S6_u32
[3] =0x00000001))

	)

485 
	#IN6_IS_ADDR_V4COMPAT
(
addr
) \

486 (((
addr
)->
_S6_un
.
_S6_u32
[2] == 0) && \

487 ((
addr
)->
_S6_un
.
_S6_u32
[1] == 0) && \

488 ((
addr
)->
_S6_un
.
_S6_u32
[0] == 0) && \

489 !((
addr
)->
_S6_un
.
_S6_u32
[3] == 0) && \

490 !((
addr
)->
_S6_un
.
_S6_u32
[3] =0x01000000))

	)

499 #ifde‡
_BIG_ENDIAN


500 
	#IN6_IS_ADDR_MC_RESERVED
(
addr
) \

501 (((
addr
)->
_S6_un
.
_S6_u32
[0] & 0xff0f0000Ë=0xff000000)

	)

504 
	#IN6_IS_ADDR_MC_RESERVED
(
addr
) \

505 (((
addr
)->
_S6_un
.
_S6_u32
[0] & 0x00000fffË=0x000000ff)

	)

508 #ifde‡
_BIG_ENDIAN


509 
	#IN6_IS_ADDR_MC_NODELOCAL
(
addr
) \

510 (((
addr
)->
_S6_un
.
_S6_u32
[0] & 0xff0f0000Ë=0xff010000)

	)

512 
	#IN6_IS_ADDR_MC_NODELOCAL
(
addr
) \

513 (((
addr
)->
_S6_un
.
_S6_u32
[0] & 0x00000fffË=0x000001ff)

	)

516 #ifde‡
_BIG_ENDIAN


517 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
addr
) \

518 (((
addr
)->
_S6_un
.
_S6_u32
[0] & 0xff0f0000Ë=0xff020000)

	)

520 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
addr
) \

521 (((
addr
)->
_S6_un
.
_S6_u32
[0] & 0x00000fffË=0x000002ff)

	)

524 #ifde‡
_BIG_ENDIAN


525 
	#IN6_IS_ADDR_MC_SITELOCAL
(
addr
) \

526 (((
addr
)->
_S6_un
.
_S6_u32
[0] & 0xff0f0000Ë=0xff050000)

	)

528 
	#IN6_IS_ADDR_MC_SITELOCAL
(
addr
) \

529 (((
addr
)->
_S6_un
.
_S6_u32
[0] & 0x00000fffË=0x000005ff)

	)

532 #ifde‡
_BIG_ENDIAN


533 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
addr
) \

534 (((
addr
)->
_S6_un
.
_S6_u32
[0] & 0xff0f0000Ë=0xff080000)

	)

536 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
addr
) \

537 (((
addr
)->
_S6_un
.
_S6_u32
[0] & 0x00000fffË=0x000008ff)

	)

540 #ifde‡
_BIG_ENDIAN


541 
	#IN6_IS_ADDR_MC_GLOBAL
(
addr
) \

542 (((
addr
)->
_S6_un
.
_S6_u32
[0] & 0xff0f0000Ë=0xff0e0000)

	)

544 
	#IN6_IS_ADDR_MC_GLOBAL
(
addr
) \

545 (((
addr
)->
_S6_un
.
_S6_u32
[0] & 0x00000fffË=0x00000eff)

	)

567 
	#IN6_V4MAPPED_TO_INADDR
(
v6
, 
v4
) \

568 ((
v4
)->
s_addr
 = (
v6
)->
_S6_un
.
_S6_u32
[3])

	)

569 
	#IN6_V4MAPPED_TO_IPADDR
(
v6
, 
v4
) \

570 ((
v4
Ë(
v6
)->
_S6_un
.
_S6_u32
[3])

	)

585 #ifde‡
_BIG_ENDIAN


586 
	#IN6_INADDR_TO_V4MAPPED
(
v4
, 
v6
) \

587 ((
v6
)->
_S6_un
.
_S6_u32
[3] = (
v4
)->
s_addr
, \

588 (
v6
)->
_S6_un
.
_S6_u32
[2] = 0x0000ffff, \

589 (
v6
)->
_S6_un
.
_S6_u32
[1] = 0, \

590 (
v6
)->
_S6_un
.
_S6_u32
[0] = 0)

	)

591 
	#IN6_IPADDR_TO_V4MAPPED
(
v4
, 
v6
) \

592 ((
v6
)->
_S6_un
.
_S6_u32
[3] = (
v4
), \

593 (
v6
)->
_S6_un
.
_S6_u32
[2] = 0x0000ffff, \

594 (
v6
)->
_S6_un
.
_S6_u32
[1] = 0, \

595 (
v6
)->
_S6_un
.
_S6_u32
[0] = 0)

	)

597 
	#IN6_INADDR_TO_V4MAPPED
(
v4
, 
v6
) \

598 ((
v6
)->
_S6_un
.
_S6_u32
[3] = (
v4
)->
s_addr
, \

599 (
v6
)->
_S6_un
.
_S6_u32
[2] = 0xffff0000U, \

600 (
v6
)->
_S6_un
.
_S6_u32
[1] = 0, \

601 (
v6
)->
_S6_un
.
_S6_u32
[0] = 0)

	)

602 
	#IN6_IPADDR_TO_V4MAPPED
(
v4
, 
v6
) \

603 ((
v6
)->
_S6_un
.
_S6_u32
[3] = (
v4
), \

604 (
v6
)->
_S6_un
.
_S6_u32
[2] = 0xffff0000U, \

605 (
v6
)->
_S6_un
.
_S6_u32
[1] = 0, \

606 (
v6
)->
_S6_un
.
_S6_u32
[0] = 0)

	)

619 
	#IN6_ARE_ADDR_EQUAL
(
addr1
, 
addr2
) \

620 (((
addr1
)->
_S6_un
.
_S6_u32
[3] =(
addr2
)->_S6_un._S6_u32[3]) && \

621 ((
addr1
)->
_S6_un
.
_S6_u32
[2] =(
addr2
)->_S6_un._S6_u32[2]) && \

622 ((
addr1
)->
_S6_un
.
_S6_u32
[1] =(
addr2
)->_S6_un._S6_u32[1]) && \

623 ((
addr1
)->
_S6_un
.
_S6_u32
[0] =(
addr2
)->_S6_un._S6_u32[0]))

	)

636 #i‚de‡
IP_OPTIONS


637 
	#IP_OPTIONS
 1

	)

640 
	#IP_HDRINCL
 2

	)

642 #i‚de‡
IP_TOS


643 
	#IP_TOS
 3

	)

646 #i‚de‡
IP_TTL


647 
	#IP_TTL
 4

	)

650 
	#IP_RECVOPTS
 5

	)

651 
	#IP_RECVRETOPTS
 6

	)

652 
	#IP_RECVDSTADDR
 7

	)

653 
	#IP_RETOPTS
 8

	)

654 
	#IP_MULTICAST_IF
 0x10

	)

655 
	#IP_MULTICAST_TTL
 0x11

	)

656 
	#IP_MULTICAST_LOOP
 0x12

	)

657 
	#IP_ADD_MEMBERSHIP
 0x13

	)

658 
	#IP_DROP_MEMBERSHIP
 0x14

	)

660 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

664 
	#IP_SEC_OPT
 0x22

	)

665 
	#IPSEC_PREF_NEVER
 0x01

	)

666 
	#IPSEC_PREF_REQUIRED
 0x02

	)

667 
	#IPSEC_PREF_UNIQUE
 0x04

	)

674 
	sù£c_ªq
 {

675 
uöt_t
 
	gù§_ah_ªq
;

676 
uöt_t
 
	gù§_e•_ªq
;

677 
uöt_t
 
	gù§_£lf_íˇp_ªq
;

678 
uöt8_t
 
	gù§_auth_Æg
;

679 
uöt8_t
 
	gù§_e•_Æg
;

680 
uöt8_t
 
	gù§_e•_auth_Æg
;

681 } 
	tù£c_ªq_t
;

687 
	#IP_ADD_PROXY_ADDR
 0x40

	)

688 
	#IP_BOUND_IF
 0x41

	)

689 
	#IP_UNSPEC_SRC
 0x42

	)

694 #i‚de‡
IP_REUSEADDR


695 
	#IP_REUSEADDR
 0x104

	)

698 #i‚de‡
IP_DONTROUTE


699 
	#IP_DONTROUTE
 0x105

	)

702 #i‚de‡
IP_BROADCAST


703 
	#IP_BROADCAST
 0x106

	)

717 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

718 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

720 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

724 
	sù_mªq
 {

725 
ö_addr
 
	gimr_mu…üddr
;

726 
ö_addr
 
	gimr_öãrÁ˚
;

733 
	sùv6_mªq
 {

734 
ö6_addr
 
	gùv6mr_mu…üddr
;

735 
	gùv6mr_öãrÁ˚
;

741 
	sö6_pktöfo
 {

742 
ö6_addr
 
	gùi6_addr
;

743 
	gùi6_ifödex
;

749 
	#IPV6_RTHDR_TYPE_0
 0

	)

758 
	s
{

759 
ö_addr
 
	gö_¥efix_addr
;

760 
	gö_¥efix_Àn
;

761 } 
	tö_¥efix_t
;

763 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

767 
	#IPV6_UNICAST_HOPS
 0x5

	)

770 
	#IPV6_MULTICAST_IF
 0x6

	)

773 
	#IPV6_MULTICAST_HOPS
 0x7

	)

776 
	#IPV6_MULTICAST_LOOP
 0x8

	)

779 
	#IPV6_JOIN_GROUP
 0x9

	)

781 
	#IPV6_LEAVE_GROUP
 0xa

	)

788 
	#IPV6_ADD_MEMBERSHIP
 0x9

	)

790 
	#IPV6_DROP_MEMBERSHIP
 0xa

	)

793 
	#IPV6_PKTINFO
 0xb

	)

795 
	#IPV6_HOPLIMIT
 0xc

	)

796 
	#IPV6_NEXTHOP
 0xd

	)

797 
	#IPV6_HOPOPTS
 0xe

	)

798 
	#IPV6_DSTOPTS
 0xf

	)

800 
	#IPV6_RTHDR
 0x10

	)

801 
	#IPV6_RTHDRDSTOPTS
 0x11

	)

803 
	#IPV6_RECVPKTINFO
 0x12

	)

804 
	#IPV6_RECVHOPLIMIT
 0x13

	)

805 
	#IPV6_RECVHOPOPTS
 0x14

	)

806 
	#IPV6_RECVDSTOPTS
 0x15

	)

807 
	#IPV6_RECVRTHDR
 0x16

	)

808 
	#IPV6_RECVRTHDRDSTOPTS
 0x17

	)

810 
	#IPV6_CHECKSUM
 0x18

	)

815 
	#IPV6_BOUND_IF
 0x41

	)

816 
	#IPV6_UNSPEC_SRC
 0x42

	)

822 
	#INET_ADDRSTRLEN
 16

	)

824 
	#INET6_ADDRSTRLEN
 46

	)

826 
	#IPV6_PAD1_OPT
 0

	)

833 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

834 #i‚de‡
_KERNEL


835 c⁄° 
ö6_addr
 
ö6addr_™y
;

836 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

840 #ifdef 
__˝lu•lus


	@/usr/include/pwd.h

13 #i‚de‡
_PWD_H


14 
	#_PWD_H


	)

16 #¥agm®
idít
 "@(#)pwd.h 1.19 96/03/12 SMI"

18 
	~<sys/„©uª_ã°s.h
>

20 
	~<sys/ty≥s.h
>

22 #i‡
deföed
(
__EXTENSIONS__
) || \

23 (!
deföed
(
_POSIX_C_SOURCE
Ë&& !
	$deföed
(
_XOPEN_SOURCE
))

24 
	~<°dio.h
>

27 #ifdef 
__˝lu•lus


31 
	s∑sswd
 {

32 *
pw_«me
;

33 *
pw_∑sswd
;

34 
uid_t
 
pw_uid
;

35 
gid_t
 
pw_gid
;

36 *
pw_age
;

37 *
pw_commít
;

38 *
pw_gecos
;

39 *
pw_dú
;

40 *
pw_shñl
;

43 #i‡
	`deföed
(
__EXTENSIONS__
) || \

44 (!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
))

45 
	scommít
 {

46 *
c_dït
;

47 *
c_«me
;

48 *
c_ac˘
;

49 *
c_bö
;

53 #i‡
	`deföed
(
__STDC__
)

55 
∑sswd
 *
	`gëpwuid
(
uid_t
);

56 
∑sswd
 *
	`gëpw«m
(const *);

58 #i‡
	`deföed
(
__EXTENSIONS__
) || \

59 (!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
))

60 
∑sswd
 *
	`gëpwít_r
(passwd *, *, );

61 
∑sswd
 *
	`fgëpwít_r
(
FILE
 *, passwd *, *, );

62 
∑sswd
 *
	`fgëpwít
(
FILE
 *);

63 
	`puçwít
(c⁄° 
∑sswd
 *, 
FILE
 *);

66 #i‡
	`deföed
(
__EXTENSIONS__
) || \

67 (!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

68 
	`deföed
(
_XPG4_2
)

69 
	`ídpwít
();

70 
∑sswd
 *
	`gëpwít
();

71 
	`£çwít
();

76 
∑sswd
 *
	`gëpwuid
();

77 
∑sswd
 *
	`gëpw«m
();

79 #i‡
	`deföed
(
__EXTENSIONS__
) || \

80 (!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
))

81 
∑sswd
 *
	`gëpwít_r
();

82 
∑sswd
 *
	`fgëpwít_r
();

84 
∑sswd
 *
	`fgëpwít
();

85 
	`puçwít
();

88 #i‡
	`deföed
(
__EXTENSIONS__
) || \

89 (!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

90 
	`deföed
(
_XPG4_2
)

91 
	`ídpwít
();

92 
∑sswd
 *
	`gëpwít
();

93 
	`£çwít
();

132 #if 
	`deföed
(
__EXTENSIONS__
) || \

133 (!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

134 (
_POSIX_C_SOURCE
 - 0 >199506LË|| 
	`deföed
(
_POSIX_PTHREAD_SEMANTICS
)

136 #if 
	`deföed
(
__STDC__
)

138 #if (
_POSIX_C_SOURCE
 - 0 >199506LË|| 
	`deföed
(
_POSIX_PTHREAD_SEMANTICS
)

140 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


141 
	`gëpwuid_r
(
uid_t
, 
∑sswd
 *, *, , passwd **);

142 
	`gëpw«m_r
(c⁄° *, 
∑sswd
 *, *,

143 , 
∑sswd
 **);

144 #¥agm®
ªdeföe_exäame
 
gëpwuid_r
 
__posix_gëpwuid_r


145 #¥agm®
ªdeföe_exäame
 
gëpw«m_r
 
__posix_gëpw«m_r


149 
	`gëpwuid_r
(
uid_t
 
__uid
, 
∑sswd
 *
__pwd
, *
__buf
, 
__Àn
,

150 
∑sswd
 **
__ªs
)

152 
	`__posix_gëpwuid_r
(
uid_t
, 
∑sswd
 *, *, ,

153 
∑sswd
 **);

154  (
	`__posix_gëpwuid_r
(
__uid
, 
__pwd
, 
__buf
, 
__Àn
, 
__ªs
));

157 
	`gëpw«m_r
(c⁄° *
__cb
, 
∑sswd
 *
__pwd
, *
__buf
, 
__Àn
,

158 
∑sswd
 **
__ªs
)

160 
	`__posix_gëpw«m_r
(c⁄° *, 
∑sswd
 *, *,

161 , 
∑sswd
 **);

162  (
	`__posix_gëpw«m_r
(
__cb
, 
__pwd
, 
__buf
, 
__Àn
, 
__ªs
));

168 
∑sswd
 *
	`gëpwuid_r
(
uid_t
, passwd *, *, );

169 
∑sswd
 *
	`gëpw«m_r
(const *, passwd *, *, );

175 #if (
_POSIX_C_SOURCE
 - 0 >199506LË|| 
	`deföed
(
_POSIX_PTHREAD_SEMANTICS
)

177 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


178 
	`gëpwuid_r
();

179 
	`gëpw«m_r
();

180 #¥agm®
ªdeföe_exäame
 
gëpwuid_r
 
__posix_gëpwuid_r


181 #¥agm®
ªdeföe_exäame
 
gëpw«m_r
 
__posix_gëpw«m_r


185 
	`gëpwuid_r
(
__uid
, 
__pwd
, 
__buf
, 
__Àn
, 
__ªs
)

186 
uid_t
 
__uid
;

187 
∑sswd
 *
__pwd
;

188 *
__buf
;

189 
__Àn
;

190 
∑sswd
 **
__ªs
;

192 
	`__posix_gëpwuid_r
();

193  (
	`__posix_gëpwuid_r
(
__uid
, 
__pwd
, 
__buf
, 
__Àn
, 
__ªs
));

196 
	`gëpw«m_r
(
__cb
, 
__pwd
, 
__buf
, 
__Àn
, 
__ªs
)

197 *
__cb
;

198 
∑sswd
 *
__pwd
;

199 *
__buf
;

200 
__Àn
;

201 
∑sswd
 **
__ªs
;

203 
	`__posix_gëpw«m_r
();

204  (
	`__posix_gëpw«m_r
(
__cb
, 
__pwd
, 
__buf
, 
__Àn
, 
__ªs
));

210 
∑sswd
 *
	`gëpwuid_r
();

211 
∑sswd
 *
	`gëpw«m_r
();

219 #ifdef 
__˝lu•lus


220 
	}
}

	@/usr/include/signal.h

14 #i‚de‡
_SIGNAL_H


15 
	#_SIGNAL_H


	)

17 #¥agm®
idít
 "@(#)signal.h 1.38 99/08/10 SMI"

19 
	~<sys/„©uª_ã°s.h
>

21 #i‡
deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 == 0 || \

22 
deföed
(
_POSIX_C_SOURCE
Ë|| 
	$deföed
(
_XOPEN_SOURCE
)

23 
	~<sys/ty≥s.h
>

26 
	~<iso/sig«l_iso.h
>

27 
	~<sys/sig«l.h
>

33 #i‡
__˝lu•lus
 >= 199711L

34 
usög
 
°d
::
sig_©omic_t
;

35 
usög
 
°d
::
sig«l
;

36 
usög
 
°d
::
øi£
;

39 #ifdef 
__˝lu•lus


44 #i‡
	`deföed
(
__STDC__
)

46 c⁄° **
_sys_sigli°p
;

47 c⁄° 
_sys_sigli°n
;

49 #i‡
	`deföed
(
__EXTENSIONS__
) || \

50 (!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !
	$deföed
(
_XOPEN_SOURCE
))

51 
	#_sys_sigli°
 
_sys_sigli°p


	)

52 
	#_sys_nsig
 
_sys_sigli°n


	)

55 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 == 0 || \

56 
	`deföed
(
_POSIX_C_SOURCE
Ë|| 
	$deföed
(
_XOPEN_SOURCE
)

57 
	`kûl
(
pid_t
, );

58 
	`siga˘i⁄
(, c⁄° 
siga˘i⁄
 *, sigaction *);

59 #i‚def 
_KERNEL


60 
	`sigadd£t
(
sig£t_t
 *, );

61 
	`sigdñ£t
(
sig£t_t
 *, );

62 
	`sigem±y£t
(
sig£t_t
 *);

63 
	`sigfûl£t
(
sig£t_t
 *);

64 
	`sigismembî
(c⁄° 
sig£t_t
 *, );

66 
	`sig≥ndög
(
sig£t_t
 *);

67 
	`sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

68 
	`sigsu•íd
(c⁄° 
sig£t_t
 *);

71 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 == 0 && \

72 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !
	$deföed
(
_XOPEN_SOURCE
))

73 
	~<sys/¥oc£t.h
>

74 
	`gsig«l
();

75 (*
	`ssig«l
(, (*)()))();

76 
	`sig£nd
(
idty≥_t
, 
id_t
, );

77 
	`sig£nd£t
(c⁄° 
¥oc£t_t
 *, );

78 
	`sig2°r
(, *);

79 
	`°r2sig
(const *, *);

80 
	#SIG2STR_MAX
 32

	)

83 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 == 0 && \

84 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

85 
	$deföed
(
_XPG4_2
)

86 (*
	`bsd_sig«l
(, (*)()))();

87 
	`kûÕg
(
pid_t
, );

88 
	`sigöãºu±
(, );

89 
	`sigÆt°ack
(c⁄° 
°ack_t
 *, stack_t *);

90 
	`sighﬁd
();

91 
	`sigign‹e
();

92 
	`sig∑u£
();

93 
	`sigªl£
();

94 (*
	`sig£t
(, (*)()))();

95 
	`sig°ack
(
sig°ack
 *, sigstack *);

98 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 == 0 && \

99 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

100 (
_POSIX_C_SOURCE
 > 2)

101 
	~<sys/sigöfo.h
>

102 
	~<time.h
>

103 
	`±hªad_kûl
(
±hªad_t
, );

104 
	`±hªad_sigmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

105 
	`sigwaôöfo
(c⁄° 
sig£t_t
 *, 
sigöfo_t
 *);

106 
	`sigtimedwaô
(c⁄° 
sig£t_t
 *, 
sigöfo_t
 *, c⁄° 
time•ec
 *);

107 
	`sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

112 **
_sys_sigli°p
;

113 
_sys_sigli°n
;

115 
	#_sys_sigli°
 
_sys_sigli°p


	)

116 
	#_sys_nsig
 
_sys_sigli°n


	)

118 (*
	`sig«l
())();

119 
	`øi£
();

121 
	`kûl
();

122 
	`siga˘i⁄
();

123 #i‚def 
_KERNEL


124 
	`sigadd£t
();

125 
	`sigdñ£t
();

126 
	`sigem±y£t
();

127 
	`sigfûl£t
();

128 
	`sigismembî
();

130 
	`sig≥ndög
();

131 
	`sig¥ocmask
();

132 
	`sigsu•íd
();

134 #i‡
	`deföed
(
__EXTENSIONS__
) || \

135 (!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

136 
	$deföed
(
_XPG4_2
)

137 (*
	`bsd_sig«l
())();

138 
	`kûÕg
();

139 
	`sigöãºu±
();

140 
	`sig°ack
();

143 #i‡
	`deföed
(
__EXTENSIONS__
) || \

144 (!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !
	$deföed
(
_XOPEN_SOURCE
))

145 
	`gsig«l
();

146 (*
ssig«l
)();

147 
	`sig£nd
();

148 
	`sig£nd£t
();

149 
	`sig2°r
();

150 
	`°r2sig
();

151 
	#SIG2STR_MAX
 32

	)

154 #i‡
	`deföed
(
__EXTENSIONS__
) || \

155 (!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

156 
	$deföed
(
_XPG4_2
)

157 
	`sigÆt°ack
();

158 
	`sighﬁd
();

159 
	`sigign‹e
();

160 
	`sig∑u£
();

161 
	`sigªl£
();

162 (*
	`sig£t
())();

165 #i‡
	`deföed
(
__EXTENSIONS__
) || \

166 (!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

167 (
_POSIX_C_SOURCE
 > 2)

168 
	~<sys/sigöfo.h
>

169 
	~<sys/time.h
>

170 
	`±hªad_kûl
();

171 
	`±hªad_sigmask
();

172 
	`sigwaôöfo
();

173 
	`sigtimedwaô
();

174 
	`sigqueue
();

183 #if 
	`deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 == 0 && \

184 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

185 (
_POSIX_C_SOURCE
 - 0 >199506LË|| 
	$deföed
(
_POSIX_PTHREAD_SEMANTICS
)

187 #if 
	`deföed
(
__STDC__
)

189 #if (
_POSIX_C_SOURCE
 - 0 >199506LË|| 
	`deföed
(
_POSIX_PTHREAD_SEMANTICS
)

191 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


192 
	`sigwaô
(c⁄° 
sig£t_t
 *, *);

193 #¥agm®
ªdeföe_exäame
 
sigwaô
 
__posix_sigwaô


197 
	$sigwaô
(c⁄° 
sig£t_t
 *
__£ç
, *
__signo
)

199 
	`__posix_sigwaô
(c⁄° 
sig£t_t
 *, *);

200  (
	`__posix_sigwaô
(
__£ç
, 
__signo
));

201 
	}
}

206 
sigwaô
(
sig£t_t
 *);

214 #if (
_POSIX_C_SOURCE
 - 0 >199506LË|| 
deföed
(
_POSIX_PTHREAD_SEMANTICS
)

216 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


217 
sigwaô
();

218 #¥agm®
ªdeföe_exäame
 
sigwaô
 
__posix_sigwaô


222 
	$sigwaô
(
__£ç
, 
__signo
)

223 
sig£t_t
 *
__£ç
;

224 *
__signo
;

226 
	`__posix_sigwaô
();

227  (
	`__posix_sigwaô
(
__£ç
, 
__signo
));

228 
	}
}

233 
sigwaô
();

241 #ifdef 
__˝lu•lus


	@/usr/include/stdarg.h

13 #i‚de‡
_STDARG_H


14 
	#_STDARG_H


	)

16 #¥agm®
idít
 "@(#)stdarg.h 1.45 99/08/10 SMI"

18 #i‡
deföed
(
__STDC__
)

20 
	~<iso/°d¨g_iso.h
>

26 #i‡
__˝lu•lus
 >= 199711L

27 
usög
 
	g°d
::
va_li°
;

30 #ifdef 
__˝lu•lus


38 #i‡
deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0) && \

39 !
deföed
(
_POSIX_C_SOURCE
Ë&& !
	$deföed
(
_XOPEN_SOURCE
))

41 
	#va_c›y
(
to
, 
‰om
) (—oË(‰om))

	)

45 #ifdef 
__˝lu•lus


46 
	}
}

51 
	~<v¨¨gs.h
>

	@/usr/include/stdio.h

17 #i‚de‡
_STDIO_H


18 
	#_STDIO_H


	)

20 #¥agm®
idít
 "@(#)stdio.h 1.78 99/12/08 SMI"

22 
	~<iso/°dio_iso.h
>

36 #i‡
__˝lu•lus
 >= 199711L

37 
usög
 
	g°d
::
FILE
;

38 
usög
 
	g°d
::
size_t
;

39 
usög
 
	g°d
::
Âos_t
;

40 
usög
 
	g°d
::
ªmove
;

41 
usög
 
	g°d
::
ª«me
;

42 
usög
 
	g°d
::
tmpfûe
;

43 
usög
 
	g°d
::
tm≤am
;

44 
usög
 
	g°d
::
f˛o£
;

45 
usög
 
	g°d
::
fÊush
;

46 
usög
 
	g°d
::
f›í
;

47 
usög
 
	g°d
::
‰e›í
;

48 
usög
 
	g°d
::
£tbuf
;

49 
usög
 
	g°d
::
£tvbuf
;

50 
usög
 
	g°d
::
Ârötf
;

51 
usög
 
	g°d
::
fsˇnf
;

52 
usög
 
	g°d
::
¥ötf
;

53 
usög
 
	g°d
::
sˇnf
;

54 
usög
 
	g°d
::
•rötf
;

55 
usög
 
	g°d
::
ssˇnf
;

56 
usög
 
	g°d
::
vÂrötf
;

57 
usög
 
	g°d
::
v¥ötf
;

58 
usög
 
	g°d
::
v•rötf
;

59 
usög
 
	g°d
::
fgëc
;

60 
usög
 
	g°d
::
fgës
;

61 
usög
 
	g°d
::
Âutc
;

62 
usög
 
	g°d
::
Âuts
;

63 
usög
 
	g°d
::
gëc
;

64 
usög
 
	g°d
::
gëch¨
;

65 
usög
 
	g°d
::
gës
;

66 
usög
 
	g°d
::
putc
;

67 
usög
 
	g°d
::
putch¨
;

68 
usög
 
	g°d
::
puts
;

69 
usög
 
	g°d
::
ungëc
;

70 
usög
 
	g°d
::
‰ód
;

71 
usög
 
	g°d
::
fwrôe
;

72 
usög
 
	g°d
::
fgëpos
;

73 
usög
 
	g°d
::
f£ek
;

74 
usög
 
	g°d
::
f£ços
;

75 
usög
 
	g°d
::
·ñl
;

76 
usög
 
	g°d
::
ªwöd
;

77 
usög
 
	g°d
::
˛óªº
;

78 
usög
 
	g°d
::
„of
;

79 
usög
 
	g°d
::
„º‹
;

80 
usög
 
	g°d
::
≥º‹
;

83 #ifdef 
__˝lu•lus


87 #i‡
deföed
(
_LARGEFILE_SOURCE
Ë|| deföed(
_XPG5
)

88 #i‚def 
_OFF_T


89 
	#_OFF_T


	)

90 #i‡
deföed
(
_LP64
Ë|| 
_FILE_OFFSET_BITS
 == 32

91 
	toff_t
;

93 
__l⁄gl⁄g_t
 
	toff_t
;

95 #ifdef 
_LARGEFILE64_SOURCE


96 #ifde‡
_LP64


97 
off_t
 
	toff64_t
;

99 
__l⁄gl⁄g_t
 
	toff64_t
;

105 #ifde‡
_LARGEFILE64_SOURCE


106 #ifde‡
_LP64


107 
Âos_t
 
	tÂos64_t
;

109 
__l⁄gl⁄g_t
 
	tÂos64_t
;

118 #i‡
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >4Ë&& !deföed(
_VA_LIST
)

119 
	#_VA_LIST


	)

120 
__va_li°
 
	tva_li°
;

123 #i‡
deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 - 0 == 0 || \

124 
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)

126 
	#L_˘îmid
 9

	)

127 
	#L_cu£rid
 9

	)

130 #i‡
deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0 && \

131 !
deföed
(
_POSIX_C_SOURCE
))Ë|| deföed(
_XOPEN_SOURCE
)

133 
	#P_tmpdú
 "/v¨/tmp/"

	)

136 #i‚de‡
_STDIO_ALLOCATE


137 
_sibuf
[], 
_sobuf
[];

141 #i‡!
deföed
(
_LP64
Ë&& 
_FILE_OFFSET_BITS
 == 64

142 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


143 #¥agm®
ªdeföe_exäame
 
f›í
 
f›í64


144 #¥agm®
ªdeföe_exäame
 
‰e›í
 
‰e›í64


145 #¥agm®
ªdeföe_exäame
 
tmpfûe
 
tmpfûe64


146 #¥agm®
ªdeföe_exäame
 
fgëpos
 
fgëpos64


147 #¥agm®
ªdeföe_exäame
 
f£ços
 
f£ços64


148 #ifdef 
_LARGEFILE_SOURCE


149 #¥agm®
ªdeföe_exäame
 
f£eko
 
f£eko64


150 #¥agm®
ªdeföe_exäame
 
·ñlo
 
·ñlo64


153 #i‡
deföed
(
__STDC__
)

154 
FILE
 *
f›í64
(const *, const *);

155 
FILE
 *
‰e›í64
(const *, const *, FILE *);

156 
FILE
 *
tmpfûe64
();

157 
fgëpos64
(
FILE
 *, 
Âos_t
 *);

158 
f£ços64
(
FILE
 *, c⁄° 
Âos_t
 *);

160 
FILE
 *
f›í64
();

161 
FILE
 *
‰e›í64
();

162 
FILE
 *
tmpfûe64
();

163 
fgëpos64
();

164 
f£ços64
();

166 
	#f›í
 
f›í64


	)

167 
	#‰e›í
 
‰e›í64


	)

168 
	#tmpfûe
 
tmpfûe64


	)

169 
	#fgëpos
 
fgëpos64


	)

170 
	#f£ços
 
f£ços64


	)

171 #ifdef 
_LARGEFILE_SOURCE


172 
	#f£eko
 
f£eko64


	)

173 
	#·ñlo
 
·ñlo64


	)

178 #i‚de‡
_LP64


179 *
_bu„ndèb
[];

180 
FILE
 *
_œ°buf
;

184 #i‡
deföed
(
_LP64
Ë&& deföed(
_LARGEFILE64_SOURCE
)

185 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


186 #¥agma 
ªdeföe_exäame
 
f›í64
 
f›í


187 #¥agma 
ªdeföe_exäame
 
‰e›í64
 
‰e›í


188 #¥agma 
ªdeföe_exäame
 
tmpfûe64
 
tmpfûe


189 #¥agma 
ªdeföe_exäame
 
fgëpos64
 
fgëpos


190 #¥agma 
ªdeföe_exäame
 
f£ços64
 
f£ços


191 #ifdef 
_LARGEFILE_SOURCE


192 #¥agma 
ªdeföe_exäame
 
f£eko64
 
f£eko


193 #¥agma 
ªdeföe_exäame
 
·ñlo64
 
·ñlo


196 
	#f›í64
 
f›í


	)

197 
	#‰e›í64
 
‰e›í


	)

198 
	#tmpfûe64
 
tmpfûe


	)

199 
	#fgëpos64
 
fgëpos


	)

200 
	#f£ços64
 
f£ços


	)

201 #ifdef 
_LARGEFILE_SOURCE


202 
	#f£eko64
 
f£eko


	)

203 
	#·ñlo64
 
·ñlo


	)

208 #i‡
deföed
(
__STDC__
)

210 #if 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
)

211 *
tm≤am_r
(*);

213 #i‡
deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 == 0 && \

214 !
deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
))

215 
£tbuf„r
(
FILE
 *, *, 
size_t
);

216 
£éöebuf
(
FILE
 *);

218 #i‡
deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 == 0 && \

219 !
deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
)) || \

220 
deföed
(
_XPG5
)

222 
¢¥ötf
(*, 
size_t
, const *, ...);

224 #i‡
deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 == 0 && \

225 !
deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
)) || \

226 
deföed
(
_XPG5
)

227 
v¢¥ötf
(*, 
size_t
, c⁄° *, 
__va_li°
);

233 #i‡
deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 == 0 || \

234 
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)

236 
FILE
 *
fd›í
(, const *);

237 *
˘îmid
(*);

238 
fûío
(
FILE
 *);

245 #if 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

246 (
	g_POSIX_C_SOURCE
 - 0 >= 199506L)

247 
Êockfûe
(
FILE
 *);

248 
·rylockfûe
(
FILE
 *);

249 
fu∆ockfûe
(
FILE
 *);

250 
gëc_u∆ocked
(
FILE
 *);

251 
gëch¨_u∆ocked
();

252 
putc_u∆ocked
(, 
FILE
 *);

253 
putch¨_u∆ocked
();

260 #i‡
deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 =0 || deföed(
_XOPEN_SOURCE
)

262 
FILE
 *
p›í
(const *, const *);

263 *
cu£rid
(*);

264 *
ãm≤am
(const *, const *);

265 
gë›t
(, *const *, const *);

266 #i‡!
deföed
(
_XOPEN_SOURCE
)

267 
gësub›t
(**, *const *, **);

269 *
›èrg
;

270 
›töd
, 
›ãº
, 
›t›t
;

271 
gëw
(
FILE
 *);

272 
putw
(, 
FILE
 *);

273 
p˛o£
(
FILE
 *);

280 #if 
deföed
(
_LARGEFILE_SOURCE
Ë|| deföed(
_XPG5
)

281 
f£eko
(
FILE
 *, 
off_t
, );

282 
off_t
 
·ñlo
(
FILE
 *);

289 #if 
deföed
(
_LARGEFILE64_SOURCE
Ë&& !((
_FILE_OFFSET_BITS
 == 64) && \

290 !
deföed
(
__PRAGMA_REDEFINE_EXTNAME
))

291 
FILE
 *
f›í64
(const *, const *);

292 
FILE
 *
‰e›í64
(const *, const *, FILE *);

293 
FILE
 *
tmpfûe64
();

294 
fgëpos64
(
FILE
 *, 
Âos64_t
 *);

295 
f£ços64
(
FILE
 *, c⁄° 
Âos64_t
 *);

296 
f£eko64
(
FILE
 *, 
off64_t
, );

297 
off64_t
 
·ñlo64
(
FILE
 *);

302 #i‚def 
_LP64


303 
	#_bu„nd
(
p
) ((
	`fûío
’Ë< 
_NFILE
Ë? 
_bu„ndèb
[fileno(p)] : \

304 (*)
	`_ªÆbu„nd
(
p
))

	)

305 
	#_bufsiz
(
p
) (
	`_bu„nd
’Ë- (p)->
_ba£
)

	)

308 #if 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
)

309 *
tm≤am_r
();

311 #i‡
deföed
(
__EXTENSIONS__
) || \

312 (!
deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
))

313 
£tbuf„r
();

314 
£éöebuf
();

317 #i‡
deföed
(
__EXTENSIONS__
) || \

318 
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)

319 
FILE
 *
fd›í
();

320 *
˘îmid
();

321 
fûío
();

324 #if 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

325 (
	g_POSIX_C_SOURCE
 - 0 >= 199506L)

326 
Êockfûe
();

327 
·rylockfûe
();

328 
fu∆ockfûe
();

329 
gëc_u∆ocked
();

330 
gëch¨_u∆ocked
();

331 
putc_u∆ocked
();

332 
putch¨_u∆ocked
();

335 #i‡
deföed
(
__EXTENSIONS__
Ë|| deföed(
_XOPEN_SOURCE
)

336 
FILE
 *
p›í
();

337 *
cu£rid
();

338 *
ãm≤am
();

339 
gë›t
();

340 #i‡!
deföed
(
_XOPEN_SOURCE
)

341 
gësub›t
();

343 *
›èrg
;

344 
›töd
, 
›ãº
, 
›t›t
;

345 
gëw
();

346 
putw
();

347 
p˛o£
();

350 #if 
deföed
(
_LARGEFILE_SOURCE
Ë|| deföed(
_XPG5
)

351 
f£eko
();

352 
off_t
 
·ñlo
();

355 #if 
deföed
(
_LARGEFILE64_SOURCE
Ë&& !((
_FILE_OFFSET_BITS
 == 64) && \

356 !
deföed
(
__PRAGMA_REDEFINE_EXTNAME
))

357 
FILE
 *
f›í64
();

358 
FILE
 *
‰e›í64
();

359 
FILE
 *
tmpfûe64
();

360 
fgëpos64
();

361 
f£ços64
();

362 
f£eko64
();

363 
off64_t
 
·ñlo64
();

368 #i‡!
deföed
(
__löt
)

370 #if 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

371 (
	g_POSIX_C_SOURCE
 - 0 >= 199506L)

372 #i‚def 
_LP64


373 #ifdef 
__STDC__


374 
	#gëc_u∆ocked
(
p
) (--’)->
_˙t
 < 0 \

375 ? 
	`__fûbuf
(
p
) \

376 : ()*(
p
)->
_±r
++)

	)

377 
	#putc_u∆ocked
(
x
, 
p
) (--’)->
_˙t
 < 0 \

378 ? 
	`__Êsbuf
((
x
), (
p
)) \

379 : ()(*(
p
)->
_±r
++ = \

380 (Ë(
x
)))

	)

382 
	#gëc_u∆ocked
(
p
) (--’)->
_˙t
 < 0 \

383 ? 
	`_fûbuf
(
p
) \

384 : ()*(
p
)->
_±r
++)

	)

385 
	#putc_u∆ocked
(
x
, 
p
) (--’)->
_˙t
 < 0 \

386 ? 
	`_Êsbuf
((
x
), (
p
)) \

387 : ()(*(
p
)->
_±r
++ = \

388 (Ë(
x
)))

	)

391 
	#gëch¨_u∆ocked
() 
	`gëc_u∆ocked
(
°dö
)

	)

392 
	#putch¨_u∆ocked
(
x
) 
	`putc_u∆ocked
((x), 
°dout
)

	)

397 #ifdef 
__˝lu•lus


	@/usr/include/string.h

13 #i‚de‡
_STRING_H


14 
	#_STRING_H


	)

16 #¥agm®
idít
 "@(#)string.h 1.24 99/08/10 SMI"

18 
	~<iso/°rög_iso.h
>

24 #i‡
__˝lu•lus
 >= 199711L

25 
usög
 
	g°d
::
size_t
;

26 
usög
 
	g°d
::
memchr
;

27 
usög
 
	g°d
::
memcmp
;

28 
usög
 
	g°d
::
mem˝y
;

29 
usög
 
	g°d
::
memmove
;

30 
usög
 
	g°d
::
mem£t
;

31 
usög
 
	g°d
::
°rˇt
;

32 
usög
 
	g°d
::
°rchr
;

33 
usög
 
	g°d
::
°rcmp
;

34 
usög
 
	g°d
::
°rcﬁl
;

35 
usög
 
	g°d
::
°r˝y
;

36 
usög
 
	g°d
::
°rc•n
;

37 
usög
 
	g°d
::
°ªº‹
;

38 
usög
 
	g°d
::
°æí
;

39 
usög
 
	g°d
::
°∫ˇt
;

40 
usög
 
	g°d
::
°∫cmp
;

41 
usög
 
	g°d
::
°∫˝y
;

42 
usög
 
	g°d
::
°Ωbrk
;

43 
usög
 
	g°d
::
°ºchr
;

44 
usög
 
	g°d
::
°r•n
;

45 
usög
 
	g°d
::
°r°r
;

46 
usög
 
	g°d
::
°πok
;

47 
usög
 
	g°d
::
°rx‰m
;

50 #ifdef 
__˝lu•lus


54 #i‡
deföed
(
__STDC__
)

56 #if 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

57 (
_POSIX_C_SOURCE
 - 0 >= 199506L)

58 *
°πok_r
(*, const *, **);

61 #i‡
deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 == 0 || \

62 
deföed
(
_POSIX_C_SOURCE
Ë|| 
	$deföed
(
_XOPEN_SOURCE
)

63 *
	`memc˝y
(*, c⁄° *, , 
size_t
);

66 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 == 0 && \

67 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !
	$deföed
(
_XOPEN_SOURCE
))

68 *
	`°rsig«l
();

69 
	`ffs
();

70 
	`°rˇ£cmp
(const *, const *);

71 
	`°∫ˇ£cmp
(c⁄° *, c⁄° *, 
size_t
);

72 
size_t
 
	`°æ˝y
(*, const *, size_t);

73 
size_t
 
	`°æˇt
(*, const *, size_t);

76 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 == 0 && \

77 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

78 
	$deföed
(
_XPG4_2
)

79 *
	`°rdup
(const *);

84 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

85 (
_POSIX_C_SOURCE
 - 0 >= 199506L)

86 *
	`°πok_r
();

89 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 == 0 || \

90 
	`deföed
(
_POSIX_C_SOURCE
Ë|| 
	$deföed
(
_XOPEN_SOURCE
)

91 *
	`memc˝y
();

94 #i‡
	`deföed
(
__EXTENSIONS__
) || \

95 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !
	$deföed
(
_XOPEN_SOURCE
)

96 *
	`°rsig«l
();

97 
	`ffs
();

98 
	`°rˇ£cmp
();

99 
	`°∫ˇ£cmp
();

100 
size_t
 
	`°æ˝y
();

101 
size_t
 
	`°æˇt
();

104 #i‡
	`deföed
(
__EXTENSIONS__
) || \

105 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
) || \

106 
	$deföed
(
_XPG4_2
)

107 *
	`°rdup
();

112 #ifdef 
__˝lu•lus


113 
	}
}

	@/usr/include/sys/file.h

12 #i‚de‡
_SYS_FILE_H


13 
	#_SYS_FILE_H


	)

15 #¥agm®
idít
 "@(#)file.h 1.60 99/08/31 SMI"

17 
	~<sys/t_lock.h
>

18 #ifde‡
_KERNEL


19 
	~<sys/modñ.h
>

20 
	~<sys/u£r.h
>

23 #ifdef 
__˝lu•lus


43 
	sfûe
 {

44 
kmuãx_t
 
f_éock
;

45 
ush‹t_t
 
f_Êag
;

46 
ush‹t_t
 
f_∑d
;

47 
vnode
 *
f_vnode
;

48 
off£t_t
 
f_off£t
;

49 
¸ed
 *
f_¸ed
;

50 
ˇddr_t
 
f_audô_d©a
;

51 
f_cou¡
;

52 } 
	tfûe_t
;

57 
	sÂﬁlöfo
 {

58 
_kthªad
 *
Â_thªad
;

59 
Âﬁlöfo
 *
Â_√xt
;

60 } 
	tÂﬁlöfo_t
;

64 
	#FOPEN
 0xFFFFFFFF

	)

65 
	#FREAD
 0x01

	)

66 
	#FWRITE
 0x02

	)

67 
	#FNDELAY
 0x04

	)

68 
	#FAPPEND
 0x08

	)

69 
	#FSYNC
 0x10

	)

70 #ifde‡
C2_AUDIT


71 
	#FREVOKED
 0x20

	)

73 
	#FDSYNC
 0x40

	)

74 
	#FRSYNC
 0x8000

	)

80 
	#FOFFMAX
 0x2000

	)

83 
	#FNONBLOCK
 0x80

	)

85 
	#FMASK
 0xa0FF

	)

90 
	#FCREAT
 0x0100

	)

91 
	#FTRUNC
 0x0200

	)

92 
	#FEXCL
 0x0400

	)

93 
	#FNOCTTY
 0x0800

	)

94 
	#FASYNC
 0x1000

	)

98 
	#FNODSYNC
 0x10000

	)

100 #ifde‡
_KERNEL


108 
	#FMODELS
 
DATAMODEL_MASK


	)

109 
	#FILP32
 
DATAMODEL_ILP32


	)

110 
	#FLP64
 
DATAMODEL_LP64


	)

111 
	#FNATIVE
 
DATAMODEL_NATIVE


	)

124 
	#OFFSET_MAX
(
fd
) ((fd->
f_Êag
 & 
FOFFMAX
Ë? 
MAXOFFSET_T
 : 
MAXOFF32_T
)

	)

133 
	#FKIOCTL
 0x80000000

	)

141 
	#FKLYR
 0x40000000

	)

147 #i‚de‡
L_SET


148 
	#L_SET
 0

	)

151 #i‡
deföed
(
_KERNEL
)

157 
¥oc
;

159 
fûe_t
 *
gëf
();

160 
ªÀa£f
();

161 
¨ñó£f
(, 
uf_öfo_t
 *);

162 #i‚def 
_BOOT


163 
˛o£Æl
(
uf_öfo_t
 *);

165 
Êi°_f‹k
(
uf_öfo_t
 *, uf_info_t *);

166 
˛o£f
(
fûe_t
 *);

167 
˛o£™d£tf
(, 
fûe_t
 *);

168 
uÁŒoc
();

169 
ÁŒoc
(
vnode
 *, , 
fûe_t
 **, *);

170 
föô
();

171 
unÁŒoc
(
fûe_t
 *);

172 
£tf
(, 
fûe_t
 *);

173 
f_gëfd
();

174 
f_£tfd
(, );

175 
Ássign
(
vnode
 **, , *);

176 
f˙t_add
(
uf_öfo_t
 *, );

177 
˛o£_exec
(
uf_öfo_t
 *);

178 
˛ór_°Æe_fd
();

179 
˛ór_a˘ive_fd
();

180 
‰ì_afd
(
afd_t
 *
afd
);

181 
fis›í
(
vnode
 *);

182 
dñÂﬁlöfo
();

183 
addÂﬁlöfo
();

185 #ifde‡
DEBUG


187 
checkwfdli°
(
vnode
 *, 
Âﬁlöfo_t
 *);

188 
checkÂﬁlöfo
();

189 
öÂﬁlöfo
();

194 #ifdef 
__˝lu•lus


	@/usr/include/sys/param.h

34 #i‚de‡
_SYS_PARAM_H


35 
	#_SYS_PARAM_H


	)

37 #¥agm®
idít
 "@(#)param.h 1.76 00/02/14 SMI"

39 #i‚de‡
_ASM


40 
	~<sys/ty≥s.h
>

41 
	~<sys/iß_defs.h
>

45 #ifdef 
__˝lu•lus


53 #i‚def 
_POSIX_VDISABLE


54 
	#_POSIX_VDISABLE
 0

	)

57 #i‚def 
MAX_INPUT


58 
	#MAX_INPUT
 512

	)

61 #i‚def 
MAX_CANON


62 
	#MAX_CANON
 256

	)

65 
	#UID_NOBODY
 60001

	)

66 
	#GID_NOBODY
 
UID_NOBODY


	)

68 
	#UID_NOACCESS
 60002

	)

70 #ifde‡
_KERNEL


71 
	#MAX_TASKID
 999999

	)

72 
	#MAX_MAXPID
 999999

	)

75 #ifde‡
DEBUG


76 
	#DEFAULT_MAXPID
 999999

	)

77 
	#DEFAULT_JUMPPID
 100000

	)

79 
	#DEFAULT_MAXPID
 30000

	)

80 
	#DEFAULT_JUMPPID
 0

	)

84 
	#MAXUID
 2147483647

	)

85 
	#MAXPROJID
 
MAXUID


	)

86 
	#MAXLINK
 32767

	)

88 
	#NMOUNT
 40

	)

90 
	#CANBSIZ
 256

	)

92 
	#NOFILE
 20

	)

101 
	#NGROUPS_UMIN
 0

	)

102 
	#NGROUPS_UMAX
 32

	)

108 
	#NGROUPS_MAX_DEFAULT
 16

	)

113 
	#NZERO
 20

	)

119 
	#NBPW
  ()

	)

121 #i‚def 
NULL


122 #i‡
deföed
(
_LP64
Ë&& !deföed(
__˝lu•lus
)

123 
	#NULL
 0L

	)

125 
	#NULL
 0

	)

129 
	#CMASK
 022

	)

130 
	#CDLIMIT
 (1L<<11)

	)

131 
	#NBPS
 0x20000

	)

132 
	#NBPSCTR
 512

	)

133 
	#UBSIZE
 512

	)

134 
	#SCTRSHFT
 9

	)

136 #ifde‡
_LITTLE_ENDIAN


137 
	#lobyã
(
X
) (((*)&(X))[0])

	)

138 
	#hibyã
(
X
) (((*)&(X))[1])

	)

139 
	#low‹d
(
X
) (((
ush‹t_t
 *)&(X))[0])

	)

140 
	#hiw‹d
(
X
) (((
ush‹t_t
 *)&(X))[1])

	)

142 #ifde‡
_BIG_ENDIAN


143 
	#lobyã
(
X
) (((*)&(X))[1])

	)

144 
	#hibyã
(
X
) (((*)&(X))[0])

	)

145 
	#low‹d
(
X
) (((
ush‹t_t
 *)&(X))[1])

	)

146 
	#hiw‹d
(
X
) (((
ush‹t_t
 *)&(X))[0])

	)

150 
	#SYSNAME
 9

	)

151 
	#PREMOTE
 39

	)

163 
	#MAXPATHLEN
 1024

	)

164 
	#MAXSYMLINKS
 20

	)

165 
	#MAXNAMELEN
 256

	)

167 #i‚de‡
NADDR


168 
	#NADDR
 13

	)

176 #i‚de‡
PIPE_BUF


177 
	#PIPE_BUF
 5120

	)

180 #i‚de‡
PIPE_MAX


181 
	#PIPE_MAX
 5120

	)

184 #i‚de‡
NBBY


185 
	#NBBY
 8

	)

189 
	#dkblock
(
bp
) ((bp)->
b_blkno
)

	)

190 
	#dkunô
(
bp
) (
	`mö‹
((bp)->
b_dev
Ë>> 3)

	)

205 
	#MAXBSIZE
 8192

	)

206 
	#DEV_BSIZE
 512

	)

207 
	#DEV_BSHIFT
 9

	)

208 
	#MAXFRAG
 8

	)

209 #ifdef 
_SYSCALL32


210 
	#MAXOFF32_T
 0x7fffffff

	)

212 #ifdef 
_LP64


213 
	#MAXOFF_T
 0x7ffffffffffffffÊ

	)

214 
	#MAXOFFSET_T
 0x7ffffffffffffffÊ

	)

216 
	#MAXOFF_T
 0x7ffffffÊ

	)

217 #ifde‡
_NO_LONGLONG


218 
	#MAXOFFSET_T
 0x7fffffff

	)

220 
	#MAXOFFSET_T
 0x7fffffffffffffffLL

	)

224 
	#btodb
(
byãs
) \

225 (()(
byãs
Ë>> 
DEV_BSHIFT
)

	)

226 
	#dbtob
(
db
) \

227 (()(
db
Ë<< 
DEV_BSHIFT
)

	)

230 
	#lbtodb
(
byãs
) \

231 ((
off£t_t
)(
byãs
Ë>> 
DEV_BSHIFT
)

	)

232 
	#ldbtob
(
db
) \

233 ((
off£t_t
)(
db
Ë<< 
DEV_BSHIFT
)

	)

235 #i‚de‡
_ASM


236 #i‚de‡
NODEV


237 
	#NODEV
 (
dev_t
)(-1l)

	)

238 #ifde‡
_SYSCALL32


239 
	#NODEV32
 (
dev32_t
)(-1)

	)

247 
	#NCARGS32
 0x100000

	)

248 
	#NCARGS64
 0x200000

	)

249 #ifdef 
_LP64


250 
	#NCARGS
 
NCARGS64


	)

252 
	#NCARGS
 
NCARGS32


	)

259 
	#FSHIFT
 8

	)

260 
	#FSCALE
 (1<<
FSHIFT
)

	)

267 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_ASM
)

268 
drv_u£cwaô
(
˛ock_t
);

269 
	#DELAY
(
n
) 
	`drv_u£cwaô
“)

	)

270 
	#CDELAY
(
c
, 
n
) \

272 
N
 = 
n
; \

273 --
N
 > 0) { \

274 
c
) \

276 
	`drv_u£cwaô
(1); \

278 }

	)

281 #ifdef 
__˝lu•lus


290 #i‡(
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
))

292 #i‡
deföed
(
_MACHDEP
)

293 
	~<sys/mach∑øm.h
>

296 #ifdef 
__˝lu•lus


300 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_ASM
)

301 
˝u_deˇy_Á˘‹
;

302 
pid_t
 
maxpid
;

303 
pid_t
 
jump_pid
;

306 #i‡!
deföed
(
_MACHDEP
)

312 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_ASM
)

313 
hz
;

314 
¢o›ög
;

315 
uöt_t
 
¢o›_öãrvÆ
;

316 c⁄° 
_∑gesize
;

317 c⁄° 
_∑geshi·
;

318 c⁄° 
_∑geoff£t
;

319 c⁄° 
_∑gemask
;

320 c⁄° 
_mmu_∑gesize
;

321 c⁄° 
_mmu_∑geshi·
;

322 c⁄° 
_mmu_∑geoff£t
;

323 c⁄° 
_mmu_∑gemask
;

324 c⁄° 
uöçå_t
 
_kî√lba£
;

325 c⁄° 
uöçå_t
 
_u£æimô
;

326 c⁄° 
uöçå_t
 
_u£æimô32
;

327 c⁄° 
uöçå_t
 
_¨gsba£
;

328 c⁄° 
_deÁu…°ksz
;

329 c⁄° 
_nbpg
;

330 c⁄° 
_n˝u
;

331 c⁄° 
_˛size
;

334 
	#PAGESIZE
 
_∑gesize


	)

335 
	#PAGESHIFT
 
_∑geshi·


	)

336 
	#PAGEOFFSET
 
_∑geoff£t


	)

337 
	#PAGEMASK
 
_∑gemask


	)

338 
	#MMU_PAGESIZE
 
_mmu_∑gesize


	)

339 
	#MMU_PAGESHIFT
 
_mmu_∑geshi·


	)

340 
	#MMU_PAGEOFFSET
 
_mmu_∑geoff£t


	)

341 
	#MMU_PAGEMASK
 
_mmu_∑gemask


	)

343 
	#KERNELBASE
 
_kî√lba£


	)

344 
	#USERLIMIT
 
_u£æimô


	)

345 
	#USERLIMIT32
 
_u£æimô32


	)

346 
	#ARGSBASE
 
_¨gsba£


	)

347 
	#DEFAULTSTKSZ
 
_deÁu…°ksz


	)

348 
	#NCPU
 
_n˝u


	)

362 
	#mmu_±ob
(
x
) ((xË<< 
MMU_PAGESHIFT
)

	)

363 
	#mmu_bt›
(
x
) (((x)Ë>> 
MMU_PAGESHIFT
)

	)

364 
	#mmu_bt›r
(
x
) ((((xË+ 
MMU_PAGEOFFSET
Ë>> 
MMU_PAGESHIFT
))

	)

369 
	#mmu_±od
(
x
) ((xË<< (
MMU_PAGESHIFT
 - 
DEV_BSHIFT
))

	)

370 
	#±od
(
x
) ((xË<< (
PAGESHIFT
 - 
DEV_BSHIFT
))

	)

378 
	#±ob
(
x
) ((xË<< 
PAGESHIFT
)

	)

379 
	#bt›
(
x
) (((xË>> 
PAGESHIFT
))

	)

380 
	#bt›r
(
x
) ((((xË+ 
PAGEOFFSET
Ë>> 
PAGESHIFT
))

	)

385 
	#NDPP
 (
PAGESIZE
/
DEV_BSIZE
)

	)

386 
	#dt›
(
DD
) (((DDË+ 
NDPP
 - 1Ë>> (
PAGESHIFT
 - 
DEV_BSHIFT
))

	)

387 
	#dt›t
(
DD
) ((DDË>> (
PAGESHIFT
 - 
DEV_BSHIFT
))

	)

392 
	#_AIO_LISTIO_MAX
 (4096)

	)

393 
	#_AIO_MAX
 (-1)

	)

394 
	#_MQ_OPEN_MAX
 (32)

	)

395 
	#_MQ_PRIO_MAX
 (32)

	)

396 
	#_SEM_NSEMS_MAX
 
INT_MAX


	)

397 
	#_SEM_VALUE_MAX
 
INT_MAX


	)

399 #ifdef 
__˝lu•lus


413 
	~<sys/uni°d.h
>

415 #ifdef 
__˝lu•lus


419 #i‡!
deföed
(
_ASM
)

420 
_sysc⁄f
();

423 
	#HZ
 ((
˛ock_t
)
	`_sysc⁄f
(
_SC_CLK_TCK
))

	)

424 
	#TICK
 (1000000000/((
˛ock_t
)
	`_sysc⁄f
(
_SC_CLK_TCK
)))

	)

425 
	#PAGESIZE
 (
	`_sysc⁄f
(
_SC_PAGESIZE
))

	)

426 
	#PAGEOFFSET
 (
PAGESIZE
 - 1)

	)

427 
	#PAGEMASK
 (~
PAGEOFFSET
)

	)

428 
	#MAXPID
 ((
pid_t
)
	`_sysc⁄f
(
_SC_MAXPID
))

	)

430 #ifdef 
__˝lu•lus


	@/usr/include/sys/resource.h

13 #i‚de‡
_SYS_RESOURCE_H


14 
	#_SYS_RESOURCE_H


	)

16 #¥agm®
idít
 "@(#)resource.h 1.25 98/06/30 SMI"

18 
	~<sys/„©uª_ã°s.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/time.h
>

23 #ifdef 
__˝lu•lus


31 
	#PRIO_PROCESS
 0

	)

32 
	#PRIO_PGRP
 1

	)

33 
	#PRIO_USER
 2

	)

40 
	#RLIMIT_CPU
 0

	)

41 
	#RLIMIT_FSIZE
 1

	)

42 
	#RLIMIT_DATA
 2

	)

43 
	#RLIMIT_STACK
 3

	)

44 
	#RLIMIT_CORE
 4

	)

45 
	#RLIMIT_NOFILE
 5

	)

46 
	#RLIMIT_VMEM
 6

	)

47 
	#RLIMIT_AS
 
RLIMIT_VMEM


	)

49 
	#RLIM_NLIMITS
 7

	)

51 #i‡
deföed
(
_LP64
)

53 
	tæim_t
;

55 
	#RLIM_INFINITY
 (-3l)

	)

56 
	#RLIM_SAVED_MAX
 (-2l)

	)

57 
	#RLIM_SAVED_CUR
 (-1l)

	)

65 #i‡
_FILE_OFFSET_BITS
 == 32

67 
	tæim_t
;

69 
	#RLIM_INFINITY
 0x7fffffff

	)

70 
	#RLIM_SAVED_MAX
 0x7fffff„

	)

71 
	#RLIM_SAVED_CUR
 0x7ffffffd

	)

75 
u_l⁄gl⁄g_t
 
	tæim_t
;

77 
	#RLIM_INFINITY
 ((
æim_t
)-3)

	)

78 
	#RLIM_SAVED_MAX
 ((
æim_t
)-2)

	)

79 
	#RLIM_SAVED_CUR
 ((
æim_t
)-1)

	)

85 #i‡
deföed
(
_SYSCALL32
)

89 
uöt32_t
 
	tæim32_t
;

91 
	#RLIM32_INFINITY
 0x7fffffff

	)

92 
	#RLIM32_SAVED_MAX
 0x7fffff„

	)

93 
	#RLIM32_SAVED_CUR
 0x7ffffffd

	)

95 
	sæimô32
 {

96 
æim32_t
 
æim_cur
;

97 
æim32_t
 
æim_max
;

102 
	sæimô
 {

103 
æim_t
 
æim_cur
;

104 
æim_t
 
æim_max
;

108 #ifdef 
_LARGEFILE64_SOURCE


110 
u_l⁄gl⁄g_t
 
	tæim64_t
;

112 
	#RLIM64_INFINITY
 ((
æim64_t
)-3)

	)

113 
	#RLIM64_SAVED_MAX
 ((
æim64_t
)-2)

	)

114 
	#RLIM64_SAVED_CUR
 ((
æim64_t
)-1)

	)

116 
	sæimô64
 {

117 
æim64_t
 
æim_cur
;

118 
æim64_t
 
æim_max
;

123 #ifde‡
_KERNEL


125 
	~<sys/modñ.h
>

127 
æimô64
 
æimôs
[];

128 
æim64_t
 
æim_öföôy_m≠
[];

130 
æimô
(, 
æim64_t
,Ñlim64_t);

132 #i‡
deföed
(
_SYSCALL32_IMPL
Ë|| deföed(
__löt
)

133 
	g¥oc
;

134 
æim64_t
 
æim_öföôy_m≠_32
[];

135 
æim64_t
 
p_cuæimô
(
¥oc
 *, , 
modñ_t
);

140 
	#RUSAGE_SELF
 0

	)

141 
	#RUSAGE_CHILDREN
 -1

	)

143 
	srußge
 {

144 
timevÆ
 
	gru_utime
;

145 
timevÆ
 
	gru_°ime
;

146 
	gru_maxrss
;

147 
	gru_ixrss
;

148 
	gru_idrss
;

149 
	gru_i§ss
;

150 
	gru_möÊt
;

151 
	gru_majÊt
;

152 
	gru_nsw≠
;

153 
	gru_öblock
;

154 
	gru_oublock
;

155 
	gru_msg¢d
;

156 
	gru_msgrcv
;

157 
	gru_nsig«ls
;

158 
	gru_nvcsw
;

159 
	gru_nivcsw
;

162 #i‡!
deföed
(
_LP64
Ë&& 
_FILE_OFFSET_BITS
 == 64

166 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


167 #¥agm®
ªdeföe_exäame
 
£ålimô
 
£ålimô64


168 #¥agm®
ªdeföe_exäame
 
gëæimô
 
gëæimô64


170 
	#£ålimô
 
£ålimô64


	)

171 
	#gëæimô
 
gëæimô64


	)

172 
	#æimô
 
æimô64


	)

176 #i‡
deföed
(
_LP64
Ë&& deföed(
_LARGEFILE64_SOURCE
)

181 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


182 #¥agma 
ªdeföe_exäame
 
£ålimô64
 
£ålimô


183 #¥agma 
ªdeföe_exäame
 
gëæimô64
 
gëæimô


185 
	#£ålimô64
 
£ålimô


	)

186 
	#gëæimô64
 
gëæimô


	)

187 
	#æimô64
 
æimô


	)

191 #i‡
deföed
(
__STDC__
)

193 
£ålimô
(, c⁄° 
æimô
 *);

194 
gëæimô
(, 
æimô
 *);

197 #if 
deföed
(
_LARGEFILE64_SOURCE
Ë&& !((
_FILE_OFFSET_BITS
 == 64) && \

198 !
deföed
(
__PRAGMA_REDEFINE_EXTNAME
))

199 
£ålimô64
(, c⁄° 
æimô64
 *);

200 
gëæimô64
(, 
æimô64
 *);

203 
gë¥i‹ôy
(, 
id_t
);

204 
£çri‹ôy
(, 
id_t
, );

205 
gërußge
(, 
rußge
 *);

209 
gëæimô
();

210 
£ålimô
();

213 #if 
deföed
(
_LARGEFILE64_SOURCE
Ë&& !((
_FILE_OFFSET_BITS
 == 64) && \

214 !
deföed
(
__PRAGMA_REDEFINE_EXTNAME
))

215 
£ålimô64
();

216 
gëæimô64
();

219 
gë¥i‹ôy
();

220 
£çri‹ôy
();

221 
gërußge
();

227 #ifdef 
__˝lu•lus


	@/usr/include/sys/socket.h

13 #i‚def 
_SYS_SOCKET_H


14 
	#_SYS_SOCKET_H


	)

16 #¥agm®
idít
 "@(#)socket.h 1.53 99/11/07 SMI"

37 
	~<sys/ty≥s.h
>

38 
	~<sys/uio.h
>

39 
	~<sys/„©uª_ã°s.h
>

40 #i‚def 
_KERNEL


41 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

42 
	~<sys/√tc⁄fig.h
>

46 #ifdef 
__˝lu•lus


50 #i‚def 
_SA_FAMILY_T


51 
	#_SA_FAMILY_T


	)

52 
uöt16_t
 
	tß_Ámûy_t
;

55 #i‚def 
_SOCKLEN_T


56 
	#_SOCKLEN_T


	)

58 #i‡
deföed
(
_XPG4_2
Ë&& !deföed(
_XPG5
Ë&& !deföed(
_LP64
)

59 
size_t
 
	tsockÀn_t
;

61 
uöt32_t
 
	tsockÀn_t
;

64 #i‡
deföed
(
_XPG4_2
)

65 
sockÀn_t
 *
	tPsockÀn_t
;

67 *
	tPsockÀn_t
;

75 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

76 #i‚def 
NC_TPI_CLTS


77 
	#NC_TPI_CLTS
 1

	)

78 
	#NC_TPI_COTS
 2

	)

79 
	#NC_TPI_COTS_ORD
 3

	)

80 
	#NC_TPI_RAW
 4

	)

87 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

88 
	#SOCK_STREAM
 
NC_TPI_COTS


	)

89 
	#SOCK_DGRAM
 
NC_TPI_CLTS


	)

90 
	#SOCK_RAW
 
NC_TPI_RAW


	)

92 
	#SOCK_STREAM
 2

	)

93 
	#SOCK_DGRAM
 1

	)

94 
	#SOCK_RAW
 4

	)

96 
	#SOCK_RDM
 5

	)

97 
	#SOCK_SEQPACKET
 6

	)

102 
	#SO_DEBUG
 0x0001

	)

103 
	#SO_ACCEPTCONN
 0x0002

	)

104 
	#SO_REUSEADDR
 0x0004

	)

105 
	#SO_KEEPALIVE
 0x0008

	)

106 
	#SO_DONTROUTE
 0x0010

	)

107 
	#SO_BROADCAST
 0x0020

	)

108 
	#SO_USELOOPBACK
 0x0040

	)

109 
	#SO_LINGER
 0x0080

	)

110 
	#SO_OOBINLINE
 0x0100

	)

111 
	#SO_DGRAM_ERRIND
 0x0200

	)

117 
	#SO_DONTLINGER
 (~
SO_LINGER
)

	)

122 
	#SO_SNDBUF
 0x1001

	)

123 
	#SO_RCVBUF
 0x1002

	)

124 
	#SO_SNDLOWAT
 0x1003

	)

125 
	#SO_RCVLOWAT
 0x1004

	)

126 
	#SO_SNDTIMEO
 0x1005

	)

127 
	#SO_RCVTIMEO
 0x1006

	)

128 
	#SO_ERROR
 0x1007

	)

129 
	#SO_TYPE
 0x1008

	)

130 
	#SO_PROTOTYPE
 0x1009

	)

133 
	#SCM_RIGHTS
 0x1010

	)

135 
	#SO_STATE
 0x2000

	)

136 #ifdef 
_KERNEL


137 
	#SO_SRCADDR
 0x2001

	)

138 
	#SO_FILEP
 0x2002

	)

139 
	#SO_UNIX_CLOSE
 0x2003

	)

145 
	slögî
 {

146 
	gl_⁄off
;

147 
	gl_lögî
;

153 
	#SOL_SOCKET
 0xffff

	)

158 
	#AF_UNSPEC
 0

	)

159 
	#AF_UNIX
 1

	)

160 
	#AF_INET
 2

	)

161 
	#AF_IMPLINK
 3

	)

162 
	#AF_PUP
 4

	)

163 
	#AF_CHAOS
 5

	)

164 
	#AF_NS
 6

	)

165 
	#AF_NBS
 7

	)

166 
	#AF_ECMA
 8

	)

167 
	#AF_DATAKIT
 9

	)

168 
	#AF_CCITT
 10

	)

169 
	#AF_SNA
 11

	)

170 
	#AF_DEC√t
 12

	)

171 
	#AF_DLI
 13

	)

172 
	#AF_LAT
 14

	)

173 
	#AF_HYLINK
 15

	)

174 
	#AF_APPLETALK
 16

	)

175 
	#AF_NIT
 17

	)

176 
	#AF_802
 18

	)

177 
	#AF_OSI
 19

	)

178 
	#AF_X25
 20

	)

179 
	#AF_OSINET
 21

	)

180 
	#AF_GOSIP
 22

	)

181 
	#AF_IPX
 23

	)

182 
	#AF_ROUTE
 24

	)

183 
	#AF_LINK
 25

	)

184 
	#AF_INET6
 26

	)

185 
	#AF_KEY
 27

	)

187 
	#AF_MAX
 27

	)

193 
	ssockaddr
 {

194 
ß_Ámûy_t
 
	gß_Ámûy
;

195 
	gß_d©a
[14];

198 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

199 
	~<√töë/ö.h
>

200 
	~<sys/un.h
>

201 
	~<√t/if_dl.h
>

212 
	#_SS_MAXSIZE
 256

	)

227 
	tsockaddr_maxÆign_t
;

229 
	#_SS_ALIGNSIZE
 ( (
sockaddr_maxÆign_t
))

	)

234 
	#_SS_PAD1SIZE
 (
_SS_ALIGNSIZE
 -  (
ß_Ámûy_t
))

	)

235 
	#_SS_PAD2SIZE
 (
_SS_MAXSIZE
 - ( (
ß_Ámûy_t
)+ \

236 
_SS_PAD1SIZE
 + 
_SS_ALIGNSIZE
))

	)

238 
	ssockaddr_°‹age
 {

239 
ß_Ámûy_t
 
	gss_Ámûy
;

241 
	g_ss_∑d1
[
_SS_PAD1SIZE
];

242 
sockaddr_maxÆign_t
 
	g_ss_Æign
;

243 
	g_ss_∑d2
[
_SS_PAD2SIZE
];

250 
	#PF_UNSPEC
 
AF_UNSPEC


	)

251 
	#PF_UNIX
 
AF_UNIX


	)

252 
	#PF_INET
 
AF_INET


	)

253 
	#PF_IMPLINK
 
AF_IMPLINK


	)

254 
	#PF_PUP
 
AF_PUP


	)

255 
	#PF_CHAOS
 
AF_CHAOS


	)

256 
	#PF_NS
 
AF_NS


	)

257 
	#PF_NBS
 
AF_NBS


	)

258 
	#PF_ECMA
 
AF_ECMA


	)

259 
	#PF_DATAKIT
 
AF_DATAKIT


	)

260 
	#PF_CCITT
 
AF_CCITT


	)

261 
	#PF_SNA
 
AF_SNA


	)

262 
	#PF_DEC√t
 
AF_DEC√t


	)

263 
	#PF_DLI
 
AF_DLI


	)

264 
	#PF_LAT
 
AF_LAT


	)

265 
	#PF_HYLINK
 
AF_HYLINK


	)

266 
	#PF_APPLETALK
 
AF_APPLETALK


	)

267 
	#PF_NIT
 
AF_NIT


	)

268 
	#PF_802
 
AF_802


	)

269 
	#PF_OSI
 
AF_OSI


	)

270 
	#PF_X25
 
AF_X25


	)

271 
	#PF_OSINET
 
AF_OSINET


	)

272 
	#PF_GOSIP
 
AF_GOSIP


	)

273 
	#PF_IPX
 
AF_IPX


	)

274 
	#PF_ROUTE
 
AF_ROUTE


	)

275 
	#PF_LINK
 
AF_LINK


	)

276 
	#PF_INET6
 
AF_INET6


	)

277 
	#PF_KEY
 
AF_KEY


	)

279 
	#PF_MAX
 
AF_MAX


	)

284 
	#SOMAXCONN
 5

	)

289 
	smsghdr
 {

290 *
	gmsg_«me
;

291 
sockÀn_t
 
	gmsg_«mñí
;

292 
iovec
 *
	gmsg_iov
;

293 
	gmsg_iovÀn
;

295 #i‡
deföed
(
_XPG4_2
Ë|| deföed(
_KERNEL
)

296 *
	gmsg_c⁄åﬁ
;

297 
sockÀn_t
 
	gmsg_c⁄åﬁÀn
;

298 
	gmsg_Êags
;

300 
ˇddr_t
 
	gmsg_ac¸ights
;

301 
	gmsg_ac¸ight¶í
;

305 #if 
deföed
(
_KERNEL
)

312 
	somsghdr
 {

313 *
	gmsg_«me
;

314 
sockÀn_t
 
	gmsg_«mñí
;

315 
iovec
 *
	gmsg_iov
;

316 
	gmsg_iovÀn
;

317 
ˇddr_t
 
	gmsg_ac¸ights
;

318 
	gmsg_ac¸ight¶í
;

321 
	#nmsghdr
 
msghdr


	)

323 #i‡
deföed
(
_SYSCALL32
)

325 
	somsghdr32
 {

326 
ˇddr32_t
 
	gmsg_«me
;

327 
uöt32_t
 
	gmsg_«mñí
;

328 
ˇddr32_t
 
	gmsg_iov
;

329 
öt32_t
 
	gmsg_iovÀn
;

330 
ˇddr32_t
 
	gmsg_ac¸ights
;

331 
uöt32_t
 
	gmsg_ac¸ight¶í
;

334 
	smsghdr32
 {

335 
ˇddr32_t
 
	gmsg_«me
;

336 
uöt32_t
 
	gmsg_«mñí
;

337 
ˇddr32_t
 
	gmsg_iov
;

338 
öt32_t
 
	gmsg_iovÀn
;

339 
ˇddr32_t
 
	gmsg_c⁄åﬁ
;

340 
uöt32_t
 
	gmsg_c⁄åﬁÀn
;

341 
öt32_t
 
	gmsg_Êags
;

344 
	#nmsghdr32
 
msghdr32


	)

349 
	#MSG_OOB
 0x1

	)

350 
	#MSG_PEEK
 0x2

	)

351 
	#MSG_DONTROUTE
 0x4

	)

353 
	#MSG_EOR
 0x8

	)

354 
	#MSG_CTRUNC
 0x10

	)

355 
	#MSG_TRUNC
 0x20

	)

356 
	#MSG_WAITALL
 0x40

	)

358 
	#MSG_DONTWAIT
 0x80

	)

359 
	#MSG_XPG4_2
 0x8000

	)

361 
	#MSG_MAXIOVLEN
 16

	)

364 
	#SHUT_RD
 0

	)

365 
	#SHUT_WR
 1

	)

366 
	#SHUT_RDWR
 2

	)

368 
	scmsghdr
 {

369 
sockÀn_t
 
	gcmsg_Àn
;

370 
	gcmsg_Àvñ
;

371 
	gcmsg_ty≥
;

374 #i‡
deföed
(
_XPG4_2
Ë|| deföed(
_KERNEL
)

375 #i‡
deföed
(
__•¨c
)

377 
	#_CMSG_HDR_ALIGNMENT
 8

	)

380 
	#_CMSG_HDR_ALIGNMENT
 4

	)

384 #i‡
deföed
(
_XPG4_2
)

389 
	#_CMSG_DATA_ALIGNMENT
 ( ())

	)

390 
	#_CMSG_HDR_ALIGN
(
x
) (((
uöçå_t
)(xË+ 
_CMSG_HDR_ALIGNMENT
 - 1) & \

391 ~(
_CMSG_HDR_ALIGNMENT
 - 1))

	)

392 
	#_CMSG_DATA_ALIGN
(
x
) (((
uöçå_t
)(xË+ 
_CMSG_DATA_ALIGNMENT
 - 1) & \

393 ~(
_CMSG_DATA_ALIGNMENT
 - 1))

	)

394 
	#CMSG_DATA
(
c
) \

395 ((*)
	`_CMSG_DATA_ALIGN
((
cmsghdr
 *)(
c
Ë+ 1))

	)

396 
	#CMSG_FIRSTHDR
(
m
) ((
cmsghdr
 *)((m)->
msg_c⁄åﬁ
))

	)

397 
	#CMSG_NXTHDR
(
m
, 
c
) \

398 ((((
uöçå_t
)
	`_CMSG_HDR_ALIGN
((*)(
c
) + \

399 ((
cmsghdr
 *)(
c
))->
cmsg_Àn
) +  (cmsghdr)) > \

400 (((
uöçå_t
)((
msghdr
 *)(
m
))->
msg_c⁄åﬁ
) + \

401 ((
uöçå_t
)((
msghdr
 *)(
m
))->
msg_c⁄åﬁÀn
))) ? \

402 ((
cmsghdr
 *)0) : \

403 ((
cmsghdr
 *)
	`_CMSG_HDR_ALIGN
((*)(
c
) + \

404 ((
cmsghdr
 *)(
c
))->
cmsg_Àn
)))

	)

407 #ifdef 
_XPG4_2


408 #ifdef 
__PRAGMA_REDEFINE_EXTNAME


409 #¥agm®
ªdeföe_exäame
 
böd
 
__x√t_böd


410 #¥agm®
ªdeföe_exäame
 
c⁄√˘
 
__x√t_c⁄√˘


411 #¥agm®
ªdeföe_exäame
 
ªcvmsg
 
__x√t_ªcvmsg


412 #¥agm®
ªdeföe_exäame
 
£ndmsg
 
__x√t_£ndmsg


413 #¥agm®
ªdeföe_exäame
 
£ndto
 
__x√t_£ndto


414 #¥agm®
ªdeföe_exäame
 
sockë
 
__x√t_sockë


415 #¥agm®
ªdeföe_exäame
 
sockë∑ú
 
__x√t_sockë∑ú


416 #¥agm®
ªdeföe_exäame
 
gësock›t
 
__x√t_gësock›t


418 
	#böd
 
__x√t_böd


	)

419 
	#c⁄√˘
 
__x√t_c⁄√˘


	)

420 
	#ªcvmsg
 
__x√t_ªcvmsg


	)

421 
	#£ndmsg
 
__x√t_£ndmsg


	)

422 
	#£ndto
 
__x√t_£ndto


	)

423 
	#sockë
 
__x√t_sockë


	)

424 
	#sockë∑ú
 
__x√t_sockë∑ú


	)

425 
	#gësock›t
 
__x√t_gësock›t


	)

430 #i‡
deföed
(
_XPG4_2
Ë&& !deföed(
_XPG5
)

431 #ifdef 
__PRAGMA_REDEFINE_EXTNAME


432 #¥agm®
ªdeföe_exäame
 
li°í
 
__x√t_li°í


434 
	#li°í
 
__x√t_li°í


	)

438 #i‚def 
_KERNEL


439 #ifdef 
__STDC__


440 
ac˚±
(, 
sockaddr
 *, 
PsockÀn_t
);

441 
böd
(, c⁄° 
sockaddr
 *, 
sockÀn_t
);

442 
c⁄√˘
(, c⁄° 
sockaddr
 *, 
sockÀn_t
);

443 
gë≥î«me
(, 
sockaddr
 *, 
PsockÀn_t
);

444 
gësock«me
(, 
sockaddr
 *, 
PsockÀn_t
);

445 
gësock›t
(, , , *, 
PsockÀn_t
);

446 
li°í
(, );

447 
sockë∑ú
(, , , *);

448 
ssize_t
 
ªcv
(, *, 
size_t
, );

449 
ssize_t
 
ªcv‰om
(, *, 
size_t
, , 
sockaddr
 *,

450 
PsockÀn_t
);

451 
ssize_t
 
ªcvmsg
(, 
msghdr
 *, );

452 
ssize_t
 
£nd
(, c⁄° *, 
size_t
, );

453 
ssize_t
 
£ndmsg
(, c⁄° 
msghdr
 *, );

454 
ssize_t
 
£ndto
(, c⁄° *, 
size_t
, , c⁄° 
sockaddr
 *,

455 
sockÀn_t
);

456 
£tsock›t
(, , , c⁄° *, 
sockÀn_t
);

457 
shutdown
(, );

458 
sockë
(, , );

460 
ac˚±
();

461 
böd
();

462 
c⁄√˘
();

463 
gë≥î«me
();

464 
gësock«me
();

465 
gësock›t
();

466 
li°í
();

467 
ªcv
();

468 
ªcv‰om
();

469 
£nd
();

470 
£ndto
();

471 
£tsock›t
();

472 
sockë
();

473 
ªcvmsg
();

474 
£ndmsg
();

475 
shutdown
();

476 
sockë∑ú
();

480 #ifdef 
__˝lu•lus


	@/usr/include/sys/stat.h

15 #i‚de‡
_SYS_STAT_H


16 
	#_SYS_STAT_H


	)

18 #¥agm®
idít
 "@(#)stat.h 1.2 99/05/19 SMI"

20 
	~<sys/„©uª_ã°s.h
>

21 
	~<sys/ty≥s.h
>

23 #ifdef 
__˝lu•lus


40 #i‡!
deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
) || \

41 
	$deföed
(
__EXTENSIONS__
)

42 
	~<sys/time_im∂.h
>

44 
	~<sys/time_°d_im∂.h
>

47 
	#_ST_FSTYPSZ
 16

	)

53 #i‡
	`deföed
(
_KERNEL
)

57 
	so_°©
 {

58 
o_dev_t
 
°_dev
;

59 
o_öo_t
 
°_öo
;

60 
o_mode_t
 
°_mode
;

61 
o_∆ök_t
 
°_∆ök
;

62 
o_uid_t
 
°_uid
;

63 
o_gid_t
 
°_gid
;

64 
o_dev_t
 
°_rdev
;

65 
off32_t
 
°_size
;

66 
time32_t
 
°_©ime
;

67 
time32_t
 
°_mtime
;

68 
time32_t
 
°_˘ime
;

73 #i‡
	`deföed
(
_LP64
)

75 
	s°©
 {

76 
dev_t
 
°_dev
;

77 
öo_t
 
°_öo
;

78 
mode_t
 
°_mode
;

79 
∆ök_t
 
°_∆ök
;

80 
uid_t
 
°_uid
;

81 
gid_t
 
°_gid
;

82 
dev_t
 
°_rdev
;

83 
off_t
 
°_size
;

84 
time°ruc_t
 
°_©im
;

85 
time°ruc_t
 
°_mtim
;

86 
time°ruc_t
 
°_˘im
;

87 
blksize_t
 
°_blksize
;

88 
blk˙t_t
 
°_blocks
;

89 
°_f°y≥
[
_ST_FSTYPSZ
];

92 
	s°©64
 {

93 
dev_t
 
°_dev
;

94 
öo_t
 
°_öo
;

95 
mode_t
 
°_mode
;

96 
∆ök_t
 
°_∆ök
;

97 
uid_t
 
°_uid
;

98 
gid_t
 
°_gid
;

99 
dev_t
 
°_rdev
;

100 
off_t
 
°_size
;

101 
time°ruc_t
 
°_©im
;

102 
time°ruc_t
 
°_mtim
;

103 
time°ruc_t
 
°_˘im
;

104 
blksize_t
 
°_blksize
;

105 
blk˙t_t
 
°_blocks
;

106 
°_f°y≥
[
_ST_FSTYPSZ
];

111 
	s°©
 {

112 
dev_t
 
°_dev
;

113 
°_∑d1
[3];

115 
öo_t
 
°_öo
;

116 
mode_t
 
°_mode
;

117 
∆ök_t
 
°_∆ök
;

118 
uid_t
 
°_uid
;

119 
gid_t
 
°_gid
;

120 
dev_t
 
°_rdev
;

121 
°_∑d2
[2];

122 
off_t
 
°_size
;

123 
°_∑d3
;

124 
time°ruc_t
 
°_©im
;

125 
time°ruc_t
 
°_mtim
;

126 
time°ruc_t
 
°_˘im
;

127 
blksize_t
 
°_blksize
;

128 
blk˙t_t
 
°_blocks
;

129 
°_f°y≥
[
_ST_FSTYPSZ
];

130 
°_∑d4
[8];

133 
	s°©64
 {

134 
dev_t
 
°_dev
;

135 
°_∑d1
[3];

137 
öo64_t
 
°_öo
;

138 
mode_t
 
°_mode
;

139 
∆ök_t
 
°_∆ök
;

140 
uid_t
 
°_uid
;

141 
gid_t
 
°_gid
;

142 
dev_t
 
°_rdev
;

143 
°_∑d2
[2];

144 
off64_t
 
°_size
;

145 
time°ruc_t
 
°_©im
;

146 
time°ruc_t
 
°_mtim
;

147 
time°ruc_t
 
°_˘im
;

148 
blksize_t
 
°_blksize
;

149 
blk˙t64_t
 
°_blocks
;

150 
°_f°y≥
[
_ST_FSTYPSZ
];

151 
°_∑d4
[8];

161 #i‡!
	`deföed
(
_LP64
Ë&& 
_FILE_OFFSET_BITS
 == 64

162 #ifdef 
__PRAGMA_REDEFINE_EXTNAME


163 #¥agm®
ªdeföe_exäame
 
f°©
 
f°©64


164 #¥agm®
ªdeföe_exäame
 
°©
 
°©64


166 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

167 
	`deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

168 #¥agma 
ªdeföe_exäame
 
l°©
 
l°©64


171 
	#f°©
 
f°©64


	)

172 
	#°©
 
°©64


	)

173 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

174 
	`deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

175 
	#l°©
 
l°©64


	)

184 #i‡
	`deföed
(
_LP64
Ë&& deföed(
_LARGEFILE64_SOURCE
)

185 #ifdef 
__PRAGMA_REDEFINE_EXTNAME


186 #¥agma 
ªdeföe_exäame
 
f°©64
 
f°©


187 #¥agma 
ªdeföe_exäame
 
°©64
 
°©


188 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

189 
	`deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

190 #¥agma 
ªdeföe_exäame
 
l°©64
 
l°©


193 
	#f°©64
 
f°©


	)

194 
	#°©64
 
°©


	)

195 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

196 
	`deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

197 
	#l°©64
 
l°©


	)

206 #i‡
	`deföed
(
_LP64
)

208 
	s°©
 {

209 
dev_t
 
°_dev
;

210 
öo_t
 
°_öo
;

211 
mode_t
 
°_mode
;

212 
∆ök_t
 
°_∆ök
;

213 
uid_t
 
°_uid
;

214 
gid_t
 
°_gid
;

215 
dev_t
 
°_rdev
;

216 
off_t
 
°_size
;

217 #i‡!
	`deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
) || \

218 
	`deföed
(
__EXTENSIONS__
)

219 
time°ruc_t
 
°_©im
;

220 
time°ruc_t
 
°_mtim
;

221 
time°ruc_t
 
°_˘im
;

223 
_time°ruc_t
 
°_©im
;

224 
_time°ruc_t
 
°_mtim
;

225 
_time°ruc_t
 
°_˘im
;

227 
blksize_t
 
°_blksize
;

228 
blk˙t_t
 
°_blocks
;

229 
°_f°y≥
[
_ST_FSTYPSZ
];

234 
	s°©
 {

235 
dev_t
 
°_dev
;

236 
°_∑d1
[3];

237 
öo_t
 
°_öo
;

238 
mode_t
 
°_mode
;

239 
∆ök_t
 
°_∆ök
;

240 
uid_t
 
°_uid
;

241 
gid_t
 
°_gid
;

242 
dev_t
 
°_rdev
;

243 
°_∑d2
[2];

244 
off_t
 
°_size
;

245 #i‡
_FILE_OFFSET_BITS
 != 64

246 
°_∑d3
;

248 #i‡!
	`deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
) || \

249 
	`deföed
(
__EXTENSIONS__
)

250 
time°ruc_t
 
°_©im
;

251 
time°ruc_t
 
°_mtim
;

252 
time°ruc_t
 
°_˘im
;

254 
_time°ruc_t
 
°_©im
;

255 
_time°ruc_t
 
°_mtim
;

256 
_time°ruc_t
 
°_˘im
;

258 
blksize_t
 
°_blksize
;

259 
blk˙t_t
 
°_blocks
;

260 
°_f°y≥
[
_ST_FSTYPSZ
];

261 
°_∑d4
[8];

267 #if 
	`deföed
(
_LARGEFILE64_SOURCE
Ë&& !((
_FILE_OFFSET_BITS
 == 64) && \

268 !
	`deföed
(
__PRAGMA_REDEFINE_EXTNAME
))

269 #i‡
	`deföed
(
_LP64
)

271 
	s°©64
 {

272 
dev_t
 
°_dev
;

273 
öo_t
 
°_öo
;

274 
mode_t
 
°_mode
;

275 
∆ök_t
 
°_∆ök
;

276 
uid_t
 
°_uid
;

277 
gid_t
 
°_gid
;

278 
dev_t
 
°_rdev
;

279 
off_t
 
°_size
;

280 #i‡!
	`deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
) || \

281 
	`deföed
(
__EXTENSIONS__
)

282 
time°ruc_t
 
°_©im
;

283 
time°ruc_t
 
°_mtim
;

284 
time°ruc_t
 
°_˘im
;

286 
_time°ruc_t
 
°_©im
;

287 
_time°ruc_t
 
°_mtim
;

288 
_time°ruc_t
 
°_˘im
;

290 
blksize_t
 
°_blksize
;

291 
blk˙t_t
 
°_blocks
;

292 
°_f°y≥
[
_ST_FSTYPSZ
];

297 
	s°©64
 {

298 
dev_t
 
°_dev
;

299 
°_∑d1
[3];

300 
öo64_t
 
°_öo
;

301 
mode_t
 
°_mode
;

302 
∆ök_t
 
°_∆ök
;

303 
uid_t
 
°_uid
;

304 
gid_t
 
°_gid
;

305 
dev_t
 
°_rdev
;

306 
°_∑d2
[2];

307 
off64_t
 
°_size
;

308 #i‡!
	`deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
) || \

309 
	`deföed
(
__EXTENSIONS__
)

310 
time°ruc_t
 
°_©im
;

311 
time°ruc_t
 
°_mtim
;

312 
time°ruc_t
 
°_˘im
;

314 
_time°ruc_t
 
°_©im
;

315 
_time°ruc_t
 
°_mtim
;

316 
_time°ruc_t
 
°_˘im
;

318 
blksize_t
 
°_blksize
;

319 
blk˙t64_t
 
°_blocks
;

320 
°_f°y≥
[
_ST_FSTYPSZ
];

321 
°_∑d4
[8];

327 #i‡!
	`deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
) || \

328 
	`deföed
(
__EXTENSIONS__
)

329 
	#°_©ime
 
°_©im
.
tv_£c


	)

330 
	#°_mtime
 
°_mtim
.
tv_£c


	)

331 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

333 
	#°_©ime
 
°_©im
.
__tv_£c


	)

334 
	#°_mtime
 
°_mtim
.
__tv_£c


	)

335 
	#°_˘ime
 
°_˘im
.
__tv_£c


	)

340 #i‡
	`deföed
(
_SYSCALL32
)

346 
	s°©32
 {

347 
dev32_t
 
°_dev
;

348 
öt32_t
 
°_∑d1
[3];

349 
öo32_t
 
°_öo
;

350 
mode32_t
 
°_mode
;

351 
∆ök32_t
 
°_∆ök
;

352 
uid32_t
 
°_uid
;

353 
gid32_t
 
°_gid
;

354 
dev32_t
 
°_rdev
;

355 
öt32_t
 
°_∑d2
[2];

356 
off32_t
 
°_size
;

357 
öt32_t
 
°_∑d3
;

358 
time°ruc32_t
 
°_©im
;

359 
time°ruc32_t
 
°_mtim
;

360 
time°ruc32_t
 
°_˘im
;

361 
öt32_t
 
°_blksize
;

362 
blk˙t32_t
 
°_blocks
;

363 
°_f°y≥
[
_ST_FSTYPSZ
];

364 
öt32_t
 
°_∑d4
[8];

367 #ifde‡
__ü64


368 #¥agm®
	`∑ck
(4)

370 
	s°©64_32
 {

371 
dev32_t
 
°_dev
;

372 
öt32_t
 
°_∑d1
[3];

373 
öo64_t
 
°_öo
;

374 
mode32_t
 
°_mode
;

375 
∆ök32_t
 
°_∆ök
;

376 
uid32_t
 
°_uid
;

377 
gid32_t
 
°_gid
;

378 
dev32_t
 
°_rdev
;

379 
öt32_t
 
°_∑d2
[2];

380 
off64_t
 
°_size
;

381 
time°ruc32_t
 
°_©im
;

382 
time°ruc32_t
 
°_mtim
;

383 
time°ruc32_t
 
°_˘im
;

384 
öt32_t
 
°_blksize
;

385 
blk˙t64_t
 
°_blocks
;

386 
°_f°y≥
[
_ST_FSTYPSZ
];

387 
öt32_t
 
°_∑d4
[8];

389 #ifde‡
__ü64


390 #¥agm®
	`∑ck
()

399 
	#S_IFMT
 0xF000

	)

400 
	#S_IAMB
 0x1FF

	)

401 
	#S_IFIFO
 0x1000

	)

402 
	#S_IFCHR
 0x2000

	)

403 
	#S_IFDIR
 0x4000

	)

404 
	#S_IFNAM
 0x5000

	)

405 
	#S_INSEM
 0x1

	)

406 
	#S_INSHD
 0x2

	)

407 
	#S_IFBLK
 0x6000

	)

408 
	#S_IFREG
 0x8000

	)

409 
	#S_IFLNK
 0xA000

	)

410 
	#S_IFSOCK
 0xC000

	)

411 
	#S_IFDOOR
 0xD000

	)

412 
	#S_ISUID
 0x800

	)

413 
	#S_ISGID
 0x400

	)

414 
	#S_ISVTX
 0x200

	)

415 
	#S_IREAD
 00400

	)

416 
	#S_IWRITE
 00200

	)

417 
	#S_IEXEC
 00100

	)

418 
	#S_ENFMT
 
S_ISGID


	)

422 
	#S_IRWXU
 00700

	)

423 
	#S_IRUSR
 00400

	)

424 
	#S_IWUSR
 00200

	)

425 
	#S_IXUSR
 00100

	)

426 
	#S_IRWXG
 00070

	)

427 
	#S_IRGRP
 00040

	)

428 
	#S_IWGRP
 00020

	)

429 
	#S_IXGRP
 00010

	)

430 
	#S_IRWXO
 00007

	)

431 
	#S_IROTH
 00004

	)

432 
	#S_IWOTH
 00002

	)

433 
	#S_IXOTH
 00001

	)

436 
	#S_ISFIFO
(
mode
) (((mode)&0xF000Ë=0x1000)

	)

437 
	#S_ISCHR
(
mode
) (((mode)&0xF000Ë=0x2000)

	)

438 
	#S_ISDIR
(
mode
) (((mode)&0xF000Ë=0x4000)

	)

439 
	#S_ISBLK
(
mode
) (((mode)&0xF000Ë=0x6000)

	)

440 
	#S_ISREG
(
mode
) (((mode)&0xF000Ë=0x8000)

	)

441 
	#S_ISLNK
(
mode
) (((mode)&0xF000Ë=0xa000)

	)

442 
	#S_ISSOCK
(
mode
) (((mode)&0xF000Ë=0xc000)

	)

443 
	#S_ISDOOR
(
mode
) (((mode)&0xF000Ë=0xd000)

	)

446 
	#S_TYPEISMQ
(
_buf
) (0)

	)

447 
	#S_TYPEISSEM
(
_buf
) (0)

	)

448 
	#S_TYPEISSHM
(
_buf
) (0)

	)

450 #i‡
	`deföed
(
i386
Ë|| deföed(
__i386
Ë|| (deföed(
__ü64
Ë&& deföed(
_KERNEL
))

457 
	#_R3_MKNOD_VER
 1

	)

458 
	#_MKNOD_VER
 2

	)

459 
	#_R3_STAT_VER
 1

	)

460 
	#_STAT_VER
 2

	)

463 #i‡!
	`deföed
(
_KERNEL
)

465 #i‡
	`deföed
(
__STDC__
)

467 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

468 (
_POSIX_C_SOURCE
 > 2Ë|| 
	`deföed
(
_XPG4_2
) || \

469 
	`deföed
(
__EXTENSIONS__
)

470 
	`fchmod
(, 
mode_t
);

473 
	`chmod
(c⁄° *, 
mode_t
);

474 
	`mkdú
(c⁄° *, 
mode_t
);

475 
	`mkfifo
(c⁄° *, 
mode_t
);

476 
mode_t
 
	`umask
(mode_t);

479 #if 
	`deföed
(
_LARGEFILE64_SOURCE
Ë&& !((
_FILE_OFFSET_BITS
 == 64) && \

480 !
	`deföed
(
__PRAGMA_REDEFINE_EXTNAME
))

481 
	`f°©64
(, 
°©64
 *);

482 
	`°©64
(c⁄° *, 
°©64
 *);

483 
	`l°©64
(c⁄° *, 
°©64
 *);

488 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
) || \

489 (
_POSIX_C_SOURCE
 > 2Ë|| 
	`deföed
(
_XPG4_2
) || \

490 
	`deföed
(
__EXTENSIONS__
)

491 
	`fchmod
();

494 
	`chmod
();

495 
	`mkdú
();

496 
	`mkfifo
();

497 
mode_t
 
	`umask
();

500 #if 
	`deföed
(
_LARGEFILE64_SOURCE
Ë&& !((
_FILE_OFFSET_BITS
 == 64) && \

501 !
	`deföed
(
__PRAGMA_REDEFINE_EXTNAME
))

502 
	`f°©64
();

503 
	`°©64
();

504 
	`l°©64
();

509 
	~<sys/°©_im∂.h
>

513 #ifdef 
__˝lu•lus


514 
	}
}

	@/usr/include/sys/time.h

19 #i‚de‡
_SYS_TIME_H


20 
	#_SYS_TIME_H


	)

22 #¥agm®
idít
 "@(#)time.h 2.64 99/10/05 SMI"

24 
	~<sys/„©uª_ã°s.h
>

31 #ifdef 
__˝lu•lus


35 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

36 
deföed
(
__EXTENSIONS__
Ë|| 
	$deföed
(
_XPG4_2
)

37 #i‚def 
_ASM


39 #i‚de‡
_TIME_T


40 
	#_TIME_T


	)

41 
	ttime_t
;

44 #i‚def 
_SUSECONDS_T


45 
	#_SUSECONDS_T


	)

46 
	tsu£c⁄ds_t
;

49 
	stimevÆ
 {

50 
time_t
 
tv_£c
;

51 
su£c⁄ds_t
 
tv_u£c
;

54 #i‡
	`deföed
(
_SYSCALL32
)

56 
	~<sys/ty≥s32.h
>

58 
	#TIMEVAL32_TO_TIMEVAL
(
tv
, 
tv32
) { \

59 (
tv
)->
tv_£c
 = (
time_t
)(
tv32
)->tv_sec; \

60 (
tv
)->
tv_u£c
 = (
tv32
)->tv_usec; \

61 
	}

	)
}

63 
	#TIMEVAL_TO_TIMEVAL32
(
tv32
, 
tv
) { \

64 (
tv32
)->
tv_£c
 = (
time32_t
)(
tv
)->tv_sec; \

65 (
tv32
)->
tv_u£c
 = (
tv
)->tv_usec; \

66 }

	)

68 
	#TIME32_MAX
 
INT32_MAX


	)

69 
	#TIME32_MIN
 
INT32_MIN


	)

71 
	#TIMEVAL_OVERFLOW
(
tv
) \

72 ((
tv
)->
tv_£c
 < 
TIME32_MIN
 || (tv)->tv_£¯> 
TIME32_MAX
)

	)

79 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

80 
	$deföed
(
__EXTENSIONS__
)

81 #i‚def 
_ASM


82 
	stimez⁄e
 {

83 
tz_möuãswe°
;

84 
tz_d°time
;

90 #ifdef 
__˝lu•lus


91 
	}
}

99 #i‚def 
_ASM


100 
	~<sys/ty≥s.h
>

103 #ifdef 
__˝lu•lus


107 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

108 
	$deföed
(
__EXTENSIONS__
)

110 
	#DST_NONE
 0

	)

111 
	#DST_USA
 1

	)

112 
	#DST_AUST
 2

	)

113 
	#DST_WET
 3

	)

114 
	#DST_MET
 4

	)

115 
	#DST_EET
 5

	)

116 
	#DST_CAN
 6

	)

117 
	#DST_GB
 7

	)

118 
	#DST_RUM
 8

	)

119 
	#DST_TUR
 9

	)

120 
	#DST_AUSTALT
 10

	)

127 
	#timîis£t
(
tvp
) (—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

128 
	#timîcmp
(
tvp
, 
uvp
, 
cmp
) \

130 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_sec || \

131 ((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec && \

133 (
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_u£c))

	)

135 
	#timî˛ór
(
tvp
) (tvp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0

	)

139 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

140 
	`deföed
(
_XPG4_2
Ë|| 
	$deföed
(
__EXTENSIONS__
)

145 
	#ITIMER_REAL
 0

	)

146 
	#ITIMER_VIRTUAL
 1

	)

147 
	#ITIMER_PROF
 2

	)

150 
	#ITIMER_REALPROF
 3

	)

154 #i‚def 
_ASM


155 
	sôimîvÆ
 {

156 
timevÆ
 
ô_öãrvÆ
;

157 
timevÆ
 
ô_vÆue
;

160 #i‡
	`deföed
(
_SYSCALL32
)

162 
	sôimîvÆ32
 {

163 
timevÆ32
 
ô_öãrvÆ
;

164 
timevÆ32
 
ô_vÆue
;

167 
	#ITIMERVAL32_TO_ITIMERVAL
(
ôv
, 
ôv32
) { \

168 
	`TIMEVAL32_TO_TIMEVAL
(&(
ôv
)->
ô_öãrvÆ
, &(
ôv32
)->it_interval); \

169 
	`TIMEVAL32_TO_TIMEVAL
(&(
ôv
)->
ô_vÆue
, &(
ôv32
)->it_value); \

170 
	}

	)
}

172 
	#ITIMERVAL_TO_ITIMERVAL32
(
ôv32
, 
ôv
) { \

173 
	`TIMEVAL_TO_TIMEVAL32
(&(
ôv32
)->
ô_öãrvÆ
, &(
ôv
)->it_interval); \

174 
	`TIMEVAL_TO_TIMEVAL32
(&(
ôv32
)->
ô_vÆue
, &(
ôv
)->it_value); \

175 }

	)

177 
	#ITIMERVAL_OVERFLOW
(
ôv
) \

178 (
	`TIMEVAL_OVERFLOW
(&(
ôv
)->
ô_öãrvÆ
) || \

179 
	`TIMEVAL_OVERFLOW
(&(
ôv
)->
ô_vÆue
))

	)

186 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

187 
	$deföed
(
__EXTENSIONS__
)

191 
	#SEC
 1

	)

192 
	#MILLISEC
 1000

	)

193 
	#MICROSEC
 1000000

	)

194 
	#NANOSEC
 1000000000

	)

198 #i‚def 
_ASM


203 
l⁄gl⁄g_t
 
	thπime_t
;

205 #ifde‡
_KERNEL


207 
	~<sys/time_im∂.h
>

208 
	~<sys/muãx.h
>

210 
tick_≥r_m£c
;

211 
m£c_≥r_tick
;

212 
u£c_≥r_tick
;

213 
n£c_≥r_tick
;

219 
	#TICK_TO_SEC
(
tick
) (—ickË/ 
hz
)

	)

220 
	#SEC_TO_TICK
(
£c
) ((£cË* 
hz
)

	)

222 
	#TICK_TO_MSEC
(
tick
) \

223 (
m£c_≥r_tick
 ? (
tick
Ë* m£c_≥r_tick : (tickË/ 
tick_≥r_m£c
)

	)

224 
	#MSEC_TO_TICK
(
m£c
) \

225 (
m£c_≥r_tick
 ? (
m£c
Ë/ m£c_≥r_tick : (m£cË* 
tick_≥r_m£c
)

	)

226 
	#MSEC_TO_TICK_ROUNDUP
(
m£c
) \

227 (
m£c_≥r_tick
 ? \

228 ((
m£c
Ë=0 ? 0 : ((m£cË- 1Ë/ 
m£c_≥r_tick
 + 1) : \

229 (
m£c
Ë* 
tick_≥r_m£c
)

	)

231 
	#TICK_TO_USEC
(
tick
) (—ickË* 
u£c_≥r_tick
)

	)

232 
	#USEC_TO_TICK
(
u£c
) ((u£cË/ 
u£c_≥r_tick
)

	)

233 
	#USEC_TO_TICK_ROUNDUP
(
u£c
) \

234 ((
u£c
Ë=0 ? 0 : 
	`USEC_TO_TICK
((u£cË- 1Ë+ 1)

	)

236 
	#TICK_TO_NSEC
(
tick
) (—ickË* 
n£c_≥r_tick
)

	)

237 
	#NSEC_TO_TICK
(
n£c
) (“£cË/ 
n£c_≥r_tick
)

	)

238 
	#NSEC_TO_TICK_ROUNDUP
(
n£c
) \

239 ((
n£c
Ë=0 ? 0 : 
	`NSEC_TO_TICK
(“£cË- 1Ë+ 1)

	)

241 
	#TICK_TO_TIMEVAL
(
tick
, 
tvp
) { \

242 
˛ock_t
 
__tm±ck
 = (
tick
); \

243 (
tvp
)->
tv_£c
 = 
	`TICK_TO_SEC
(
__tm±ck
); \

244 (
tvp
)->
tv_u£c
 = 
	`TICK_TO_USEC
(
__tm±ck
 - 
	`SEC_TO_TICK
(—vp)->
tv_£c
)); \

245 
	}

	)
}

247 
	#TICK_TO_TIMEVAL32
(
tick
, 
tvp
) { \

248 
˛ock_t
 
__tm±ck
 = (
tick
); \

249 
time_t
 
__tm±m
 = 
	`TICK_TO_SEC
(
__tm±ck
); \

250 (
tvp
)->
tv_£c
 = (
time32_t
)
__tm±m
; \

251 (
tvp
)->
tv_u£c
 = 
	`TICK_TO_USEC
(
__tm±ck
 - 
	`SEC_TO_TICK
(
__tm±m
)); \

252 }

	)

254 
	#TICK_TO_TIMESTRUC
(
tick
, 
t•
) { \

255 
˛ock_t
 
__tm±ck
 = (
tick
); \

256 (
t•
)->
tv_£c
 = 
	`TICK_TO_SEC
(
__tm±ck
); \

257 (
t•
)->
tv_n£c
 = 
	`TICK_TO_NSEC
(
__tm±ck
 - 
	`SEC_TO_TICK
(—•)->
tv_£c
)); \

258 }

	)

260 
	#TICK_TO_TIMESTRUC32
(
tick
, 
t•
) { \

261 
˛ock_t
 
__tm±ck
 = (
tick
); \

262 
time_t
 
__tm±m
 = 
	`TICK_TO_SEC
(
__tm±ck
); \

263 (
t•
)->
tv_£c
 = (
time32_t
)
__tm±m
; \

264 (
t•
)->
tv_n£c
 = 
	`TICK_TO_NSEC
(
__tm±ck
 - 
	`SEC_TO_TICK
(
__tm±m
)); \

265 }

	)

267 
	#TIMEVAL_TO_TICK
(
tvp
) \

268 (
	`SEC_TO_TICK
((
tvp
)->
tv_£c
Ë+ 
	`USEC_TO_TICK
(—vp)->
tv_u£c
))

	)

270 
	#TIMESTRUC_TO_TICK
(
t•
) \

271 (
	`SEC_TO_TICK
((
t•
)->
tv_£c
Ë+ 
	`NSEC_TO_TICK
(—•)->
tv_n£c
))

	)

273 
	stodöfo
 {

274 
	mtod_£c
;

275 
	mtod_mö
;

276 
	mtod_hour
;

277 
	mtod_dow
;

278 
	mtod_day
;

279 
	mtod_m⁄th
;

280 
	mtod_yór
;

281 } 
	ttodöfo_t
;

283 
time°ruc_t
 
hª°ime
;

284 
öt64_t
 
timedñè
;

285 
tod_√edsync
;

286 
kmuãx_t
 
tod_lock
;

288 
time°ruc_t
 
tod_gë
();

289 
tod_£t
(
time°ruc_t
);

290 
todöfo_t
 
utc_to_tod
(
time_t
);

291 
time_t
 
tod_to_utc
(
todöfo_t
);

292 
hr_˛ock_lock
();

293 
hr_˛ock_u∆ock
();

294 
hπime_t
 
gëhπime
();

295 
hπime_t
 
gëhπime_unsˇÀd
();

296 
hπime_t
 
gëhπime_max
();

297 
sˇÀhπime
(
hπime_t
 *);

298 
gëhª°ime
(
time•ec_t
 *);

299 
hπ2ts
(
hπime_t
, 
time°ruc_t
 *);

300 
hπime_t
 
ts2hπ
(
time°ruc_t
 *);

301 
ôimîfix
(
timevÆ
 *);

302 
ôimîde¸
(
ôimîvÆ
 *, );

303 
timevÆadd
(
timevÆ
 *, timeval *);

304 
timevÆsub
(
timevÆ
 *, timeval *);

305 
timevÆfix
(
timevÆ
 *);

307 #i‡
deföed
(
_SYSCALL32
)

308 
hπ2ts32
(
hπime_t
, 
time°ruc32_t
 *);

313 #i‡(!
deföed
(
_KERNEL
Ë&& !deföed(
_POSIX_C_SOURCE
) && \

314 !
deföed
(
_XOPEN_SOURCE
)Ë|| 
	$deföed
(
__EXTENSIONS__
)

315 #i‡
	`deföed
(
__STDC__
)

316 
	`adjtime
(
timevÆ
 *, timeval *);

318 
	`adjtime
();

322 #i‡(!
	`deföed
(
_KERNEL
Ë&& !deföed(
_POSIX_C_SOURCE
) && \

323 !
	`deföed
(
_XOPEN_SOURCE
)Ë|| deföed(
__EXTENSIONS__
Ë|| 
	$deföed
(
_XPG4_2
)

325 #i‡
	`deföed
(
__STDC__
)

327 
	`gëôimî
(, 
ôimîvÆ
 *);

328 
	`utimes
(c⁄° *, c⁄° 
timevÆ
 *);

329 #i‡
	`deföed
(
_XPG4_2
)

330 
	`£tôimî
(, c⁄° 
ôimîvÆ
 *, itimerval *);

332 
	`£tôimî
(, 
ôimîvÆ
 *, itimerval *);

337 
	`gëtimî
();

338 
	`£âimî
();

339 
	`utimes
();

358 #i‡(!
	`deföed
(
_KERNEL
Ë&& !deföed(
_POSIX_C_SOURCE
) && \

359 !
	`deföed
(
_XOPEN_SOURCE
)Ë|| 
	$deföed
(
__EXTENSIONS__
)

361 #i‡
	`deföed
(
__STDC__
)

362 #i‡
	`deföed
(
_SVID_GETTOD
)

363 
	`£âimeofday
(
timevÆ
 *);

365 
	`£âimeofday
(
timevÆ
 *, *);

367 
hπime_t
 
	`gëhπime
();

368 
hπime_t
 
	`gëhrvtime
();

370 
	`£âimeofday
();

371 
hπime_t
 
	`gëhπime
();

372 
hπime_t
 
	`gëhrvtime
();

377 #i‡(!
	`deföed
(
_KERNEL
Ë&& !deföed(
_POSIX_C_SOURCE
) && \

378 !
	`deföed
(
_XOPEN_SOURCE
)Ë|| deföed(
__EXTENSIONS__
) || \

379 
	$deföed
(
_XPG4_2
)

381 #i‡
	`deföed
(
__STDC__
)

382 #i‡
	`deföed
(
_SVID_GETTOD
)

383 
	`gëtimeofday
(
timevÆ
 *);

385 
	`gëtimeofday
(
timevÆ
 *, *);

388 
	`gëtimeofday
();

404 #i‡(!
	`deföed
(
_KERNEL
Ë&& !deföed(
_POSIX_C_SOURCE
) && \

405 !
	`deföed
(
_XOPEN_SOURCE
)Ë|| 
	$deföed
(
__EXTENSIONS__
)

406 
	~<time.h
>

416 #i‡(!
	`deföed
(
_KERNEL
Ë&& !deföed(
_POSIX_C_SOURCE
) && \

417 !
	`deföed
(
_XOPEN_SOURCE
)Ë|| deföed(
__EXTENSIONS__
) || \

418 
	$deföed
(
_XPG4_2
)

419 
	~<sys/£À˘.h
>

424 #ifdef 
__˝lu•lus


425 
	}
}

	@/usr/include/sys/types.h

13 #i‚de‡
_SYS_TYPES_H


14 
	#_SYS_TYPES_H


	)

16 #¥agm®
idít
 "@(#)types.h 1.66 00/02/14 SMI"

18 
	~<sys/iß_defs.h
>

19 
	~<sys/„©uª_ã°s.h
>

24 
	~<sys/machty≥s.h
>

33 #ifdef 
_KERNEL


34 
	~<sys/öây≥s.h
>

36 
	~<sys/öt_ty≥s.h
>

39 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_SYSCALL32
)

40 
	~<sys/ty≥s32.h
>

43 #ifdef 
__˝lu•lus


52 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

53 
	tl⁄gl⁄g_t
;

54 
	tu_l⁄gl⁄g_t
;

57 
	u
{

58 
	m_d
;

59 
öt32_t
 
	m_l
[2];

60 } 
	tl⁄gl⁄g_t
;

61 
	u
{

62 
	m_d
;

63 
uöt32_t
 
	m_l
[2];

64 } 
	tu_l⁄gl⁄g_t
;

72 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

73 
öt32_t
 
	tt_sˇœr_t
;

74 
uöt32_t
 
	tt_usˇœr_t
;

76 
	tt_sˇœr_t
;

77 
	tt_usˇœr_t
;

83 
	tuch¨_t
;

84 
	tush‹t_t
;

85 
	tuöt_t
;

86 
	tul⁄g_t
;

88 *
	tˇddr_t
;

89 
	tdaddr_t
;

90 
	t˙t_t
;

92 #i‡
deföed
(
_ILP32
)

93 
ul⁄g_t
 
	t∑ddr_t
;

94 #ñi‡
deföed
(
__ü64
)

95 
uöt_t
 
	t∑ddr_t
;

98 #i‚def 
_PTRDIFF_T


99 
	#_PTRDIFF_T


	)

100 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

101 
	t±rdiff_t
;

103 
	t±rdiff_t
;

110 
ul⁄g_t
 
	tp‚_t
;

111 
ul⁄g_t
 
	tpg˙t_t
;

112 
	t•g˙t_t
;

114 
uch¨_t
 
	tu£_t
;

115 
	tsysid_t
;

116 
	tödex_t
;

117 *
	ttimeout_id_t
;

118 *
	tbufˇŒ_id_t
;

128 #i‚de‡
_OFF_T


129 
	#_OFF_T


	)

131 #i‡
deföed
(
_LP64
Ë|| 
_FILE_OFFSET_BITS
 == 32

132 
	toff_t
;

133 #ñi‡
_FILE_OFFSET_BITS
 == 64

134 
l⁄gl⁄g_t
 
	toff_t
;

137 #i‡
deföed
(
_LARGEFILE64_SOURCE
)

138 #ifde‡
_LP64


139 
off_t
 
	toff64_t
;

141 
l⁄gl⁄g_t
 
	toff64_t
;

147 #i‡
deföed
(
_LP64
Ë|| 
_FILE_OFFSET_BITS
 == 32

148 
ul⁄g_t
 
	töo_t
;

149 
	tblk˙t_t
;

150 
ul⁄g_t
 
	tfsblk˙t_t
;

151 
ul⁄g_t
 
	tfsfû˙t_t
;

152 #ñi‡
_FILE_OFFSET_BITS
 == 64

153 
u_l⁄gl⁄g_t
 
	töo_t
;

154 
l⁄gl⁄g_t
 
	tblk˙t_t
;

155 
u_l⁄gl⁄g_t
 
	tfsblk˙t_t
;

156 
u_l⁄gl⁄g_t
 
	tfsfû˙t_t
;

159 #i‡
deföed
(
_LARGEFILE64_SOURCE
)

160 #ifde‡
_LP64


161 
öo_t
 
	töo64_t
;

162 
blk˙t_t
 
	tblk˙t64_t
;

163 
fsblk˙t_t
 
	tfsblk˙t64_t
;

164 
fsfû˙t_t
 
	tfsfû˙t64_t
;

166 
u_l⁄gl⁄g_t
 
	töo64_t
;

167 
l⁄gl⁄g_t
 
	tblk˙t64_t
;

168 
u_l⁄gl⁄g_t
 
	tfsblk˙t64_t
;

169 
u_l⁄gl⁄g_t
 
	tfsfû˙t64_t
;

173 #ifde‡
_LP64


174 
	tblksize_t
;

176 
	tblksize_t
;

179 #i‡
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)

180 
	e
{ 
	g_B_FALSE
, 
	g_B_TRUE
 } 
	tboﬁón_t
;

182 
	e
{ 
	gB_FALSE
, 
	gB_TRUE
 } 
	tboﬁón_t
;

192 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

193 
öt64_t
 
	t∑d64_t
;

194 
uöt64_t
 
	tu∑d64_t
;

196 
	u
{

197 
	g_d
;

198 
öt32_t
 
	g_l
[2];

199 } 
	t∑d64_t
;

200 
	u
{

201 
	g_d
;

202 
uöt32_t
 
	g_l
[2];

203 } 
	tu∑d64_t
;

206 
l⁄gl⁄g_t
 
	toff£t_t
;

207 
u_l⁄gl⁄g_t
 
	tu_off£t_t
;

208 
u_l⁄gl⁄g_t
 
	tÀn_t
;

209 
l⁄gl⁄g_t
 
	tdiskaddr_t
;

216 #ifde‡
_LONG_LONG_LTOH


217 
	u
{

218 
off£t_t
 
	g_f
;

219 
	s
{

220 
öt32_t
 
	g_l
;

221 
öt32_t
 
	g_u
;

222 } 
	g_p
;

223 } 
	tŒoff_t
;

226 #ifde‡
_LONG_LONG_HTOL


227 
	u
{

228 
off£t_t
 
	g_f
;

229 
	s
{

230 
öt32_t
 
	g_u
;

231 
öt32_t
 
	g_l
;

232 } 
	g_p
;

233 } 
	tŒoff_t
;

236 #ifde‡
_LONG_LONG_LTOH


237 
	u
{

238 
diskaddr_t
 
	g_f
;

239 
	s
{

240 
öt32_t
 
	g_l
;

241 
öt32_t
 
	g_u
;

242 } 
	g_p
;

243 } 
	tŒdaddr_t
;

246 #ifde‡
_LONG_LONG_HTOL


247 
	u
{

248 
diskaddr_t
 
	g_f
;

249 
	s
{

250 
öt32_t
 
	g_u
;

251 
öt32_t
 
	g_l
;

252 } 
	g_p
;

253 } 
	tŒdaddr_t
;

256 
uöt_t
 
	tk_Êt£t_t
;

267 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

268 
	tid_t
;

270 
	tid_t
;

277 
uöt_t
 
	tu£c⁄ds_t
;

279 #i‚def 
_SUSECONDS_T


280 
	#_SUSECONDS_T


	)

281 
	tsu£c⁄ds_t
;

287 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

288 
uöt_t
 
	tmaj‹_t
;

289 
uöt_t
 
	tmö‹_t
;

291 
ul⁄g_t
 
	tmaj‹_t
;

292 
ul⁄g_t
 
	tmö‹_t
;

298 
	t¥i_t
;

311 
ush‹t_t
 
	to_mode_t
;

312 
	to_dev_t
;

313 
ush‹t_t
 
	to_uid_t
;

314 
o_uid_t
 
	to_gid_t
;

315 
	to_∆ök_t
;

316 
	to_pid_t
;

317 
ush‹t_t
 
	to_öo_t
;

323 
	tkey_t
;

324 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

325 
uöt_t
 
	tmode_t
;

327 
ul⁄g_t
 
	tmode_t
;

330 #i‚def 
_UID_T


331 
	#_UID_T


	)

332 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

333 
	tuid_t
;

335 
	tuid_t
;

339 
uid_t
 
	tgid_t
;

341 
id_t
 
	tèskid_t
;

342 
id_t
 
	t¥ojid_t
;

349 
	t±hªad_t
;

350 
	t±hªad_key_t
;

352 
	s_±hªad_muãx
 {

353 
	s
{

354 
uöt16_t
 
	g__±hªad_muãx_Êag1
;

355 
uöt8_t
 
	g__±hªad_muãx_Êag2
;

356 
uöt8_t
 
	g__±hªad_muãx_˚ûög
;

357 
uöt32_t
 
	g__±hªad_muãx_ty≥
;

358 } 
	g__±hªad_muãx_Êags
;

359 
	u
{

360 
	s
{

361 
uöt8_t
 
	g__±hªad_muãx_∑d
[8];

362 } 
	g__±hªad_muãx_lock64
;

363 
u∑d64_t
 
	g__±hªad_muãx_ow√r64
;

364 } 
	g__±hªad_muãx_lock
;

365 
u∑d64_t
 
	g__±hªad_muãx_d©a
;

366 } 
	t±hªad_muãx_t
;

368 
	s_±hªad_c⁄d
 {

369 
	s
{

370 
uöt8_t
 
	g__±hªad_c⁄d_Êag
[4];

371 
uöt32_t
 
	g__±hªad_c⁄d_ty≥
;

372 } 
	g__±hªad_c⁄d_Êags
;

373 
u∑d64_t
 
	g__±hªad_c⁄d_d©a
;

374 } 
	t±hªad_c⁄d_t
;

379 
	s_±hªad_rwlock
 {

380 
öt32_t
 
	g__±hªad_rwlock_ªadîs
;

381 
uöt16_t
 
	g__±hªad_rwlock_ty≥
;

382 
uöt16_t
 
	g__±hªad_rwlock_magic
;

383 
u∑d64_t
 
	g__±hªad_rwlock_∑d1
[3];

384 
u∑d64_t
 
	g__±hªad_rwlock_∑d2
[2];

385 
u∑d64_t
 
	g__±hªad_rwlock_∑d3
[2];

386 } 
	t±hªad_rwlock_t
;

391 
	s_±hªad_©å
 {

392 *
	g__±hªad_©åp
;

393 } 
	t±hªad_©å_t
;

399 
	s_±hªad_muãx©å
 {

400 *
	g__±hªad_muãx©åp
;

401 } 
	t±hªad_muãx©å_t
;

407 
	s_±hªad_c⁄d©å
 {

408 *
	g__±hªad_c⁄d©åp
;

409 } 
	t±hªad_c⁄d©å_t
;

414 
	s_⁄˚
 {

415 
u∑d64_t
 
	g__±hªad_⁄˚_∑d
[4];

416 } 
	t±hªad_⁄˚_t
;

422 
	s_±hªad_rwlock©å
 {

423 *
	g__±hªad_rwlock©åp
;

424 } 
	t±hªad_rwlock©å_t
;

426 
ul⁄g_t
 
	tdev_t
;

428 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

429 
uöt_t
 
	t∆ök_t
;

430 
	tpid_t
;

432 
ul⁄g_t
 
	t∆ök_t
;

433 
	tpid_t
;

436 #i‚de‡
_SIZE_T


437 
	#_SIZE_T


	)

438 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

439 
ul⁄g_t
 
	tsize_t
;

441 
uöt_t
 
	tsize_t
;

445 #i‚de‡
_SSIZE_T


446 
	#_SSIZE_T


	)

447 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

448 
	tssize_t
;

450 
	tssize_t
;

454 #i‚de‡
_TIME_T


455 
	#_TIME_T


	)

456 
	ttime_t
;

459 #i‚de‡
_CLOCK_T


460 
	#_CLOCK_T


	)

461 
	t˛ock_t
;

464 #i‚de‡
_CLOCKID_T


465 
	#_CLOCKID_T


	)

466 
	t˛ockid_t
;

469 #i‚de‡
_TIMER_T


470 
	#_TIMER_T


	)

471 
	ttimî_t
;

474 #i‡
deföed
(
__EXTENSIONS__
) || \

475 (!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
))

478 
	tunch¨
;

479 
	tush‹t
;

480 
	tuöt
;

481 
	tul⁄g
;

484 #i‡
deföed
(
_KERNEL
)

486 
	#SHRT_MIN
 (-32768)

	)

487 
	#SHRT_MAX
 32767

	)

488 
	#USHRT_MAX
 65535

	)

489 
	#INT_MIN
 (-2147483647-1Ë

	)

490 
	#INT_MAX
 2147483647

	)

491 
	#UINT_MAX
 4294967295U

	)

492 #i‡
deföed
(
_LP64
)

493 
	#LONG_MIN
 (-9223372036854775807L-1L)

	)

495 
	#LONG_MAX
 9223372036854775807L

	)

497 
	#ULONG_MAX
 18446744073709551615UL

	)

500 
	#LONG_MIN
 (-2147483647L-1L)

	)

502 
	#LONG_MAX
 2147483647L

	)

503 
	#ULONG_MAX
 4294967295UL

	)

508 
	#P_MYPID
 ((
pid_t
)0)

	)

515 
	#P_MYID
 (-1)

	)

516 
	#NOPID
 (
pid_t
)(-1)

	)

518 #i‚de‡
NODEV


519 
	#NODEV
 (
dev_t
)(-1l)

	)

520 #ifde‡
_SYSCALL32


521 
	#NODEV32
 (
dev32_t
)(-1)

	)

529 
	#PFN_INVALID
 ((
p‚_t
)-1)

	)

532 
	tu_ch¨
;

533 
	tu_sh‹t
;

534 
	tu_öt
;

535 
	tu_l⁄g
;

536 
	s_quad
 { 
	gvÆ
[2]; } 
	tquad_t
;

537 
quad_t
 
	tquad
;

544 
	~<sys/£À˘.h
>

558 
	#_VOID
 

	)

560 #ifdef 
__˝lu•lus


	@/usr/include/sys/wait.h

13 #i‚de‡
_SYS_WAIT_H


14 
	#_SYS_WAIT_H


	)

16 #¥agm®
idít
 "@(#)wait.h 1.21 97/04/08 SMI"

18 
	~<sys/„©uª_ã°s.h
>

20 
	~<sys/ty≥s.h
>

22 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

23 
deföed
(
_XPG4_2
Ë|| 
	$deföed
(
__EXTENSIONS__
)

24 
	~<sys/ªsour˚.h
>

25 
	~<sys/sigöfo.h
>

26 
	~<sys/¥oc£t.h
>

29 #ifdef 
__˝lu•lus


37 
	#WUNTRACED
 0004

	)

38 
	#WNOHANG
 0100

	)

41 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

42 
	`deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

43 
	#WEXITED
 0001

	)

44 
	#WTRAPPED
 0002

	)

45 
	#WSTOPPED
 
WUNTRACED


	)

46 
	#WCONTINUED
 0010

	)

47 
	#WNOWAIT
 0200

	)

48 
	#_WNOCHLD
 0400

	)

49 
	#WOPTMASK
 (
WEXITED
|
WTRAPPED
|
WSTOPPED
|
WCONTINUED
|
WNOHANG
|
WNOWAIT
|
_WNOCHLD
)

	)

56 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
) || \

57 
	`deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

59 
	#WSTOPFLG
 0177

	)

60 
	#WCONTFLG
 0177777

	)

61 
	#WCOREFLG
 0200

	)

62 
	#WSIGMASK
 0177

	)

64 
	#WLOBYTE
(
°©
) (()((°©)&0377))

	)

65 
	#WHIBYTE
(
°©
) (()(((°©)>>8)&0377))

	)

66 
	#WWORD
(
°©
) (()((°©))&0177777)

	)

68 
	#WIFCONTINUED
(
°©
) (
	`WWORD
(°©Ë=
WCONTFLG
)

	)

69 
	#WCOREDUMP
(
°©
) ((°©)&
WCOREFLG
)

	)

73 
	#WIFEXITED
(
°©
) (()((°©)&0xFFË=0)

	)

74 
	#WIFSIGNALED
(
°©
) (()((stat)&0xFF) > 0 && \

75 ()((
°©
)&0xFF00Ë=0)

	)

76 
	#WIFSTOPPED
(
°©
) (()((stat)&0xFF) == 0177 && \

77 ()((
°©
)&0xFF00Ë!0)

	)

78 
	#WEXITSTATUS
(
°©
) (()(((°©)>>8)&0xFF))

	)

79 
	#WTERMSIG
(
°©
) (()((°©)&0x7F))

	)

80 
	#WSTOPSIG
(
°©
) (()(((°©)>>8)&0xFF))

	)

83 #i‡!
	`deföed
(
_KERNEL
)

84 #i‡
	`deföed
(
__STDC__
)

86 
pid_t
 
	`waô
(*);

87 
pid_t
 
	`waôpid
(pid_t, *, );

88 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

89 
	`deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

90 
	`waôid
(
idty≥_t
, 
id_t
, 
sigöfo_t
 *, );

91 
pid_t
 
	`waô3
(*, , 
rußge
 *);

94 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

95 
	`deföed
(
__EXTENSIONS__
)

96 
pid_t
 
	`waô4
’id_t, *, , 
rußge
 *);

101 
pid_t
 
	`waô
();

102 
pid_t
 
	`waôpid
();

103 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

104 
	`deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

105 
	`waôid
();

106 
pid_t
 
	`waô3
();

109 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

110 
	`deföed
(
__EXTENSIONS__
)

111 
pid_t
 
	`waô4
();

117 #ifdef 
__˝lu•lus


118 
	}
}

	@/usr/include/syslog.h

8 #i‚def 
_SYSLOG_H


9 
	#_SYSLOG_H


	)

11 #¥agm®
idít
 "@(#)syslog.h 1.11 96/05/17 SMI"

13 
	~<sys/„©uª_ã°s.h
>

14 
	~<sys/sy¶og.h
>

15 
	~<sys/va_li°.h
>

17 #ifdef 
__˝lu•lus


21 #ifdef 
__STDC__


23 
›ílog
(const *, , );

24 
sy¶og
(, const *, ...);

25 
˛o£log
();

26 
£éogmask
();

27 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

28 
vsy¶og
(, c⁄° *, 
__va_li°
);

33 
›ílog
();

34 
sy¶og
();

35 
˛o£log
();

36 
£éogmask
();

37 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

38 
vsy¶og
();

43 #ifdef 
__˝lu•lus


	@/usr/include/time.h

13 #i‚de‡
_TIME_H


14 
	#_TIME_H


	)

16 #¥agm®
idít
 "@(#)time.h 1.39 99/08/10 SMI"

18 
	~<sys/„©uª_ã°s.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<iso/time_iso.h
>

26 #i‡
__˝lu•lus
 >= 199711L

27 
usög
 
	g°d
::
size_t
;

28 
usög
 
	g°d
::
˛ock_t
;

29 
usög
 
	g°d
::
time_t
;

30 
usög
 
	g°d
::
tm
;

31 
usög
 
	g°d
::
as˘ime
;

32 
usög
 
	g°d
::
˛ock
;

33 
usög
 
	g°d
::
˘ime
;

34 
usög
 
	g°d
::
dif·ime
;

35 
usög
 
	g°d
::
gmtime
;

36 
usög
 
	g°d
::
loˇ…ime
;

37 
usög
 
	g°d
::
mktime
;

38 
usög
 
	g°d
::
time
;

39 
usög
 
	g°d
::
°r·ime
;

42 #ifdef 
__˝lu•lus


46 #i‚de‡
_CLOCKID_T


47 
	#_CLOCKID_T


	)

48 
	t˛ockid_t
;

51 #i‚de‡
_TIMER_T


52 
	#_TIMER_T


	)

53 
	ttimî_t
;

56 #i‡
deföed
(
__STDC__
)

58 #if 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

59 (
	g_POSIX_C_SOURCE
 - 0 >= 199506L)

60 
tm
 *
gmtime_r
(c⁄° 
time_t
 *, tm *);

61 
tm
 *
loˇ…ime_r
(c⁄° 
time_t
 *, tm *);

64 #i‡(
__STDC__
 =0 && !
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

65 (
deföed
(
_XOPEN_SOURCE
Ë&& 
	g_XOPEN_VERSION
 - 0 >= 4) || \

66 
	$deföed
(
__EXTENSIONS__
)

67 *
	`°Ωtime
(c⁄° *, c⁄° *, 
tm
 *);

69 #ifde‡
_STRPTIME_DONTZERO


70 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


71 #¥agma 
ªdeföe_exäame
 
°Ωtime
 
__°Ωtime_d⁄tzîo


73 *
	`__°Ωtime_d⁄tzîo
(c⁄° *, c⁄° *, 
tm
 *);

74 
	#°Ωtime
 
__°Ωtime_d⁄tzîo


	)

80 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0) && \

81 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

82 (
_POSIX_C_SOURCE
 > 2)

83 
	~<sys/time_im∂.h
>

96 #i‚def 
_SIGVAL


97 
	#_SIGVAL


	)

98 
	usigvÆ
 {

99 
sivÆ_öt
;

100 *
sivÆ_±r
;

104 #i‚def 
_SIGEVENT


105 
	#_SIGEVENT


	)

106 
	ssigevít
 {

107 
sigev_nŸify
;

108 
sigev_signo
;

109 
sigvÆ
 
sigev_vÆue
;

110 (*
sigev_nŸify_fun˘i⁄
)(
sigvÆ
);

111 
±hªad_©å_t
 *
sigev_nŸify_©åibuãs
;

112 
__sigev_∑d2
;

116 
	`˛ock_gëªs
(
˛ockid_t
, 
time•ec
 *);

117 
	`˛ock_gëtime
(
˛ockid_t
, 
time•ec
 *);

118 
	`˛ock_£âime
(
˛ockid_t
, c⁄° 
time•ec
 *);

119 
	`timî_¸óã
(
˛ockid_t
, 
sigevít
 *, 
timî_t
 *);

120 
	`timî_dñëe
(
timî_t
);

121 
	`timî_gëovîrun
(
timî_t
);

122 
	`timî_gëtime
(
timî_t
, 
ôimî•ec
 *);

123 
	`timî_£âime
(
timî_t
, , c⁄° 
ôimî•ec
 *,

124 
ôimî•ec
 *);

125 
	`«no¶ìp
(c⁄° 
time•ec
 *, timespec *);

128 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 == 0 || \

129 
	`deföed
(
_POSIX_C_SOURCE
Ë|| 
	$deföed
(
_XOPEN_SOURCE
)

130 
	`tz£t
();

132 *
tz«me
[2];

134 #i‚de‡
CLK_TCK


135 
	`_sysc⁄f
();

136 
	#CLK_TCK
 ((
˛ock_t
Ë
	`_sysc⁄f
(3))

	)

140 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 == 0 && \

141 !
	`deföed
(
_POSIX_C_SOURCE
)Ë|| 
	$deföed
(
_XOPEN_SOURCE
)

142 
timez⁄e
;

143 
daylight
;

148 #i‡
__STDC__
 =0 && !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)

149 
	`c·ime
(*, *, c⁄° 
time_t
 *);

150 
	`asc·ime
(*, c⁄° *, c⁄° 
tm
 *);

151 
Ætz⁄e
;

154 #i‡(
__STDC__
 =0 && !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

155 
	`deföed
(
_XPG4_2
Ë|| 
	$deföed
(
__EXTENSIONS__
)

156 
tm
 *
	`gëd©e
(const *);

158 #ifdef 
_REENTRANT


159 #unde‡
gëd©e_îr


160 
	#gëd©e_îr
 *(*)
	`_gëd©e_îr_addr
()

	)

161 *
	`_gëd©e_îr_addr
();

163 
gëd©e_îr
;

169 *
	`°Ωtime
();

170 
	`c·ime
(), 
	`asc·ime
();

171 
	`tz£t
();

173 #ifde‡
_STRPTIME_DONTZERO


174 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


175 #¥agma 
ªdeföe_exäame
 
°Ωtime
 
__°Ωtime_d⁄tzîo


177 *
	`__°Ωtime_d⁄tzîo
();

178 
	#°Ωtime
 
__°Ωtime_d⁄tzîo


	)

183 #if 
	`deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

184 (
_POSIX_C_SOURCE
 - 0 >= 199506L)

185 
tm
 *
	`gmtime_r
();

186 
tm
 *
	`loˇ…ime_r
();

189 
timez⁄e
, 
Ætz⁄e
;

190 
daylight
;

191 *
tz«me
[2];

193 #i‡(
__STDC__
 =0 && !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

194 
	`deföed
(
_XPG4_2
Ë|| 
	$deföed
(
__EXTENSIONS__
)

195 
tm
 *
	`gëd©e
();

196 #ifdef 
_REENTRANT


197 #unde‡
gëd©e_îr


198 
	#gëd©e_îr
 *(*)
	`_gëd©e_îr_addr
()

	)

199 *
	`_gëd©e_îr_addr
();

201 
gëd©e_îr
;

242 #if 
	`deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

243 (
_POSIX_C_SOURCE
 - 0 >199506LË|| 
	`deföed
(
_POSIX_PTHREAD_SEMANTICS
)

245 #if 
	`deföed
(
__STDC__
)

247 #if (
_POSIX_C_SOURCE
 - 0 >199506LË|| 
	`deföed
(
_POSIX_PTHREAD_SEMANTICS
)

249 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


250 *
	`as˘ime_r
(c⁄° 
tm
 *, *);

251 *
	`˘ime_r
(c⁄° 
time_t
 *, *);

252 #¥agm®
ªdeföe_exäame
 
˘ime_r
 
__posix_˘ime_r


253 #¥agm®
ªdeföe_exäame
 
as˘ime_r
 
__posix_as˘ime_r


257 
	`as˘ime_r
(c⁄° 
tm
 *
__tm
, *
__buf
)

259 *
	`__posix_as˘ime_r
(c⁄° 
tm
 *, *);

260  (
	`__posix_as˘ime_r
(
__tm
, 
__buf
));

263 
	`˘ime_r
(c⁄° 
time_t
 *
__time
, *
__buf
)

265 *
	`__posix_˘ime_r
(c⁄° 
time_t
 *, *);

266  (
	`__posix_˘ime_r
(
__time
, 
__buf
));

272 *
	`as˘ime_r
(c⁄° 
tm
 *, *, );

273 *
	`˘ime_r
(c⁄° 
time_t
 *, *, );

279 #if (
_POSIX_C_SOURCE
 - 0 >199506LË|| 
	`deföed
(
_POSIX_PTHREAD_SEMANTICS
)

281 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


282 *
	`as˘ime_r
();

283 *
	`˘ime_r
();

284 #¥agm®
ªdeföe_exäame
 
as˘ime_r
 
__posix_as˘ime_r


285 #¥agm®
ªdeföe_exäame
 
˘ime_r
 
__posix_˘ime_r


289 
	`as˘ime_r
(
__tm
, 
__buf
)

290 
tm
 *
__tm
;

291 *
__buf
;

293 *
	`__posix_as˘ime_r
();

294  (
	`__posix_as˘ime_r
(
__tm
, 
__buf
));

297 
	`˘ime_r
(
__time
, 
__buf
)

298 
time_t
 *
__time
;

299 *
__buf
;

301 *
	`__posix_˘ime_r
();

302  (
	`__posix_˘ime_r
(
__time
, 
__buf
));

308 *
	`as˘ime_r
();

309 *
	`˘ime_r
();

317 #ifdef 
__˝lu•lus


318 
	}
}

	@/usr/include/unistd.h

13 #i‚de‡
_UNISTD_H


14 
	#_UNISTD_H


	)

16 #¥agm®
idít
 "@(#)unistd.h 1.58 99/11/11 SMI"

18 
	~<sys/„©uª_ã°s.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/uni°d.h
>

23 #ifdef 
__˝lu•lus


28 
	#R_OK
 4

	)

29 
	#W_OK
 2

	)

30 
	#X_OK
 1

	)

31 
	#F_OK
 0

	)

33 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

34 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

35 
	#F_ULOCK
 0

	)

36 
	#F_LOCK
 1

	)

37 
	#F_TLOCK
 2

	)

38 
	#F_TEST
 3

	)

43 #i‚def 
SEEK_SET


44 
	#SEEK_SET
 0

	)

47 #i‚def 
SEEK_CUR


48 
	#SEEK_CUR
 1

	)

51 #i‚def 
SEEK_END


52 
	#SEEK_END
 2

	)

55 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

56 
deföed
(
__EXTENSIONS__
)

58 
	#GF_PATH
 "/ëc/group"

	)

59 
	#PF_PATH
 "/ëc/∑sswd"

	)

67 
	#_POSIX_ASYNC_IO
 1

	)

68 
	#_POSIX_ASYNCHRONOUS_IO
 1

	)

69 
	#_POSIX_FSYNC
 1

	)

70 
	#_POSIX_JOB_CONTROL
 1

	)

71 
	#_POSIX_MAPPED_FILES
 1

	)

72 
	#_POSIX_MEMLOCK
 1

	)

73 
	#_POSIX_MEMLOCK_RANGE
 1

	)

74 
	#_POSIX_MEMORY_PROTECTION
 1

	)

75 
	#_POSIX_MESSAGE_PASSING
 1

	)

76 
	#_POSIX_PRIORITY_SCHEDULING
 1

	)

77 
	#_POSIX_REALTIME_SIGNALS
 1

	)

78 
	#_POSIX_SAVED_IDS
 1

	)

79 
	#_POSIX_SEMAPHORES
 1

	)

80 
	#_POSIX_SHARED_MEMORY_OBJECTS
 1

	)

81 
	#_POSIX_SYNC_IO
 1

	)

82 
	#_POSIX_SYNCHRONIZED_IO
 1

	)

83 
	#_POSIX_TIMERS
 1

	)

87 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 1

	)

88 
	#_POSIX_THREADS
 1

	)

89 
	#_POSIX_THREAD_ATTR_STACKADDR
 1

	)

90 
	#_POSIX_THREAD_ATTR_STACKSIZE
 1

	)

91 
	#_POSIX_THREAD_PROCESS_SHARED
 1

	)

92 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 1

	)

98 
	#_POSIX_THREAD_PRIO_INHERIT
 1

	)

99 
	#_POSIX_THREAD_PRIO_PROTECT
 1

	)

101 #i‚de‡
_POSIX_VDISABLE


102 
	#_POSIX_VDISABLE
 0

	)

105 #i‚de‡
NULL


106 #i‡
deföed
(
_LP64
Ë&& !deföed(
__˝lu•lus
)

107 
	#NULL
 0L

	)

109 
	#NULL
 0

	)

113 
	#STDIN_FILENO
 0

	)

114 
	#STDOUT_FILENO
 1

	)

115 
	#STDERR_FILENO
 2

	)

122 
	#_LFS_LARGEFILE
 1

	)

123 
	#_LFS64_LARGEFILE
 1

	)

124 
	#_LFS64_STDIO
 1

	)

125 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

128 #i‡!
deföed
(
_LP64
Ë&& 
_FILE_OFFSET_BITS
 == 64

129 #ifdef 
__PRAGMA_REDEFINE_EXTNAME


130 #¥agm®
ªdeföe_exäame
 
·runˇã
 
·runˇã64


131 #¥agm®
ªdeföe_exäame
 
l£ek
 
l£ek64


132 #¥agm®
ªdeföe_exäame
 
¥ód
 
¥ód64


133 #¥agm®
ªdeföe_exäame
 
pwrôe
 
pwrôe64


134 #¥agm®
ªdeföe_exäame
 
åunˇã
 
åunˇã64


135 #¥agm®
ªdeföe_exäame
 
lockf
 
lockf64


136 #¥agma 
ªdeföe_exäame
 
ãŒ
 
ãŒ64


138 
	#·runˇã
 
·runˇã64


	)

139 
	#l£ek
 
l£ek64


	)

140 
	#¥ód
 
¥ód64


	)

141 
	#pwrôe
 
pwrôe64


	)

142 
	#åunˇã
 
åunˇã64


	)

143 
	#lockf
 
lockf64


	)

144 
	#ãŒ
 
ãŒ64


	)

149 #i‡
deföed
(
_LP64
Ë&& deföed(
_LARGEFILE64_SOURCE
)

150 #ifdef 
__PRAGMA_REDEFINE_EXTNAME


151 #¥agm®
ªdeföe_exäame
 
·runˇã64
 
·runˇã


152 #¥agm®
ªdeföe_exäame
 
l£ek64
 
l£ek


153 #¥agm®
ªdeföe_exäame
 
¥ód64
 
¥ód


154 #¥agm®
ªdeföe_exäame
 
pwrôe64
 
pwrôe


155 #¥agm®
ªdeföe_exäame
 
åunˇã64
 
åunˇã


156 #¥agm®
ªdeföe_exäame
 
lockf64
 
lockf


157 #¥agm®
ªdeföe_exäame
 
ãŒ64
 
ãŒ


159 
	#·runˇã64
 
·runˇã


	)

160 
	#l£ek64
 
l£ek


	)

161 
	#¥ód64
 
¥ód


	)

162 
	#pwrôe64
 
pwrôe


	)

163 
	#åunˇã64
 
åunˇã


	)

164 
	#lockf64
 
lockf


	)

165 
	#ãŒ64
 
ãŒ


	)

169 #i‡
deföed
(
__STDC__
)

171 
ac˚ss
(const *, );

172 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

173 
deföed
(
__EXTENSIONS__
)

174 
ac˘
(const *);

176 
Æ¨m
();

177 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

178 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

179 
brk
(*);

181 
chdú
(const *);

182 
chown
(c⁄° *, 
uid_t
, 
gid_t
);

183 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)) || \

184 
deföed
(
__EXTENSIONS__
)

185 
chroŸ
(const *);

187 
˛o£
();

188 #i‡(
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >= 4)) || \

189 
deföed
(
__EXTENSIONS__
)

190 
size_t
 
c⁄f°r
(, *, size_t);

191 *
¸y±
(const *, const *);

193 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
) || \

194 
deföed
(
__EXTENSIONS__
)

195 *
˘îmid
(*);

197 #ifde‡
_REENTRANT


198 *
˘îmid_r
(*);

200 *
cu£rid
(*);

201 
dup
();

202 
dup2
(, );

203 #i‡(
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >= 4)) || \

204 
deföed
(
__EXTENSIONS__
)

205 
í¸y±
(*, );

207 
exe˛
(const *, const *, ...);

208 
exe˛e
(const *, const *, ...);

209 
exe˛p
(const *, const *, ...);

210 
execv
(const *, *const *);

211 
execve
(const *, *const *, *const *);

212 
execvp
(const *, *const *);

213 
_exô
();

219 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

220 
deföed
(
__EXTENSIONS__
)

221 
Áâach
(, const *);

223 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

224 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

225 
fchdú
();

226 
fchown
(, 
uid_t
, 
gid_t
);

228 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

229 
deföed
(
__EXTENSIONS__
)

230 
fchroŸ
();

232 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
) || \

233 (
	g_POSIX_C_SOURCE
 > 2Ë|| 
deföed
(
__EXTENSIONS__
)

234 
fd©async
();

241 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

242 
deföed
(
__EXTENSIONS__
)

243 
fdëach
(const *);

245 
pid_t
 
f‹k
();

246 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

247 
deföed
(
__EXTENSIONS__
)

248 
pid_t
 
f‹k1
();

250 
Â©hc⁄f
(, );

251 #i‡!
deföed
(
_POSIX_C_SOURCE
) || (_POSIX_C_SOURCE > 2) || \

252 
deföed
(
__EXTENSIONS__
)

253 
fsync
();

255 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

256 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64) || \

257 (
_POSIX_C_SOURCE
 > 2Ë|| 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

258 
·runˇã
(, 
off_t
);

260 *
gëcwd
(*, 
size_t
);

261 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

262 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

263 
gëdèbÀsize
();

265 
gid_t
 
gëegid
();

266 
uid_t
 
gëeuid
();

267 
gid_t
 
gëgid
();

268 
gëgroups
(, 
gid_t
 *);

269 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

270 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

271 
gëho°id
();

273 #i‡
deföed
(
_XPG4_2
)

274 
gëho°«me
(*, 
size_t
);

275 #ñi‡ 
deföed
(
__EXTENSIONS__
) || \

276 (!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
))

277 
gëho°«me
(*, );

279 *
gëlogö
();

280 #i‡(
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >= 4)) || \

281 
deföed
(
__EXTENSIONS__
)

282 
gë›t
(, *const *, const *);

283 *
›èrg
;

284 
›ãº
, 
›töd
, 
›t›t
;

285 *
gë∑ss
(const *);

287 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

288 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

289 
gë∑gesize
();

290 
pid_t
 
gëpgid
(pid_t);

292 
pid_t
 
gëpid
();

293 
pid_t
 
gëµid
();

294 
pid_t
 
gëpgΩ
();

295 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

296 
deföed
(
__EXTENSIONS__
)

297 *
gëtxt
(const *, const *);

299 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

300 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

301 
pid_t
 
gësid
(pid_t);

303 
uid_t
 
gëuid
();

304 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

305 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

306 *
gëwd
(*);

313 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

314 
deföed
(
__EXTENSIONS__
)

315 
io˘l
(, , ...);

317 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

318 
deföed
(
__EXTENSIONS__
)

319 
ißexec
(const *, *const *, *const *);

321 
ißây
();

322 
lök
(const *, const *);

323 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

324 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

325 
lchown
(c⁄° *, 
uid_t
, 
gid_t
);

327 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

328 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
) || \

329 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64)

330 
lockf
(, , 
off_t
);

332 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

333 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

334 
ªadlök
(c⁄° *, *, 
size_t
);

336 
off_t
 
l£ek
(, off_t, );

337 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)) || \

338 
deföed
(
__EXTENSIONS__
)

339 
ni˚
();

341 
∑thc⁄f
(const *, );

342 
∑u£
();

343 
pùe
(*);

344 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

345 
deföed
(
__EXTENSIONS__
)

346 
off£t_t
 
Œ£ek
(, offset_t, );

348 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

349 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64) || \

350 
deföed
(
__EXTENSIONS__
)

351 
off_t
 
ãŒ
();

353 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

354 
deföed
(
__EXTENSIONS__
)

355 
möc‹e
(
ˇddr_t
, 
size_t
, *);

357 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

358 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64) || \

359 
deföed
(
_XPG5
Ë|| deföed(
__EXTENSIONS__
)

360 
ssize_t
 
¥ód
(, *, 
size_t
, 
off_t
);

362 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

363 
deföed
(
__EXTENSIONS__
)

364 
¥ofû
(*, 
size_t
, , );

366 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

367 (
	g_POSIX_C_SOURCE
 > 2Ë|| 
deföed
(
__EXTENSIONS__
)

368 
±hªad_©f‹k
((*) (), (*) (), (*) ());

370 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

371 
deföed
(
__EXTENSIONS__
)

372 
±ø˚
(, 
pid_t
, , );

374 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

375 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64) || \

376 
deföed
(
_XPG5
Ë|| deföed(
__EXTENSIONS__
)

377 
ssize_t
 
pwrôe
(, c⁄° *, 
size_t
, 
off_t
);

379 
ssize_t
 
ªad
(, *, 
size_t
);

380 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 < 4)) || \

381 
deföed
(
__EXTENSIONS__
)

382 
ª«me
(const *, const *);

384 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

385 
deföed
(
__EXTENSIONS__
)

386 
ªsﬁvï©h
(c⁄° *, *, 
size_t
);

388 
rmdú
(const *);

389 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

390 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

391 *
sbrk
(
öçå_t
);

393 
£tgid
(
gid_t
);

394 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

395 
deföed
(
__EXTENSIONS__
)

396 
£ãgid
(
gid_t
);

398 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

399 
deföed
(
__EXTENSIONS__
)

400 
£tgroups
(, c⁄° 
gid_t
 *);

402 
£çgid
(
pid_t
,Öid_t);

403 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

404 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

405 
pid_t
 
£çgΩ
();

406 
£åegid
(
gid_t
, gid_t);

407 
£åeuid
(
uid_t
, uid_t);

409 
pid_t
 
£tsid
();

410 
£tuid
(
uid_t
);

411 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

412 
deföed
(
__EXTENSIONS__
)

413 
£ãuid
(
uid_t
);

415 
¶ìp
();

416 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

417 
deföed
(
__EXTENSIONS__
)

418 
°ime
(c⁄° 
time_t
 *);

420 #i‡
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >= 4)

422 
swab
(c⁄° *, *, 
ssize_t
);

424 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

425 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

426 
symlök
(const *, const *);

427 
sync
();

429 
sysc⁄f
();

430 #i‡
deföed
(
_XPG5
)

431 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


432 #¥agm®
ªdeföe_exäame
 
sysc⁄f
 
__sysc⁄f_xpg5


434 
__sysc⁄f_xpg5
();

435 
	#sysc⁄f
 
__sysc⁄f_xpg5


	)

438 
pid_t
 
tcgëpgΩ
();

439 
tc£çgΩ
(, 
pid_t
);

440 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

441 
deföed
(
__EXTENSIONS__
)

442 
off_t
 
ãŒ
();

444 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

445 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64) || \

446 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

447 
åunˇã
(c⁄° *, 
off_t
);

449 *
ây«me
();

450 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

451 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

452 
u£c⁄ds_t
 
uÆ¨m
(useconds_t, useconds_t);

454 
u∆ök
(const *);

455 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

456 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

457 
u¶ìp
(
u£c⁄ds_t
);

459 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

460 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

461 
pid_t
 
vf‹k
();

463 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

464 
deföed
(
__EXTENSIONS__
)

465 
vh™gup
();

467 
ssize_t
 
wrôe
(, c⁄° *, 
size_t
);

468 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

469 
deföed
(
__EXTENSIONS__
)

470 
yõld
();

474 #if 
deföed
(
_LARGEFILE64_SOURCE
Ë&& !((
_FILE_OFFSET_BITS
 == 64) && \

475 !
deföed
(
__PRAGMA_REDEFINE_EXTNAME
))

476 
·runˇã64
(, 
off64_t
);

477 
off64_t
 
l£ek64
(, off64_t, );

478 
ssize_t
 
¥ód64
(, *, 
size_t
, 
off64_t
);

479 
ssize_t
 
pwrôe64
(, c⁄° *, 
size_t
, 
off64_t
);

480 
off64_t
 
ãŒ64
();

481 
åunˇã64
(c⁄° *, 
off64_t
);

482 
lockf64
(, , 
off64_t
);

487 
ac˚ss
();

488 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

489 
deföed
(
__EXTENSIONS__
)

490 
ac˘
();

492 
Æ¨m
();

493 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

494 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

495 
brk
();

497 
chdú
();

498 
chown
();

499 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)) || \

500 
deföed
(
__EXTENSIONS__
)

501 
chroŸ
();

503 
˛o£
();

504 #i‡(
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >= 4)) || \

505 
deföed
(
__EXTENSIONS__
)

506 
size_t
 
c⁄f°r
();

507 *
¸y±
();

509 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
) || \

510 
deföed
(
__EXTENSIONS__
)

511 *
˘îmid
();

513 #ifde‡
_REENTRANT


514 *
˘îmid_r
();

516 *
cu£rid
();

517 
dup
();

518 
dup2
();

519 #i‡(
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >= 4)) || \

520 
deföed
(
__EXTENSIONS__
)

521 
í¸y±
();

523 
exe˛
();

524 
exe˛e
();

525 
exe˛p
();

526 
execv
();

527 
execve
();

528 
execvp
();

529 
_exô
();

530 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

531 
deföed
(
__EXTENSIONS__
)

532 
Áâach
();

534 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

535 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

536 
fchdú
();

537 
fchown
();

539 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

540 
deföed
(
__EXTENSIONS__
)

541 
fchroŸ
();

543 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
) || \

544 (
	g_POSIX_C_SOURCE
 > 2Ë|| 
deföed
(
__EXTENSIONS__
)

545 
fd©async
();

547 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)

548 
fdëach
();

550 
pid_t
 
f‹k
();

551 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

552 
deföed
(
__EXTENSIONS__
)

553 
pid_t
 
f‹k1
();

555 
Â©hc⁄f
();

556 #i‡!
deföed
(
_POSIX_C_SOURCE
) || (_POSIX_C_SOURCE > 2) || \

557 
deföed
(
__EXTENSIONS__
)

558 
fsync
();

560 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

561 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64) || \

562 (
_POSIX_C_SOURCE
 > 2Ë|| 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

563 
·runˇã
();

565 *
gëcwd
();

566 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

567 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

568 
gëdèbÀsize
();

570 
gid_t
 
gëegid
();

571 
uid_t
 
gëeuid
();

572 
gid_t
 
gëgid
();

573 
gëgroups
();

574 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

575 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

576 
gëho°id
();

578 *
gëlogö
();

579 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

580 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

581 #i‡(
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >= 4)) || \

582 
deföed
(
__EXTENSIONS__
)

583 
gë›t
();

584 *
›èrg
;

585 
›ãº
, 
›töd
, 
›t›t
;

586 *
gë∑ss
();

588 
gë∑gesize
();

589 
pid_t
 
gëpgid
();

591 
pid_t
 
gëpid
();

592 
pid_t
 
gëµid
();

593 
pid_t
 
gëpgΩ
();

594 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

595 
deföed
(
__EXTENSIONS__
)

596 *
gëtxt
();

598 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

599 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

600 
pid_t
 
gësid
();

602 
uid_t
 
gëuid
();

603 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

604 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

605 *
gëwd
();

607 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

608 
deföed
(
__EXTENSIONS__
)

609 
io˘l
();

611 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

612 
deföed
(
__EXTENSIONS__
)

613 
ißexec
();

615 
ißây
();

616 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

617 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

618 
lchown
();

620 
lök
();

621 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

622 
deföed
(
__EXTENSIONS__
)

623 
off£t_t
 
Œ£ek
();

625 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

626 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
) || \

627 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64)

628 
lockf
();

630 
off_t
 
l£ek
();

631 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

632 
deföed
(
__EXTENSIONS__
)

633 
möc‹e
();

635 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)) || \

636 
deföed
(
__EXTENSIONS__
)

637 
ni˚
();

639 
∑thc⁄f
();

640 
∑u£
();

641 
pùe
();

642 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

643 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64) || \

644 
deföed
(
_XPG5
Ë|| deföed(
__EXTENSIONS__
)

645 
ssize_t
 
¥ód
();

647 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

648 
deföed
(
__EXTENSIONS__
)

649 
¥ofû
();

650 
±ø˚
();

652 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

653 (
	g_POSIX_C_SOURCE
 > 2Ë|| 
deföed
(
__EXTENSIONS__
)

654 
±hªad_©f‹k
();

656 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

657 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64) || \

658 
deföed
(
_XPG5
Ë|| deföed(
__EXTENSIONS__
)

659 
ssize_t
 
pwrôe
();

661 
ssize_t
 
ªad
();

662 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

663 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

664 
ªadlök
();

666 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 < 4)) || \

667 
deföed
(
__EXTENSIONS__
)

668 
ª«me
();

670 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

671 
deföed
(
__EXTENSIONS__
)

672 
ªsﬁvï©h
();

674 
rmdú
();

675 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

676 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

677 *
sbrk
();

679 
£tgid
();

680 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

681 
deföed
(
__EXTENSIONS__
)

682 
£ãgid
();

684 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

685 
deföed
(
__EXTENSIONS__
)

686 
£tgroups
();

688 
£çgid
();

689 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

690 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

691 
pid_t
 
£çgΩ
();

692 
£åegid
();

693 
£åeuid
();

695 
pid_t
 
£tsid
();

696 
£tuid
();

697 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

698 
deföed
(
__EXTENSIONS__
)

699 
£ãuid
();

701 
¶ìp
();

702 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

703 
deföed
(
__EXTENSIONS__
)

704 
°ime
();

706 #i‡
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >= 4)

708 
swab
();

710 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

711 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

712 
symlök
();

713 
sync
();

715 
sysc⁄f
();

716 #i‡
deföed
(
_XPG5
)

717 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


718 #¥agm®
ªdeföe_exäame
 
sysc⁄f
 
__sysc⁄f_xpg5


720 
__sysc⁄f_xpg5
();

721 
	#sysc⁄f
 
__sysc⁄f_xpg5


	)

724 
pid_t
 
tcgëpgΩ
();

725 
tc£çgΩ
();

726 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

727 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64) || \

728 
deföed
(
__EXTENSIONS__
)

729 
off_t
 
ãŒ
();

731 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

732 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64) || \

733 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

734 
åunˇã
();

736 *
ây«me
();

737 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

738 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

739 
u£c⁄ds_t
 
uÆ¨m
();

741 
u∆ök
();

742 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

743 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

744 
u¶ìp
();

746 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
) || \

747 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

748 
pid_t
 
vf‹k
();

750 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

751 
deföed
(
__EXTENSIONS__
)

752 
vh™gup
();

754 
ssize_t
 
wrôe
();

755 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

756 
deföed
(
__EXTENSIONS__
)

757 
yõld
();

761 #if 
deföed
(
_LARGEFILE64_SOURCE
Ë&& !((
_FILE_OFFSET_BITS
 == 64) && \

762 !
deföed
(
__PRAGMA_REDEFINE_EXTNAME
))

763 
·runˇã64
();

764 
off64_t
 
l£ek64
();

765 
ssize_t
 
¥ód64
();

766 
ssize_t
 
pwrôe64
();

767 
off64_t
 
ãŒ64
();

768 
åunˇã64
();

769 
lockf64
();

779 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

780 
deföed
(
__EXTENSIONS__
)

781 #i‡
deföed
(
__•¨c
)

782 #¥agm®
unknown_c⁄åﬁ_Êow
(
vf‹k
)

820 #if 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

821 (
	g_POSIX_C_SOURCE
 - 0 >199506LË|| 
deföed
(
_POSIX_PTHREAD_SEMANTICS
)

823 #if 
deföed
(
__STDC__
)

825 #if (
_POSIX_C_SOURCE
 - 0 >199506LË|| 
deföed
(
_POSIX_PTHREAD_SEMANTICS
)

827 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


828 
gëlogö_r
(*, );

829 
ây«me_r
(, *, 
size_t
);

830 #¥agm®
ªdeföe_exäame
 
gëlogö_r
 
__posix_gëlogö_r


831 #¥agm®
ªdeföe_exäame
 
ây«me_r
 
__posix_ây«me_r


835 
gëlogö_r
(*
__«me
, 
__Àn
)

837 
__posix_gëlogö_r
(*, );

838  (
__posix_gëlogö_r
(
__«me
, 
__Àn
));

841 
ây«me_r
(
__fûdes
, *
__buf
, 
size_t
 
__size
)

843 
__posix_ây«me_r
(, *, 
size_t
);

844  (
__posix_ây«me_r
(
__fûdes
, 
__buf
, 
__size
));

850 *
gëlogö_r
(*, );

851 *
ây«me_r
(, *, );

857 #i‡(
_POSIX_C_SOURCE
 - 0 >199506LË|| 
deföed
(
_POSIX_PTHREAD_SEMANTICS
)

859 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


860 
gëlogö_r
();

861 
ây«me_r
();

862 #¥agm®
ªdeföe_exäame
 
gëlogö_r
 
__posix_gëlogö_r


863 #¥agm®
ªdeföe_exäame
 
ây«me_r
 
__posix_ây«me_r


867 
gëlogö_r
(
__«me
, 
__Àn
)

868 *
	g__«me
;

869 
	g__Àn
;

871 
__posix_gëlogö_r
();

872  (
__posix_gëlogö_r
(
__«me
, 
__Àn
));

875 
ây«me_r
(
__fûdes
, 
__buf
, 
__size
)

876 
	g__fûdes
;

877 *
	g__buf
;

878 
size_t
 
	g__size
;

880 
__posix_ây«me_r
();

881  (
__posix_ây«me_r
(
__fûdes
, 
__buf
, 
__size
));

887 *
gëlogö_r
();

888 *
ây«me_r
();

896 #ifdef 
__˝lu•lus


	@/usr/include/iso/signal_iso.h

25 #i‚de‡
_ISO_SIGNAL_ISO_H


26 
	#_ISO_SIGNAL_ISO_H


	)

28 #¥agm®
idít
 "@(#)signal_iso.h 1.1 99/08/09 SMI"

31 
	~<sys/iso/sig«l_iso.h
>

33 #ifdef 
__˝lu•lus


37 #i‡
__˝lu•lus
 >= 199711L

38 
«me•a˚
 
°d
 {

41 
	tsig_©omic_t
;

43 #i‡
deföed
(
__STDC__
)

45 #ifde‡
__˝lu•lus


46 "C" 
SIG_PF
 
sig«l
(, SIG_PF);

48 (*
sig«l
(, (*)()))();

50 
øi£
();

54 (*
sig«l
())();

55 
øi£
();

59 #i‡
__˝lu•lus
 >= 199711L

63 #ifdef 
__˝lu•lus


	@/usr/include/iso/stdarg_iso.h

25 #i‚de‡
_ISO_STDARG_ISO_H


26 
	#_ISO_STDARG_ISO_H


	)

28 #¥agm®
idít
 "@(#)stdarg_iso.h 1.1 99/08/09 SMI"

30 
	~<sys/va_li°.h
>

32 #ifdef 
__˝lu•lus


42 #i‡
__˝lu•lus
 >= 199711L

43 
«me•a˚
 
°d
 {

46 #i‡!
deföed
(
_VA_LIST
Ë|| 
__˝lu•lus
 >= 199711L

47 
	#_VA_LIST


	)

48 
__va_li°
 
	tva_li°
;

51 #i‡
__˝lu•lus
 >= 199711L

71 #i‡(
deföed
(
__BUILTIN_VA_ARG_INCR
Ë|| deföed(
__•¨c
) || \

72 
deföed
(
__i386
)Ë&& !
	$deföed
(
__löt
)

78 
	#va_°¨t
(
li°
, 
«me
) (Ë÷i° = (
__va_li°
Ë&
__buûtö_va_Æi°
)

	)

79 
	#va_¨g
(
li°
, 
mode
) ((modê*)
	`__buûtö_va_¨g_ö¸
((modê*Ói°))[0]

	)

81 #ñi‡
	`deföed
(
__ü64
)

83 
	#VA_ALIGN
 8

	)

86 
	#_ARGSIZEOF
(
t
) (( (tË+ 
VA_ALIGN
 - 1Ë& ~(VA_ALIGN - 1))

	)

88 #i‡
	`deföed
(
__ïcg__
)

89 
	#va_°¨t
(
li°
, 
«me
) (
	`__va_°¨t
(&li°))

	)

91 
	#va_°¨t
(
li°
, 
«me
) (li° = (
__va_li°
)&«mê+ 
	`_ARGSIZEOF
“ame))

	)

94 
	#va_¨g
(
li°
, 
t
) (*— *)(÷i° +
	`_ARGSIZEOF
—)Ë- _ARGSIZEOF—)))

	)

95 
	#va_íd
(
li°
) (li° = (
__va_li°
)0)

	)

105 #i‡
__STDC__
 != 0

106 
	#va_°¨t
(
li°
, 
«me
) () (list = (*)((*)&name + \

107 (( (
«me
Ë+ ( (Ë- 1)Ë& ~( (Ë- 1))))

	)

109 
	#va_°¨t
(
li°
, 
«me
Ë(Ë÷i° = (*)((*)&...))

	)

111 
	#va_¨g
(
li°
, 
mode
) \

112 ((
mode
 *)(
li°
 = (*)((*Ói° +  (mode))))[-1]

	)

116 #i‡!
	`deföed
(
__ü64
)

117 
	`va_íd
(
__va_li°
);

118 
	#va_íd
(
li°
Ë()0

	)

121 #ifdef 
__˝lu•lus


122 
	}
}

	@/usr/include/iso/stdio_iso.h

29 #i‚de‡
_ISO_STDIO_ISO_H


30 
	#_ISO_STDIO_ISO_H


	)

32 #¥agm®
idít
 "@(#)stdio_iso.h 1.2 99/10/25 SMI"

35 
	~<sys/„©uª_ã°s.h
>

36 
	~<sys/va_li°.h
>

37 
	~<°dio_èg.h
>

38 
	~<°dio_im∂.h
>

48 #ifdef 
__˝lu•lus


52 #i‡!
deföed
(
_LP64
Ë&& (
_FILE_OFFSET_BITS
 =64 || deföed(
_LARGEFILE64_SOURCE
))

58 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

59 
	t__l⁄gl⁄g_t
;

62 
	u
{

63 
	m_d
;

64 
	m_l
[2];

65 } 
	t__l⁄gl⁄g_t
;

69 #i‡
__˝lu•lus
 >= 199711L

70 
«me•a˚
 
	g°d
 {

73 #i‡!
deföed
(
_FILEDEFED
Ë|| 
__˝lu•lus
 >= 199711L

74 
	#_FILEDEFED


	)

75 
__FILE
 
	tFILE
;

78 #i‡!
deföed
(
_SIZE_T
Ë|| 
__˝lu•lus
 >= 199711L

79 
	#_SIZE_T


	)

80 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

81 
	tsize_t
;

83 
	tsize_t
;

87 #i‡
deföed
(
_LP64
Ë|| 
_FILE_OFFSET_BITS
 == 32

88 
	tÂos_t
;

90 
__l⁄gl⁄g_t
 
	tÂos_t
;

93 #i‡
__˝lu•lus
 >= 199711L

97 #i‚def 
NULL


98 #i‡
deföed
(
_LP64
Ë&& !deföed(
__˝lu•lus
)

99 
	#NULL
 0L

	)

101 
	#NULL
 0

	)

105 
	#BUFSIZ
 1024

	)

113 #i‡
deföed
(
__i386
)

114 
	#_NFILE
 60

	)

116 
	#_NFILE
 20

	)

119 
	#_SBFSIZ
 8

	)

121 
	#_IOFBF
 0000

	)

122 
	#_IOLBF
 0100

	)

123 
	#_IONBF
 0004

	)

124 
	#_IOEOF
 0020

	)

125 
	#_IOERR
 0040

	)

127 
	#_IOREAD
 0001

	)

128 
	#_IOWRT
 0002

	)

129 
	#_IORW
 0200

	)

130 
	#_IOMYBUF
 0010

	)

132 #i‚de‡
EOF


133 
	#EOF
 (-1)

	)

136 
	#FOPEN_MAX
 
_NFILE


	)

137 
	#FILENAME_MAX
 1024

	)

139 
	#SEEK_SET
 0

	)

140 
	#SEEK_CUR
 1

	)

141 
	#SEEK_END
 2

	)

142 
	#TMP_MAX
 17576

	)

144 
	#L_tm≤am
 25

	)

146 #i‡
deföed
(
__STDC__
)

147 
__FILE
 
__iob
[
_NFILE
];

148 
	#°dö
 (&
__iob
[0])

	)

149 
	#°dout
 (&
__iob
[1])

	)

150 
	#°dîr
 (&
__iob
[2])

	)

152 
__FILE
 
_iob
[
_NFILE
];

153 
	#°dö
 (&
_iob
[0])

	)

154 
	#°dout
 (&
_iob
[1])

	)

155 
	#°dîr
 (&
_iob
[2])

	)

158 #i‡
__˝lu•lus
 >= 199711L

159 
«me•a˚
 
	g°d
 {

162 #i‡
deföed
(
__STDC__
)

164 
ªmove
(const *);

165 
ª«me
(const *, const *);

166 
FILE
 *
tmpfûe
();

167 *
tm≤am
(*);

168 
f˛o£
(
FILE
 *);

169 
fÊush
(
FILE
 *);

170 
FILE
 *
f›í
(const *, const *);

171 
FILE
 *
‰e›í
(const *, const *, FILE *);

172 
£tbuf
(
FILE
 *, *);

173 
£tvbuf
(
FILE
 *, *, , 
size_t
);

175 
Ârötf
(
FILE
 *, const *, ...);

177 
fsˇnf
(
FILE
 *, const *, ...);

179 
¥ötf
(const *, ...);

181 
sˇnf
(const *, ...);

183 
•rötf
(*, const *, ...);

185 
ssˇnf
(const *, const *, ...);

186 
vÂrötf
(
FILE
 *, c⁄° *, 
__va_li°
);

187 
v¥ötf
(c⁄° *, 
__va_li°
);

188 
v•rötf
(*, c⁄° *, 
__va_li°
);

189 
fgëc
(
FILE
 *);

190 *
fgës
(*, , 
FILE
 *);

191 
Âutc
(, 
FILE
 *);

192 
Âuts
(c⁄° *, 
FILE
 *);

193 #i‡(
__˝lu•lus
 >199711L && (
deföed
(
_LP64
Ë|| deföed(
_REENTRANT
))) || \

194 
	g__˝lu•lus
 < 199711L

195 
gëc
(
FILE
 *);

196 
putc
(, 
FILE
 *);

198 #i‡(
__˝lu•lus
 >199711L && 
deföed
(
_REENTRANT
)) || \

199 
	g__˝lu•lus
 < 199711L

200 
gëch¨
();

201 
putch¨
();

203 *
gës
(*);

204 
puts
(const *);

205 
ungëc
(, 
FILE
 *);

206 
size_t
 
‰ód
(*, size_t, size_t, 
FILE
 *);

207 
size_t
 
fwrôe
(c⁄° *, size_t, size_t, 
FILE
 *);

208 
fgëpos
(
FILE
 *, 
Âos_t
 *);

209 
f£ek
(
FILE
 *, , );

210 
f£ços
(
FILE
 *, c⁄° 
Âos_t
 *);

211 
·ñl
(
FILE
 *);

212 
ªwöd
(
FILE
 *);

213 #i‡(
__˝lu•lus
 >199711L && (
deföed
(
_LP64
Ë|| deföed(
_REENTRANT
))) || \

214 
	g__˝lu•lus
 < 199711L

215 
˛óªº
(
FILE
 *);

216 
„of
(
FILE
 *);

217 
„º‹
(
FILE
 *);

219 
≥º‹
(const *);

221 #i‚def 
_LP64


222 
__fûbuf
(
FILE
 *);

223 
__Êsbuf
(, 
FILE
 *);

228 
ªmove
();

229 
ª«me
();

230 
FILE
 *
tmpfûe
();

231 *
tm≤am
();

232 
f˛o£
();

233 
fÊush
();

234 
FILE
 *
f›í
();

235 
FILE
 *
‰e›í
();

236 
£tbuf
();

237 
£tvbuf
();

238 
Ârötf
();

239 
fsˇnf
();

240 
¥ötf
();

241 
sˇnf
();

242 
•rötf
();

243 
ssˇnf
();

244 
vÂrötf
();

245 
v¥ötf
();

246 
v•rötf
();

247 
fgëc
();

248 *
fgës
();

249 
Âutc
();

250 
Âuts
();

251 
gëc
();

252 
gëch¨
();

253 *
gës
();

254 
putc
();

255 
putch¨
();

256 
puts
();

257 
ungëc
();

258 
size_t
 
‰ód
();

259 
size_t
 
fwrôe
();

260 
fgëpos
();

261 
f£ek
();

262 
f£ços
();

263 
·ñl
();

264 
ªwöd
();

265 
˛óªº
();

266 
„of
();

267 
„º‹
();

268 
≥º‹
();

270 #i‚def 
_LP64


271 
_fûbuf
();

272 
_Êsbuf
();

277 #i‡
__˝lu•lus
 >= 199711L

281 #i‡!
deföed
(
__löt
)

283 #i‚def 
_REENTRANT


285 #i‚def 
_LP64


286 #ifdef 
__STDC__


287 #i‡
__˝lu•lus
 >= 199711L

288 
«me•a˚
 
	g°d
 {

289 
ölöe
 
gëc
(
FILE
 *
_p
) {

290  (--
	g_p
->
	g_˙t
 < 0 ? 
__fûbuf
(
_p
Ë: ()*_p->
_±r
++); }

291 
ölöe
 
putc
(
_x
, 
FILE
 *
_p
) {

292  (--
	g_p
->
	g_˙t
 < 0 ? 
__Êsbuf
(
_x
, 
_p
)

293 : ()(*
_p
->
_±r
++ = (Ë
_x
)); }

296 
	#gëc
(
p
) (--’)->
_˙t
 < 0 ? 
	`__fûbuf
’Ë: ()*’)->
_±r
++)

	)

297 
	#putc
(
x
, 
p
) (--’)->
_˙t
 < 0 ? 
	`__Êsbuf
((x), (p)) \

298 : ()(*(
p
)->
_±r
++ = (Ë(
x
)))

	)

301 
	#gëc
(
p
) (--’)->
_˙t
 < 0 ? 
	`_fûbuf
’Ë: (Ë*’)->
_±r
++)

	)

302 
	#putc
(
x
, 
p
) (--’)->
_˙t
 < 0 ? 
	`_Êsbuf
((x), (p)) : \

303 (Ë(*(
p
)->
_±r
++ = (Ë(
x
)))

	)

307 #i‡
__˝lu•lus
 >= 199711L

308 
«me•a˚
 
	g°d
 {

309 
ölöe
 
gëch¨
(Ë{  
gëc
(
°dö
); }

310 
ölöe
 
putch¨
(
_x
Ë{  
putc
(_x, 
°dout
); }

313 
	#gëch¨
() 
	`gëc
(
°dö
)

	)

314 
	#putch¨
(
x
) 
	`putc
((x), 
°dout
)

	)

317 #i‚def 
_LP64


318 #i‡
__˝lu•lus
 >= 199711L

319 
«me•a˚
 
	g°d
 {

320 
ölöe
 
˛óªº
(
FILE
 *
_p
Ë{ 
	g_p
->
	g_Êag
 &~(
_IOERR
 | 
_IOEOF
); }

321 
ölöe
 
„of
(
FILE
 *
_p
Ë{  
	g_p
->
	g_Êag
 & 
	g_IOEOF
; }

322 
ölöe
 
„º‹
(
FILE
 *
_p
Ë{  
	g_p
->
	g_Êag
 & 
	g_IOERR
; }

325 
	#˛óªº
(
p
) (()(’)->
_Êag
 &~(
_IOERR
 | 
_IOEOF
)))

	)

326 
	#„of
(
p
) (’)->
_Êag
 & 
_IOEOF
)

	)

327 
	#„º‹
(
p
) (’)->
_Êag
 & 
_IOERR
)

	)

335 #ifdef 
__˝lu•lus


	@/usr/include/iso/string_iso.h

25 #i‚de‡
_ISO_STRING_ISO_H


26 
	#_ISO_STRING_ISO_H


	)

28 #¥agm®
idít
 "@(#)string_iso.h 1.2 99/11/09 SMI"

31 
	~<sys/„©uª_ã°s.h
>

33 #ifdef 
__˝lu•lus


37 #i‡
__˝lu•lus
 >= 199711L

38 
«me•a˚
 
°d
 {

41 #i‡!
deföed
(
_SIZE_T
Ë|| 
__˝lu•lus
 >= 199711L

42 
	#_SIZE_T


	)

43 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

44 
	tsize_t
;

46 
	tsize_t
;

50 #i‚def 
NULL


51 #i‡
deföed
(
_LP64
Ë&& !deföed(
__˝lu•lus
)

52 
	#NULL
 0L

	)

54 
	#NULL
 0

	)

58 #i‡
deföed
(
__STDC__
)

60 
memcmp
(c⁄° *, c⁄° *, 
size_t
);

61 *
mem˝y
(*, c⁄° *, 
size_t
);

62 *
memmove
(*, c⁄° *, 
size_t
);

63 *
mem£t
(*, , 
size_t
);

64 *
°rˇt
(*, const *);

65 
°rcmp
(const *, const *);

66 *
°r˝y
(*, const *);

67 
°rcﬁl
(const *, const *);

68 
size_t
 
°rc•n
(const *, const *);

69 *
°ªº‹
();

70 
size_t
 
°æí
(const *);

71 *
°∫ˇt
(*, c⁄° *, 
size_t
);

72 
°∫cmp
(c⁄° *, c⁄° *, 
size_t
);

73 *
°∫˝y
(*, c⁄° *, 
size_t
);

74 
size_t
 
°r•n
(const *, const *);

75 *
°πok
(*, const *);

76 
size_t
 
°rx‰m
(*, const *, size_t);

77 #i‡
__˝lu•lus
 >= 199711L

78 c⁄° *
°rchr
(const *, );

80 
ölöe
 *
°rchr
(*
__s
, 
__c
) {

81  (*)
°rchr
((c⁄° *)
__s
, 
__c
);

84 c⁄° *
°Ωbrk
(const *, const *);

86 
ölöe
 * 
°Ωbrk
(*
__s1
, c⁄° *
__s2
) {

87  (*)
°Ωbrk
((c⁄° *)
__s1
, 
__s2
);

90 c⁄° *
°ºchr
(const *, );

92 
ölöe
 * 
°ºchr
(*
__s
, 
__c
) {

93  (*)
°ºchr
((c⁄° *)
__s
, 
__c
);

96 c⁄° *
°r°r
(const *, const *);

98 
ölöe
 *
°r°r
(*
__s1
, c⁄° *
__s2
) {

99  (*)
°r°r
((c⁄° *)
__s1
, 
__s2
);

102 c⁄° *
memchr
(c⁄° *, , 
size_t
);

103 #i‚de‡
_MEMCHR_INLINE


104 
	#_MEMCHR_INLINE


	)

106 
ölöe
 * 
memchr
(* 
__s
, 
__c
, 
size_t
 
__n
) {

107  (*)
memchr
((c⁄° *)
__s
, 
__c
, 
__n
);

112 *
memchr
(c⁄° *, , 
size_t
);

113 *
°rchr
(const *, );

114 *
°Ωbrk
(const *, const *);

115 *
°ºchr
(const *, );

116 *
°r°r
(const *, const *);

121 *
memchr
();

122 
memcmp
();

123 *
mem˝y
();

124 *
memmove
();

125 *
mem£t
();

126 *
°rˇt
();

127 *
°rchr
();

128 
°rcmp
();

129 
°rcﬁl
();

130 *
°r˝y
();

131 
size_t
 
°rc•n
();

132 *
°ªº‹
();

133 
size_t
 
°æí
();

134 *
°∫ˇt
();

135 
°∫cmp
();

136 *
°∫˝y
();

137 *
°Ωbrk
();

138 *
°ºchr
();

139 
size_t
 
°r•n
();

140 *
°r°r
();

141 *
°πok
();

142 
size_t
 
°rx‰m
();

146 #i‡
__˝lu•lus
 >= 199711L

150 #ifdef 
__˝lu•lus


	@/usr/include/iso/time_iso.h

25 #i‚de‡
_ISO_TIME_ISO_H


26 
	#_ISO_TIME_ISO_H


	)

28 #¥agm®
idít
 "@(#)time_iso.h 1.1 99/08/09 SMI"

30 
	~<sys/„©uª_ã°s.h
>

32 #ifdef 
__˝lu•lus


36 #i‡
__˝lu•lus
 >= 199711L

37 
«me•a˚
 
°d
 {

40 #i‚de‡
NULL


41 #i‡
deföed
(
_LP64
Ë&& !deföed(
__˝lu•lus
)

42 
	#NULL
 0L

	)

44 
	#NULL
 0

	)

48 #i‡!
deföed
(
_SIZE_T
Ë|| 
__˝lu•lus
 >= 199711L

49 
	#_SIZE_T


	)

50 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

51 
	tsize_t
;

53 
	tsize_t
;

57 #i‡!
deföed
(
_CLOCK_T
Ë|| 
__˝lu•lus
 >= 199711L

58 
	#_CLOCK_T


	)

59 
	t˛ock_t
;

62 #i‡!
deföed
(
_TIME_T
Ë|| 
__˝lu•lus
 >= 199711L

63 
	#_TIME_T


	)

64 
	ttime_t
;

67 
	#CLOCKS_PER_SEC
 1000000

	)

69 
	stm
 {

70 
tm_£c
;

71 
tm_mö
;

72 
tm_hour
;

73 
tm_mday
;

74 
tm_m⁄
;

75 
tm_yór
;

76 
tm_wday
;

77 
tm_yday
;

78 
tm_isd°
;

82 #i‡
deföed
(
__STDC__
)

84 *
as˘ime
(c⁄° 
tm
 *);

85 
˛ock_t
 
˛ock
();

86 *
˘ime
(c⁄° 
time_t
 *);

87 
dif·ime
(
time_t
,Åime_t);

88 
tm
 *
gmtime
(c⁄° 
time_t
 *);

89 
tm
 *
loˇ…ime
(c⁄° 
time_t
 *);

90 
time_t
 
mktime
(
tm
 *);

91 
time_t
 
time
(time_t *);

92 
size_t
 
°r·ime
(*, size_t, c⁄° *, c⁄° 
tm
 *);

96 *
as˘ime
();

97 
˛ock_t
 
˛ock
();

98 *
˘ime
();

99 
dif·ime
();

100 
tm
 *
gmtime
();

101 
tm
 *
loˇ…ime
();

102 
time_t
 
mktime
();

103 
time_t
 
time
();

104 
size_t
 
°r·ime
();

108 #i‡
__˝lu•lus
 >= 199711L

112 #ifdef 
__˝lu•lus


	@/usr/include/net/if_dl.h

38 #i‚def 
_NET_IF_DL_H


39 
	#_NET_IF_DL_H


	)

41 #¥agm®
idít
 "@(#)if_dl.h 1.7 98/01/06 SMI"

44 #ifdef 
__˝lu•lus


69 
	ssockaddr_dl
 {

70 
ush‹t_t
 
sdl_Ámûy
;

71 
ush‹t_t
 
sdl_ödex
;

72 
uch¨_t
 
sdl_ty≥
;

73 
uch¨_t
 
sdl_∆í
;

74 
uch¨_t
 
sdl_Æí
;

75 
uch¨_t
 
sdl_¶í
;

76 
sdl_d©a
[244];

79 
	#LLADDR
(
s
Ë((
ˇddr_t
)((s)->
sdl_d©a
 + (s)->
sdl_∆í
))

	)

81 #ifdef 
__˝lu•lus


	@/usr/include/sys/byteorder.h

8 #i‚de‡
_SYS_BYTEORDER_H


9 
	#_SYS_BYTEORDER_H


	)

11 #¥agm®
idít
 "@(#)byteorder.h 1.14 98/04/19 SMI"

13 
	~<sys/iß_defs.h
>

15 #ifdef 
__˝lu•lus


44 #i‡
deföed
(
_BIG_ENDIAN
Ë&& !deföed(
¡ohl
Ë&& !deföed(
löt
)

46 
	#¡ohl
(
x
) (x)

	)

47 
	#¡ohs
(
x
) (x)

	)

48 
	#ht⁄l
(
x
) (x)

	)

49 
	#ht⁄s
(
x
) (x)

	)

51 #ñi‡!
deföed
(
¡ohl
)

53 #i‚def 
_IN_PORT_T


54 
	#_IN_PORT_T


	)

55 
uöt16_t
 
	tö_p‹t_t
;

58 #i‚def 
_IN_ADDR_T


59 
	#_IN_ADDR_T


	)

60 
uöt32_t
 
	tö_addr_t
;

63 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
Ë|| deföed(
_XPG5
)

64 
uöt32_t
 
ht⁄l
(uint32_t);

65 
uöt16_t
 
ht⁄s
(uint16_t);

66 
uöt32_t
 
¡ohl
(uint32_t);

67 
uöt16_t
 
¡ohs
(uint16_t);

69 
ö_addr_t
 
ht⁄l
(in_addr_t);

70 
ö_p‹t_t
 
ht⁄s
(in_port_t);

71 
ö_addr_t
 
¡ohl
(in_addr_t);

72 
ö_p‹t_t
 
¡ohs
(in_port_t);

76 #ifdef 
__˝lu•lus


	@/usr/include/sys/errno.h

8 #i‚de‡
_SYS_ERRNO_H


9 
	#_SYS_ERRNO_H


	)

11 #¥agm®
idít
 "@(#)errno.h 1.20 00/02/14 SMI"

34 #ifdef 
__˝lu•lus


42 
	#EPERM
 1

	)

43 
	#ENOENT
 2

	)

44 
	#ESRCH
 3

	)

45 
	#EINTR
 4

	)

46 
	#EIO
 5

	)

47 
	#ENXIO
 6

	)

48 
	#E2BIG
 7

	)

49 
	#ENOEXEC
 8

	)

50 
	#EBADF
 9

	)

51 
	#ECHILD
 10

	)

52 
	#EAGAIN
 11

	)

53 
	#ENOMEM
 12

	)

54 
	#EACCES
 13

	)

55 
	#EFAULT
 14

	)

56 
	#ENOTBLK
 15

	)

57 
	#EBUSY
 16

	)

58 
	#EEXIST
 17

	)

59 
	#EXDEV
 18

	)

60 
	#ENODEV
 19

	)

61 
	#ENOTDIR
 20

	)

62 
	#EISDIR
 21

	)

63 
	#EINVAL
 22

	)

64 
	#ENFILE
 23

	)

65 
	#EMFILE
 24

	)

66 
	#ENOTTY
 25

	)

67 
	#ETXTBSY
 26

	)

68 
	#EFBIG
 27

	)

69 
	#ENOSPC
 28

	)

70 
	#ESPIPE
 29

	)

71 
	#EROFS
 30

	)

72 
	#EMLINK
 31

	)

73 
	#EPIPE
 32

	)

74 
	#EDOM
 33

	)

75 
	#ERANGE
 34

	)

76 
	#ENOMSG
 35

	)

77 
	#EIDRM
 36

	)

78 
	#ECHRNG
 37

	)

79 
	#EL2NSYNC
 38

	)

80 
	#EL3HLT
 39

	)

81 
	#EL3RST
 40

	)

82 
	#ELNRNG
 41

	)

83 
	#EUNATCH
 42

	)

84 
	#ENOCSI
 43

	)

85 
	#EL2HLT
 44

	)

86 
	#EDEADLK
 45

	)

87 
	#ENOLCK
 46

	)

88 
	#ECANCELED
 47

	)

89 
	#ENOTSUP
 48

	)

92 
	#EDQUOT
 49

	)

95 
	#EBADE
 50

	)

96 
	#EBADR
 51

	)

97 
	#EXFULL
 52

	)

98 
	#ENOANO
 53

	)

99 
	#EBADRQC
 54

	)

100 
	#EBADSLT
 55

	)

101 
	#EDEADLOCK
 56

	)

103 
	#EBFONT
 57

	)

106 
	#EOWNERDEAD
 58

	)

107 
	#ENOTRECOVERABLE
 59

	)

110 
	#ENOSTR
 60

	)

111 
	#ENODATA
 61

	)

112 
	#ETIME
 62

	)

113 
	#ENOSR
 63

	)

115 
	#ENONET
 64

	)

116 
	#ENOPKG
 65

	)

117 
	#EREMOTE
 66

	)

118 
	#ENOLINK
 67

	)

119 
	#EADV
 68

	)

120 
	#ESRMNT
 69

	)

122 
	#ECOMM
 70

	)

123 
	#EPROTO
 71

	)

126 
	#ELOCKUNMAPPED
 72

	)

128 
	#ENOTACTIVE
 73

	)

129 
	#EMULTIHOP
 74

	)

130 
	#EBADMSG
 77

	)

131 
	#ENAMETOOLONG
 78

	)

132 
	#EOVERFLOW
 79

	)

133 
	#ENOTUNIQ
 80

	)

134 
	#EBADFD
 81

	)

135 
	#EREMCHG
 82

	)

138 
	#ELIBACC
 83

	)

139 
	#ELIBBAD
 84

	)

140 
	#ELIBSCN
 85

	)

141 
	#ELIBMAX
 86

	)

142 
	#ELIBEXEC
 87

	)

143 
	#EILSEQ
 88

	)

144 
	#ENOSYS
 89

	)

145 
	#ELOOP
 90

	)

146 
	#ERESTART
 91

	)

147 
	#ESTRPIPE
 92

	)

148 
	#ENOTEMPTY
 93

	)

149 
	#EUSERS
 94

	)

153 
	#ENOTSOCK
 95

	)

154 
	#EDESTADDRREQ
 96

	)

155 
	#EMSGSIZE
 97

	)

156 
	#EPROTOTYPE
 98

	)

157 
	#ENOPROTOOPT
 99

	)

158 
	#EPROTONOSUPPORT
 120

	)

159 
	#ESOCKTNOSUPPORT
 121

	)

160 
	#EOPNOTSUPP
 122

	)

161 
	#EPFNOSUPPORT
 123

	)

162 
	#EAFNOSUPPORT
 124

	)

164 
	#EADDRINUSE
 125

	)

165 
	#EADDRNOTAVAIL
 126

	)

167 
	#ENETDOWN
 127

	)

168 
	#ENETUNREACH
 128

	)

169 
	#ENETRESET
 129

	)

171 
	#ECONNABORTED
 130

	)

172 
	#ECONNRESET
 131

	)

173 
	#ENOBUFS
 132

	)

174 
	#EISCONN
 133

	)

175 
	#ENOTCONN
 134

	)

177 
	#ESHUTDOWN
 143

	)

178 
	#ETOOMANYREFS
 144

	)

179 
	#ETIMEDOUT
 145

	)

180 
	#ECONNREFUSED
 146

	)

181 
	#EHOSTDOWN
 147

	)

182 
	#EHOSTUNREACH
 148

	)

183 
	#EWOULDBLOCK
 
EAGAIN


	)

184 
	#EALREADY
 149

	)

185 
	#EINPROGRESS
 150

	)

188 
	#ESTALE
 151

	)

191 #ifdef 
__˝lu•lus


	@/usr/include/sys/fcntl.h

13 #i‚def 
_SYS_FCNTL_H


14 
	#_SYS_FCNTL_H


	)

16 #¥agm®
idít
 "@(#)fcntl.h 1.45 98/07/17 SMI"

18 
	~<sys/„©uª_ã°s.h
>

20 
	~<sys/ty≥s.h
>

22 #ifdef 
__˝lu•lus


30 
	#O_RDONLY
 0

	)

31 
	#O_WRONLY
 1

	)

32 
	#O_RDWR
 2

	)

33 #i‡
deföed
(
__EXTENSIONS__
Ë|| !deföed(
_POSIX_C_SOURCE
)

34 
	#O_NDELAY
 0x04

	)

36 
	#O_APPEND
 0x08

	)

37 #i‡
deföed
(
__EXTENSIONS__
Ë|| !deföed(
_POSIX_C_SOURCE
) || \

38 (
_POSIX_C_SOURCE
 > 2Ë|| 
deföed
(
_XOPEN_SOURCE
)

39 
	#O_SYNC
 0x10

	)

40 
	#O_DSYNC
 0x40

	)

41 
	#O_RSYNC
 0x8000

	)

44 
	#O_NONBLOCK
 0x80

	)

45 #ifdef 
SUN_SRC_COMPAT


46 
	#O_PRIV
 0x1000

	)

48 #ifdef 
_LARGEFILE_SOURCE


49 
	#O_LARGEFILE
 0x2000

	)

55 
	#O_CREAT
 0x100

	)

56 
	#O_TRUNC
 0x200

	)

57 
	#O_EXCL
 0x400

	)

58 
	#O_NOCTTY
 0x800

	)

65 
	#F_DUPFD
 0

	)

66 
	#F_GETFD
 1

	)

67 
	#F_SETFD
 2

	)

68 
	#F_GETFL
 3

	)

69 
	#F_SETFL
 4

	)

75 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)

76 
	#F_O_GETLK
 5

	)

79 
	#SYSIDMASK
 0x0000ffff

	)

80 
	#GETSYSID
(
id
) (id & 
SYSIDMASK
)

	)

81 
	#NODEIDMASK
 0xffff0000

	)

82 
	#BITS_IN_SYSID
 16

	)

83 
	#GETNLMID
(
sysid
) (()(((
uöt_t
)(sysidË& 
NODEIDMASK
) >> \

84 
BITS_IN_SYSID
))

	)

87 
	#GETPXFSID
(
sysid
) (()(((
uöt_t
)(sysidË& 
NODEIDMASK
) >> \

88 
BITS_IN_SYSID
))

	)

91 
	#F_CHKFL
 8

	)

92 
	#F_DUP2FD
 9

	)

94 
	#F_ALLOCSP
 10

	)

95 
	#F_ISSTREAM
 13

	)

96 
	#F_PRIV
 15

	)

97 
	#F_NPRIV
 16

	)

98 
	#F_QUOTACTL
 17

	)

99 
	#F_BLOCKS
 18

	)

100 
	#F_BLKSIZE
 19

	)

104 
	#F_GETOWN
 23

	)

105 
	#F_SETOWN
 24

	)

107 #ifde‡
C2_AUDIT


108 
	#F_REVOKE
 25

	)

111 
	#F_HASREMOTELOCKS
 26

	)

120 #i‡
deföed
(
_LP64
Ë|| 
_FILE_OFFSET_BITS
 == 32

122 
	#F_SETLK
 6

	)

123 
	#F_SETLKW
 7

	)

124 
	#F_FREESP
 11

	)

125 
	#F_GETLK
 14

	)

128 
	#F_SETLK
 34

	)

129 
	#F_SETLKW
 35

	)

130 
	#F_FREESP
 27

	)

131 
	#F_GETLK
 33

	)

134 #i‡ 
deföed
(
_LARGEFILE64_SOURCE
)

136 #i‡!
deföed
(
_LP64
Ë|| deföed(
_KERNEL
)

143 
	#F_SETLK64
 34

	)

144 
	#F_SETLKW64
 35

	)

145 
	#F_FREESP64
 27

	)

146 
	#F_GETLK64
 33

	)

148 
	#F_SETLK64
 6

	)

149 
	#F_SETLKW64
 7

	)

150 
	#F_FREESP64
 11

	)

151 
	#F_GETLK64
 14

	)

156 
	#F_SHARE
 40

	)

157 
	#F_UNSHARE
 41

	)

164 
	sÊock
 {

165 
l_ty≥
;

166 
l_whí˚
;

167 
off_t
 
l_°¨t
;

168 
off_t
 
l_Àn
;

169 
l_sysid
;

170 
pid_t
 
l_pid
;

171 
l_∑d
[4];

172 } 
	tÊock_t
;

174 #i‡
deföed
(
_SYSCALL32
)

178 
	sÊock32
 {

179 
öt16_t
 
l_ty≥
;

180 
öt16_t
 
l_whí˚
;

181 
off32_t
 
l_°¨t
;

182 
off32_t
 
l_Àn
;

183 
öt32_t
 
l_sysid
;

184 
pid32_t
 
l_pid
;

185 
öt32_t
 
l_∑d
[4];

186 } 
	tÊock32_t
;

192 #i‡ 
deföed
(
_LARGEFILE64_SOURCE
)

194 
	sÊock64
 {

195 
l_ty≥
;

196 
l_whí˚
;

197 
off64_t
 
l_°¨t
;

198 
off64_t
 
l_Àn
;

199 
l_sysid
;

200 
pid_t
 
l_pid
;

201 
l_∑d
[4];

202 } 
	tÊock64_t
;

204 #i‡
deföed
(
_SYSCALL32
)

208 
	sÊock64_32
 {

209 
öt16_t
 
l_ty≥
;

210 
öt16_t
 
l_whí˚
;

211 
off64_t
 
l_°¨t
;

212 
off64_t
 
l_Àn
;

213 
öt32_t
 
l_sysid
;

214 
pid32_t
 
l_pid
;

215 
öt32_t
 
l_∑d
[4];

216 } 
	tÊock64_32_t
;

220 
	sÊock64_64
 {

221 
öt16_t
 
l_ty≥
;

222 
öt16_t
 
l_whí˚
;

223 
off64_t
 
l_°¨t
;

224 
off64_t
 
l_Àn
;

225 
öt32_t
 
l_sysid
;

226 
pid32_t
 
l_pid
;

227 
öt64_t
 
l_∑d
[4];

228 } 
	tÊock64_64_t
;

234 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)

236 
	so_Êock
 {

237 
öt16_t
 
l_ty≥
;

238 
öt16_t
 
l_whí˚
;

239 
öt32_t
 
l_°¨t
;

240 
öt32_t
 
l_Àn
;

241 
öt16_t
 
l_sysid
;

242 
öt16_t
 
l_pid
;

243 } 
	to_Êock_t
;

249 
	#F_RDLCK
 01

	)

250 
	#F_WRLCK
 02

	)

251 
	#F_UNLCK
 03

	)

252 
	#F_UNLKSYS
 04

	)

258 
	#O_ACCMODE
 3

	)

259 
	#FD_CLOEXEC
 1

	)

264 #i‡
deföed
(
__EXTENSIONS__
) || \

265 (!
deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
))

266 
	#DIRECTIO_OFF
 (0)

	)

267 
	#DIRECTIO_ON
 (1)

	)

272 
	sfsh¨e
 {

273 
f_ac˚ss
;

274 
f_díy
;

275 
f_id
;

276 } 
	tfsh¨e_t
;

281 
	#F_RDACC
 0x1

	)

282 
	#F_WRACC
 0x2

	)

283 
	#F_RWACC
 0x3

	)

288 
	#F_NODNY
 0x0

	)

289 
	#F_RDDNY
 0x1

	)

290 
	#F_WRDNY
 0x2

	)

291 
	#F_RWDNY
 0x3

	)

292 
	#F_COMPAT
 0x8

	)

295 #ifdef 
__˝lu•lus


	@/usr/include/sys/feature_tests.h

10 #i‚de‡
_SYS_FEATURE_TESTS_H


11 
	#_SYS_FEATURE_TESTS_H


	)

13 #¥agm®
idít
 "@(#)feature_tests.h 1.18 99/07/26 SMI"

15 
	~<sys/iß_defs.h
>

17 #ifdef 
__˝lu•lus


30 #if 
deföed
(
_POSIX_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
)

31 
	#_POSIX_C_SOURCE
 1

	)

63 #i‡ ((
__STDC__
 - 0 == 0) && \

64 !
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

65 
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
) || \

66 
	$deföed
(
__EXTENSIONS__
)

67 #undef 
_LARGEFILE64_SOURCE


68 
	#_LARGEFILE64_SOURCE
 1

	)

70 #if 
_LARGEFILE64_SOURCE
 - 0 == 1

71 #undef 
_LARGEFILE_SOURCE


72 
	#_LARGEFILE_SOURCE
 1

	)

87 #i‡
	`deföed
(
_LP64
)

88 #i‚de‡
_FILE_OFFSET_BITS


89 
	#_FILE_OFFSET_BITS
 64

	)

91 #if 
_FILE_OFFSET_BITS
 - 0 != 64

95 #i‚def 
_FILE_OFFSET_BITS


96 
	#_FILE_OFFSET_BITS
 32

	)

98 #if 
_FILE_OFFSET_BITS
 - 0 != 32 && _FILE_OFFSET_BITS - 0 != 64

119 #i‡(
	`deföed
(
_XOPEN_SOURCE
Ë&& 
_XOPEN_SOURCE_EXTENDED
 - 0 == 1)

120 
	#_XPG4_2


	)

138 #i‡(
_XOPEN_SOURCE
 - 0 == 500)

139 
	#_XPG5


	)

140 
	#_XPG4_2


	)

141 #undef 
_POSIX_C_SOURCE


142 
	#_POSIX_C_SOURCE
 199506L

	)

143 
	#_POSIX_PTHREAD_SEMANTICS
 1

	)

162 #i‚def 
_XOPEN_VERSION


163 #ifdef 
_XPG5


164 
	#_XOPEN_VERSION
 500

	)

166 #ifdef 
_XPG4_2


167 
	#_XOPEN_VERSION
 4

	)

169 
	#_XOPEN_VERSION
 3

	)

178 
	#_ISO_CPP_14882_1998


	)

180 #ifdef 
__˝lu•lus


181 
	}
}

	@/usr/include/sys/int_types.h

6 #i‚de‡
_SYS_INT_TYPES_H


7 
	#_SYS_INT_TYPES_H


	)

9 #¥agm®
idít
 "@(#)int_types.h 1.6 97/08/20 SMI"

42 
	~<sys/iß_defs.h
>

44 #ifde‡
__˝lu•lus


61 #i‡
deföed
(
_CHAR_IS_SIGNED
)

62 
	töt8_t
;

64 #i‡
deföed
(
__STDC__
)

65 sig√d 
	töt8_t
;

68 
	töt16_t
;

69 
	töt32_t
;

70 #ifdef 
_LP64


71 
	töt64_t
;

73 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

74 
	töt64_t
;

78 
	tuöt8_t
;

79 
	tuöt16_t
;

80 
	tuöt32_t
;

81 #ifdef 
_LP64


82 
	tuöt64_t
;

84 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

85 
	tuöt64_t
;

93 #i‡
deföed
(
_LP64
Ë|| (
__STDC__
 - 0 =0 && !deföed(
_NO_LONGLONG
))

94 
öt64_t
 
	tötmax_t
;

95 
uöt64_t
 
	tuötmax_t
;

97 
öt32_t
 
	tötmax_t
;

98 
uöt32_t
 
	tuötmax_t
;

106 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

107 
	töçå_t
;

108 
	tuöçå_t
;

110 
	töçå_t
;

111 
	tuöçå_t
;

118 #i‡
deföed
(
_CHAR_IS_SIGNED
)

119 
	töt_Àa°8_t
;

121 #i‡
deföed
(
__STDC__
)

122 sig√d 
	töt_Àa°8_t
;

125 
	töt_Àa°16_t
;

126 
	töt_Àa°32_t
;

127 #ifdef 
_LP64


128 
	töt_Àa°64_t
;

130 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

131 
	töt_Àa°64_t
;

135 
	tuöt_Àa°8_t
;

136 
	tuöt_Àa°16_t
;

137 
	tuöt_Àa°32_t
;

138 #ifdef 
_LP64


139 
	tuöt_Àa°64_t
;

141 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

142 
	tuöt_Àa°64_t
;

146 #ifde‡
__˝lu•lus


	@/usr/include/sys/inttypes.h

6 #i‚de‡
_SYS_INTTYPES_H


7 
	#_SYS_INTTYPES_H


	)

9 #¥agm®
idít
 "@(#)inttypes.h 1.2 98/01/16 SMI"

38 
	~<sys/öt_ty≥s.h
>

39 #i‡!
deföed
(
_XOPEN_SOURCE
Ë|| deföed(
__EXTENSIONS__
)

40 
	~<sys/öt_limôs.h
>

41 
	~<sys/öt_c⁄°.h
>

42 
	~<sys/öt_fmtio.h
>

	@/usr/include/sys/isa_defs.h

6 #i‚def 
_SYS_ISA_DEFS_H


7 
	#_SYS_ISA_DEFS_H


	)

9 #¥agm®
idít
 "@(#)isa_defs.h 1.20 99/05/04 SMI"

157 #ifdef 
__˝lu•lus


168 #i‡
deföed
(
__ü64
)

173 
	#_LITTLE_ENDIAN


	)

174 
	#_STACK_GROWS_DOWNWARD


	)

175 
	#_LONG_LONG_LTOH


	)

176 
	#_BIT_FIELDS_LTOH


	)

177 
	#_IEEE_754


	)

178 
	#_CHAR_IS_SIGNED


	)

179 
	#_CHAR_ALIGNMENT
 1

	)

180 
	#_SHORT_ALIGNMENT
 2

	)

181 
	#_INT_ALIGNMENT
 4

	)

182 
	#_LONG_ALIGNMENT
 8

	)

183 
	#_LONG_LONG_ALIGNMENT
 8

	)

184 
	#_DOUBLE_ALIGNMENT
 8

	)

185 
	#_LONG_DOUBLE_ALIGNMENT
 16

	)

186 
	#_POINTER_ALIGNMENT
 8

	)

187 
	#_MAX_ALIGNMENT
 16

	)

188 
	#_ALIGNMENT_REQUIRED
 1

	)

193 
	#_LP64


	)

194 #i‡!
deföed
(
_I32LPx
Ë&& deföed(
_KERNEL
)

195 
	#_I32LPx


	)

197 
	#_MULTI_DATAMODEL


	)

198 
	#_SUNOS_VTOC_16


	)

199 
	#_DMA_USES_PHYSADDR


	)

200 
	#_FIRMWARE_NEEDS_FDISK


	)

201 
	#_CONSOLE_OUTPUT_VIA_SOFTWARE


	)

208 #ñi‡
deföed
(
__i386
Ë|| deföed(
i386
)

213 #i‡!
deföed
(
__i386
)

214 
	#__i386


	)

220 
	#_LITTLE_ENDIAN


	)

221 
	#_STACK_GROWS_DOWNWARD


	)

222 
	#_LONG_LONG_LTOH


	)

223 
	#_BIT_FIELDS_LTOH


	)

224 
	#_IEEE_754


	)

225 
	#_CHAR_IS_SIGNED


	)

226 
	#_CHAR_ALIGNMENT
 1

	)

227 
	#_SHORT_ALIGNMENT
 2

	)

228 
	#_INT_ALIGNMENT
 4

	)

229 
	#_LONG_ALIGNMENT
 4

	)

230 
	#_LONG_LONG_ALIGNMENT
 4

	)

231 
	#_DOUBLE_ALIGNMENT
 4

	)

232 
	#_LONG_DOUBLE_ALIGNMENT
 4

	)

233 
	#_POINTER_ALIGNMENT
 4

	)

234 
	#_MAX_ALIGNMENT
 4

	)

235 
	#_ALIGNMENT_REQUIRED
 0

	)

236 
	#_DONT_USE_1275_GENERIC_NAMES


	)

240 
	#_ILP32


	)

241 #i‡!
deföed
(
_I32LPx
Ë&& deföed(
_KERNEL
)

242 
	#_I32LPx


	)

244 
	#_SUNOS_VTOC_16


	)

245 
	#_DMA_USES_PHYSADDR


	)

246 
	#_FIRMWARE_NEEDS_FDISK


	)

247 
	#_CONSOLE_OUTPUT_VIA_SOFTWARE


	)

267 #ñi‡
deföed
(
__•¨c
Ë|| deföed(
•¨c
)

272 #i‡!
deföed
(
__•¨c
)

273 
	#__•¨c


	)

279 #i‡
deföed
(
__•¨cv8
Ë&& deföed(
__•¨cv9
)

289 #i‡!
deföed
(
__•¨cv9
Ë&& !deföed(
__•¨cv8
)

290 
	#__•¨cv8


	)

297 
	#_BIG_ENDIAN


	)

298 
	#_STACK_GROWS_DOWNWARD


	)

299 
	#_LONG_LONG_HTOL


	)

300 
	#_BIT_FIELDS_HTOL


	)

301 
	#_IEEE_754


	)

302 
	#_CHAR_IS_SIGNED


	)

303 
	#_CHAR_ALIGNMENT
 1

	)

304 
	#_SHORT_ALIGNMENT
 2

	)

305 
	#_INT_ALIGNMENT
 4

	)

306 
	#_LONG_LONG_ALIGNMENT
 8

	)

307 
	#_DOUBLE_ALIGNMENT
 8

	)

308 
	#_ALIGNMENT_REQUIRED
 1

	)

313 
	#_SUNOS_VTOC_8


	)

314 
	#_DMA_USES_VIRTADDR


	)

315 
	#_NO_FDISK_PRESENT


	)

316 
	#_CONSOLE_OUTPUT_VIA_FIRMWARE


	)

322 #i‡
deföed
(
__•¨cv8
)

327 
	#_LONG_ALIGNMENT
 4

	)

328 
	#_LONG_DOUBLE_ALIGNMENT
 8

	)

329 
	#_POINTER_ALIGNMENT
 4

	)

330 
	#_MAX_ALIGNMENT
 8

	)

335 
	#_ILP32


	)

337 #i‡!
deföed
(
_I32LPx
Ë&& deföed(
_KERNEL
)

338 
	#_I32LPx


	)

345 #ñi‡
deföed
(
__•¨cv9
)

350 
	#_LONG_ALIGNMENT
 8

	)

351 
	#_LONG_DOUBLE_ALIGNMENT
 16

	)

352 
	#_POINTER_ALIGNMENT
 8

	)

353 
	#_MAX_ALIGNMENT
 16

	)

358 
	#_LP64


	)

359 #i‡!
deföed
(
_I32LPx
)

360 
	#_I32LPx


	)

362 
	#_MULTI_DATAMODEL


	)

375 #i‡
deföed
(
_ILP32
Ë&& deföed(
_LP64
)

379 #ifdef 
__˝lu•lus


	@/usr/include/sys/machtypes.h

6 #i‚de‡
_SYS_MACHTYPES_H


7 
	#_SYS_MACHTYPES_H


	)

9 #¥agm®
idít
 "@(#)machtypes.h 1.8 99/05/04 SMI"

11 
	~<sys/„©uª_ã°s.h
>

13 #i‡
deföed
(
i386
Ë|| deföed(
__i386
)

15 
	~<ü32/sys/machty≥s.h
>

17 #ñi‡
deföed
(
__ü64
)

19 
	~<ü64/sys/machty≥s.h
>

	@/usr/include/sys/model.h

6 #i‚def 
_SYS_MODEL_H


7 
	#_SYS_MODEL_H


	)

9 #¥agm®
idít
 "@(#)model.h 1.20 97/09/22 SMI"

11 #ifdef 
__˝lu•lus


15 #ifde‡
_KERNEL


16 
	~<sys/debug.h
>

19 
	~<sys/iß_defs.h
>

21 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)

30 
	#DATAMODEL_MASK
 0x0FF00000

	)

32 
	#DATAMODEL_ILP32
 0x00100000

	)

33 
	#DATAMODEL_LP64
 0x00200000

	)

35 
	#DATAMODEL_NONE
 0

	)

37 #if 
deföed
(
_LP64
)

38 
	#DATAMODEL_NATIVE
 
DATAMODEL_LP64


	)

39 #ñif 
deföed
(
_ILP32
)

40 
	#DATAMODEL_NATIVE
 
DATAMODEL_ILP32


	)

47 #i‚de‡
_ASM


54 
	tmodñ_t
;

58 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_ASM
)

64 #i‡
deföed
(
_LP64
)

66 
	#STRUCT_HANDLE
(
°ru˘_ty≥
, 
h™dÀ
) \

67 
__
##handle##_type { \

68 
	u
{ \

69 
°ru˘_ty≥
##32 *
m32
; \

70 
°ru˘_ty≥
 *
m64
; \

71 } 
±r
; \

72 
modñ_t
 
modñ
; \

73 } 
h™dÀ
 = { 
NULL
, 
DATAMODEL_ILP32
 }

	)

75 
	#STRUCT_DECL
(
°ru˘_ty≥
, 
h™dÀ
) \

76 
°ru˘_ty≥
 
__
##handle##_buf; \

77 
	`STRUCT_HANDLE
(
°ru˘_ty≥
, 
h™dÀ
)

	)

79 
	#STRUCT_SET_HANDLE
(
h™dÀ
, 
umodñ
, 
addr
) \

80 (
h™dÀ
).
modñ
 = (
modñ_t
)(
umodñ
Ë& 
DATAMODEL_MASK
; \

81 
	`ASSERT
(((
umodñ
Ë& 
DATAMODEL_MASK
Ë!
DATAMODEL_NONE
); \

82 ((
h™dÀ
).
±r
.
m64
Ë(
addr
)

	)

84 
	#STRUCT_INIT
(
h™dÀ
, 
umodñ
) \

85 
	`STRUCT_SET_HANDLE
(
h™dÀ
, 
umodñ
, &
__
##h™dÀ##_buf)

	)

87 
	#STRUCT_SIZE
(
h™dÀ
) \

88 ((
h™dÀ
).
modñ
 =
DATAMODEL_ILP32
 ? \

89  (*(
h™dÀ
).
±r
.
m32
) : \

90  (*(
h™dÀ
).
±r
.
m64
))

	)

98 
	#STRUCT_FADDR
(
h™dÀ
, 
fõld
) \

99 ((
h™dÀ
).
modñ
 =
DATAMODEL_ILP32
 ? \

100 (*)&(
h™dÀ
).
±r
.
m32
->
fõld
 : \

101 &(
h™dÀ
).
±r
.
m64
->
fõld
)

	)

103 
	#STRUCT_FGET
(
h™dÀ
, 
fõld
) \

104 (((
h™dÀ
).
modñ
 =
DATAMODEL_ILP32
) ? \

105 (
h™dÀ
).
±r
.
m32
->
fõld
 : \

106 (
h™dÀ
).
±r
.
m64
->
fõld
)

	)

108 
	#STRUCT_FGETP
(
h™dÀ
, 
fõld
) \

109 ((
h™dÀ
).
modñ
 =
DATAMODEL_ILP32
 ? \

110 (*)(
h™dÀ
).
±r
.
m32
->
fõld
 : \

111 (
h™dÀ
).
±r
.
m64
->
fõld
)

	)

113 
	#STRUCT_FSET
(
h™dÀ
, 
fõld
, 
vÆ
) \

114 ((
h™dÀ
).
modñ
 =
DATAMODEL_ILP32
 ? \

115 ((
h™dÀ
).
±r
.
m32
->
fõld
 = (
vÆ
)) : \

116 ((
h™dÀ
).
±r
.
m64
->
fõld
 = (
vÆ
)))

	)

118 
	#STRUCT_FSETP
(
h™dÀ
, 
fõld
, 
vÆ
) \

119 ((
h™dÀ
).
modñ
 =
DATAMODEL_ILP32
 ? \

120 (Ë((
h™dÀ
).
±r
.
m32
->
fõld
 = (
ˇddr32_t
)(
vÆ
)) : \

121 (Ë((
h™dÀ
).
±r
.
m64
->
fõld
 = (
vÆ
)))

	)

123 
	#STRUCT_BUF
(
h™dÀ
) ((h™dÀ).
±r
.
m64
)

	)

125 
	#SIZEOF_PTR
(
umodñ
) \

126 (((
umodñ
Ë& 
DATAMODEL_MASK
Ë=
DATAMODEL_ILP32
 ? \

127  (
ˇddr32_t
) : \

128  (
ˇddr_t
))

	)

130 
	#SIZEOF_STRUCT
(
°ru˘_ty≥
, 
umodñ
) \

131 (((
umodñ
Ë& 
DATAMODEL_MASK
Ë=
DATAMODEL_ILP32
 ? \

132  (
°ru˘_ty≥
##32) : \

133  (
°ru˘_ty≥
))

	)

137 
	#STRUCT_HANDLE
(
°ru˘_ty≥
, 
h™dÀ
) \

138 
__
##handle##_32 { \

139 
°ru˘_ty≥
 *
±r
; \

141 
__
##h™dÀ##_32 
h™dÀ
 = { 
NULL
 }

	)

143 
	#STRUCT_DECL
(
°ru˘_ty≥
, 
h™dÀ
) \

144 
°ru˘_ty≥
 
__
##handle##_buf; \

145 
	`STRUCT_HANDLE
(
°ru˘_ty≥
, 
h™dÀ
)

	)

147 #ifdef 
löt


148 
	#STRUCT_SET_HANDLE
(
h™dÀ
, 
umodñ
, 
addr
) \

149 (Ë(
umodñ
); \

150 (
h™dÀ
).
±r
 = (
addr
)

	)

152 
	#STRUCT_SET_HANDLE
(
h™dÀ
, 
umodñ
, 
addr
) \

153 (
h™dÀ
).
±r
 = (
addr
)

	)

156 
	#STRUCT_INIT
(
h™dÀ
, 
umodñ
) \

157 
	`STRUCT_SET_HANDLE
(
h™dÀ
, 
umodñ
, &
__
##h™dÀ##_buf)

	)

159 
	#STRUCT_SIZE
(
h™dÀ
) ( (*(h™dÀ).
±r
))

	)

161 
	#STRUCT_FADDR
(
h™dÀ
, 
fõld
) (&(h™dÀ).
±r
->fõld)

	)

163 
	#STRUCT_FGET
(
h™dÀ
, 
fõld
) ((h™dÀ).
±r
->fõld)

	)

165 
	#STRUCT_FGETP
 
STRUCT_FGET


	)

167 
	#STRUCT_FSET
(
h™dÀ
, 
fõld
, 
vÆ
) ((h™dÀ).
±r
->fõld = (vÆ))

	)

169 
	#STRUCT_FSETP
 
STRUCT_FSET


	)

171 
	#STRUCT_BUF
(
h™dÀ
) ((h™dÀ).
±r
)

	)

173 
	#SIZEOF_PTR
(
umodñ
)  (
ˇddr_t
)

	)

175 
	#SIZEOF_STRUCT
(
°ru˘_ty≥
, 
umodñ
)  (°ru˘_ty≥)

	)

179 #i‡
deföed
(
_LP64
Ë|| deföed(
löt
Ë|| deföed(
__löt
)

181 
_klwp
;

183 
modñ_t
 
lwp_gëd©amodñ
(
_klwp
 *);

184 
modñ_t
 
gë_ud©amodñ
();

194 
	#lwp_gëd©amodñ
(
t
) 
DATAMODEL_ILP32


	)

195 
	#gë_ud©amodñ
() 
DATAMODEL_ILP32


	)

201 #ifdef 
__˝lu•lus


	@/usr/include/sys/mutex.h

6 #i‚de‡
_SYS_MUTEX_H


7 
	#_SYS_MUTEX_H


	)

9 #¥agm®
idít
 "@(#)mutex.h 1.20 98/02/01 SMI"

11 #i‚def 
_ASM


12 
	~<sys/ty≥s.h
>

15 #ifdef 
__˝lu•lus


19 #i‚def 
_ASM


39 
	e
{

40 
MUTEX_ADAPTIVE
 = 0,

41 
MUTEX_SPIN
 = 1,

42 
MUTEX_DRIVER
 = 4,

43 
MUTEX_DEFAULT
 = 6

44 } 
	tkmuãx_ty≥_t
;

46 
	smuãx
 {

47 #ifde‡
_LP64


48 *
	m_›aque
[1];

50 *
	m_›aque
[2];

52 } 
	tkmuãx_t
;

54 #ifde‡
_KERNEL


56 
	#MUTEX_HELD
(
x
) (
	`muãx_ow√d
(x))

	)

57 
	#MUTEX_NOT_HELD
(
x
) (!
	`muãx_ow√d
(xË|| 
∑nic°r
)

	)

59 
muãx_öô
(
kmuãx_t
 *, *, 
kmuãx_ty≥_t
, *);

60 
muãx_de°roy
(
kmuãx_t
 *);

61 
muãx_íãr
(
kmuãx_t
 *);

62 
muãx_åyíãr
(
kmuãx_t
 *);

63 
muãx_exô
(
kmuãx_t
 *);

64 
muãx_ow√d
(
kmuãx_t
 *);

65 
_kthªad
 *
muãx_ow√r
(
kmuãx_t
 *);

71 #ifdef 
__˝lu•lus


	@/usr/include/sys/netconfig.h

8 #i‚def 
_SYS_NETCONFIG_H


9 
	#_SYS_NETCONFIG_H


	)

11 #¥agm®
idít
 "@(#)netconfig.h 1.20 99/04/27 SMI"

13 #ifdef 
__˝lu•lus


17 
	#NETCONFIG
 "/ëc/√tc⁄fig"

	)

18 
	#NETPATH
 "NETPATH"

	)

20 
	s√tc⁄fig
 {

21 *
nc_√tid
;

22 
nc_£m™tics
;

23 
nc_Êag
;

24 *
nc_¥Ÿofmly
;

25 *
nc_¥Ÿo
;

26 *
nc_devi˚
;

27 
nc_∆ookups
;

28 **
nc_lookups
;

29 
nc_unu£d
[8];

32 
	s
{

33 
√tc⁄fig
 **
nc_hód
;

34 
√tc⁄fig
 **
nc_cuº
;

35 } 
	tNCONF_HANDLE
;

41 
	#NC_TPI_CLTS
 1

	)

42 
	#NC_TPI_COTS
 2

	)

43 
	#NC_TPI_COTS_ORD
 3

	)

44 
	#NC_TPI_RAW
 4

	)

50 
	#NC_NOFLAG
 00

	)

51 
	#NC_VISIBLE
 01

	)

52 
	#NC_BROADCAST
 02

	)

58 
	#NC_NOPROTOFMLY
 "-"

	)

59 
	#NC_LOOPBACK
 "lo›back"

	)

60 
	#NC_INET
 "öë"

	)

61 
	#NC_INET6
 "öë6"

	)

62 
	#NC_IMPLINK
 "im∂ök"

	)

63 
	#NC_PUP
 "pup"

	)

64 
	#NC_CHAOS
 "chaos"

	)

65 
	#NC_NS
 "ns"

	)

66 
	#NC_NBS
 "nbs"

	)

67 
	#NC_ECMA
 "ecma"

	)

68 
	#NC_DATAKIT
 "d©akô"

	)

69 
	#NC_CCITT
 "ccôt"

	)

70 
	#NC_SNA
 "¢a"

	)

71 
	#NC_DECNET
 "de˙ë"

	)

72 
	#NC_DLI
 "dli"

	)

73 
	#NC_LAT
 "œt"

	)

74 
	#NC_HYLINK
 "hylök"

	)

75 
	#NC_APPLETALK
 "≠∂ëÆk"

	)

76 
	#NC_NIT
 "nô"

	)

77 
	#NC_IEEE802
 "õì802"

	)

78 
	#NC_OSI
 "osi"

	)

79 
	#NC_X25
 "x25"

	)

80 
	#NC_OSINET
 "osöë"

	)

81 
	#NC_GOSIP
 "gosù"

	)

87 
	#NC_NOPROTO
 "-"

	)

88 
	#NC_TCP
 "t˝"

	)

89 
	#NC_UDP
 "udp"

	)

90 
	#NC_ICMP
 "icmp"

	)

92 #i‡
deföed
(
__STDC__
)

94 *
£äëc⁄fig
();

95 
íd√tc⁄fig
(*);

96 
√tc⁄fig
 *
gë√tc⁄fig
(*);

97 
√tc⁄fig
 *
gë√tc⁄figít
(*);

98 
‰ì√tc⁄figít
(
√tc⁄fig
 *);

99 *
£äë∑th
();

100 
íd√ç©h
(*);

101 
√tc⁄fig
 *
gë√ç©h
(*);

102 
nc_≥º‹
(const *);

103 *
nc_•îr‹
();

107 *
£äëc⁄fig
();

108 
íd√tc⁄fig
();

109 
√tc⁄fig
 *
gë√tc⁄fig
();

110 
√tc⁄fig
 *
gë√tc⁄figít
();

111 
‰ì√tc⁄figít
();

112 *
£äë∑th
();

113 
íd√ç©h
();

114 
√tc⁄fig
 *
gë√ç©h
();

115 
nc_≥º‹
();

116 *
nc_•îr‹
();

120 #ifdef 
__˝lu•lus


	@/usr/include/sys/procset.h

13 #i‚de‡
_SYS_PROCSET_H


14 
	#_SYS_PROCSET_H


	)

16 #¥agm®
idít
 "@(#)procset.h 1.20 00/02/14 SMI"

18 #ifdef 
__˝lu•lus


22 
	~<sys/„©uª_ã°s.h
>

23 
	~<sys/ty≥s.h
>

31 
	#P_INITPID
 1

	)

32 
	#P_INITUID
 0

	)

33 
	#P_INITPGID
 0

	)

42 #i‡!
deföed
(
	t_XPG4_2
Ë|| 
	tdeföed
(
	t__EXTENSIONS__
)

43 
	tidty≥


46 
P_PID
,

47 
P_PPID
,

48 
P_PGID
,

50 
P_SID
,

51 
P_CID
,

52 
P_UID
,

53 
P_GID
,

54 
P_ALL
,

55 
P_LWPID
,

56 
P_TASKID
,

57 
P_PROJID


58 } 
	tidty≥_t
;

66 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

67 
	eid›
 {

68 
POP_DIFF
,

71 
POP_AND
,

74 
POP_OR
,

77 
POP_XOR


80 } 
	tid›_t
;

88 
	s¥oc£t
 {

89 
id›_t
 
p_›
;

94 
idty≥_t
 
p_lidty≥
;

97 
id_t
 
p_lid
;

99 
idty≥_t
 
p_ridty≥
;

102 
id_t
 
p_rid
;

103 } 
	t¥oc£t_t
;

109 
	#£çroc£t
(
p•
, 
›
, 
…y≥
, 
lid
, 
πy≥
, 
rid
) \

110 (
p•
)->
p_›
 = (
›
); \

111 (
p•
)->
p_lidty≥
 = (
…y≥
); \

112 (
p•
)->
p_lid
 = (
lid
); \

113 (
p•
)->
p_ridty≥
 = (
πy≥
); \

114 (
p•
)->
p_rid
 = (
rid
);

	)

118 #ifde‡
_KERNEL


120 
	~<sys/¥oc.h
>

122 
dŸ›rocs
(
¥oc£t_t
 *
p•
, (*
fun˝
)(), *
¨g
);

123 
dŸﬁwp
(
¥oc£t_t
 *
p•
, (*
fun˝
)(), *
¨g
);

124 
¥ocö£t
(
¥oc_t
 *
µ
, 
¥oc£t_t
 *
p•
);

125 
sig£nd¥oc
(
¥oc_t
 *, 
sig£nd_t
 *);

126 
sig£nd£t
(
¥oc£t_t
 *, 
sig£nd_t
 *);

127 
boﬁón_t
 
cur_ö£t_⁄ly
(
¥oc£t_t
 *
p•
);

131 #ifdef 
__˝lu•lus


	@/usr/include/sys/select.h

9 #i‚de‡
_SYS_SELECT_H


10 
	#_SYS_SELECT_H


	)

12 #¥agm®
idít
 "@(#)select.h 1.16 98/04/27 SMI"

14 
	~<sys/„©uª_ã°s.h
>

16 #i‚de‡
_KERNEL


17 
	~<sys/time.h
>

20 #ifdef 
__˝lu•lus


30 #i‚def 
FD_SETSIZE


31 #ifde‡
_LP64


32 
	#FD_SETSIZE
 65536

	)

34 
	#FD_SETSIZE
 1024

	)

36 #ñi‡
FD_SETSIZE
 > 1024 && !
deföed
(
_LP64
)

37 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


38 #¥agma 
ªdeföe_exäame
 
£À˘
 
£À˘_œrge_fd£t


40 
	#£À˘
 
£À˘_œrge_fd£t


	)

44 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

45 
	tfd_mask
;

47 
	tfds_mask
;

53 
	#_NBBY
 8

	)

54 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

55 #i‚de‡
NBBY


56 
	#NBBY
 
_NBBY


	)

60 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

61 
	#NFDBITS
 ( (
fd_mask
Ë* 
NBBY
)

	)

63 
	#FD_NFDBITS
 ( (
fds_mask
Ë* 
_NBBY
)

	)

65 
	#__howm™y
(
__x
, 
__y
) (((__x)+((__y)-1))/(__y))

	)

66 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

67 #i‚def 
howm™y


68 
	#howm™y
(
x
, 
y
) (((x)+((y)-1))/(y))

	)

72 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

73 
	sfd_£t
 {

75 
	s__fd_£t
 {

77 
fds_bôs
[
__howm™y
(
FD_SETSIZE
, 
FD_NFDBITS
)];

78 } 
	tfd_£t
;

80 
	#FD_SET
(
__n
, 
__p
) ((__p)->
fds_bôs
[(__n)/
FD_NFDBITS
] |= \

81 (1u»<< ((
__n
Ë% 
FD_NFDBITS
)))

	)

83 
	#FD_CLR
(
__n
, 
__p
) ((__p)->
fds_bôs
[(__n)/
FD_NFDBITS
] &= \

84 ~(1u»<< ((
__n
Ë% 
FD_NFDBITS
)))

	)

86 
	#FD_ISSET
(
__n
, 
__p
) (((__p)->
fds_bôs
[(__n)/
FD_NFDBITS
] & \

87 (1u»<< ((
__n
Ë% 
FD_NFDBITS
))Ë!0l)

	)

89 #ifde‡
_KERNEL


90 
	#FD_ZERO
(
p
) 
	`bzîo
(’),  (*’)))

	)

92 
	#FD_ZERO
(
__p
) 
	`mem£t
((*)(__p), 0,  (*(__p)))

	)

95 #i‚def 
_KERNEL


96 #ifdef 
__STDC__


97 
£À˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

99 
£À˘
();

103 #ifdef 
__˝lu•lus


	@/usr/include/sys/siginfo.h

13 #i‚de‡
_SYS_SIGINFO_H


14 
	#_SYS_SIGINFO_H


	)

16 #¥agm®
idít
 "@(#)siginfo.h 1.54 98/03/27 SMI"

18 
	~<sys/„©uª_ã°s.h
>

19 
	~<sys/ty≥s.h
>

21 #ifdef 
__˝lu•lus


25 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

26 (
_POSIX_C_SOURCE
 > 2Ë|| 
	$deföed
(
__EXTENSIONS__
)

32 #i‚def 
_SIGVAL


33 
	#_SIGVAL


	)

34 
	usigvÆ
 {

35 
sivÆ_öt
;

36 *
sivÆ_±r
;

40 #i‡
	`deföed
(
_SYSCALL32
)

44 
	usigvÆ32
 {

45 
öt32_t
 
sivÆ_öt
;

46 
ˇddr32_t
 
sivÆ_±r
;

53 
	u__sigvÆ
 {

54 
__sivÆ_öt
;

55 *
__sivÆ_±r
;

60 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

61 (
_POSIX_C_SOURCE
 > 2Ë|| 
	`deföed
(
__EXTENSIONS__
)

67 #i‚def 
_SIGEVENT


68 
	#_SIGEVENT


	)

69 
	ssigevít
 {

70 
sigev_nŸify
;

71 
sigev_signo
;

72 
sigvÆ
 
sigev_vÆue
;

73 (*
sigev_nŸify_fun˘i⁄
)(
sigvÆ
);

74 
±hªad_©å_t
 *
sigev_nŸify_©åibuãs
;

75 
__sigev_∑d2
;

80 
	#SIGEV_NONE
 1

	)

81 
	#SIGEV_SIGNAL
 2

	)

82 
	#SIGEV_THREAD
 3

	)

84 #i‡
	`deföed
(
_SYSCALL32
)

88 
	ssigevít32
 {

89 
öt32_t
 
sigev_nŸify
;

90 
öt32_t
 
sigev_signo
;

91 
sigvÆ32
 
sigev_vÆue
;

92 
ˇddr32_t
 
sigev_nŸify_fun˘i⁄
;

93 
ˇddr32_t
 
sigev_nŸify_©åibuãs
;

94 
öt32_t
 
__sigev_∑d2
;

101 #i‡!
	`deföed
(
_POSIX_C_SOURCE
) || (_POSIX_C_SOURCE > 2) || \

102 
	`deföed
(
__EXTENSIONS__
)

108 
	#SI_FROMUSER
(
sù
) ((sù)->
si_code
 <0)

	)

109 
	#SI_FROMKERNEL
(
sù
) ((sù)->
si_code
 > 0)

	)

111 
	#SI_NOINFO
 32767

	)

112 
	#SI_USER
 0

	)

113 
	#SI_LWP
 (-1)

	)

114 
	#SI_QUEUE
 (-2)

	)

115 
	#SI_TIMER
 (-3)

	)

116 
	#SI_ASYNCIO
 (-4)

	)

117 
	#SI_MESGQ
 (-5)

	)

120 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

126 
	~<sys/machsig.h
>

132 
	#TRAP_BRKPT
 1

	)

133 
	#TRAP_TRACE
 2

	)

134 
	#TRAP_RWATCH
 3

	)

135 
	#TRAP_WWATCH
 4

	)

136 
	#TRAP_XWATCH
 5

	)

137 #i‡!
	`deföed
(
_XOPEN_SOURCE
Ë|| deföed(
__EXTENSIONS__
)

138 
	#NSIGTRAP
 5

	)

145 
	#CLD_EXITED
 1

	)

146 
	#CLD_KILLED
 2

	)

147 
	#CLD_DUMPED
 3

	)

148 
	#CLD_TRAPPED
 4

	)

149 
	#CLD_STOPPED
 5

	)

150 
	#CLD_CONTINUED
 6

	)

152 #i‡!
	`deföed
(
_XOPEN_SOURCE
Ë|| deföed(
__EXTENSIONS__
)

153 
	#NSIGCLD
 6

	)

160 
	#POLL_IN
 1

	)

161 
	#POLL_OUT
 2

	)

162 
	#POLL_MSG
 3

	)

163 
	#POLL_ERR
 4

	)

164 
	#POLL_PRI
 5

	)

165 
	#POLL_HUP
 6

	)

167 #i‡!
	`deföed
(
_XOPEN_SOURCE
Ë|| deföed(
__EXTENSIONS__
)

168 
	#NSIGPOLL
 6

	)

173 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

174 
	`deföed
(
__EXTENSIONS__
)

179 
	#PROF_SIG
 1

	)

180 
	#NSIGPROF
 1

	)

184 #i‡!
	`deföed
(
_POSIX_C_SOURCE
) || (_POSIX_C_SOURCE > 2) || \

185 
	`deföed
(
__EXTENSIONS__
)

187 #ifde‡
_LP64


188 
	#SI_MAXSZ
 256

	)

189 
	#SI_PAD
 ((
SI_MAXSZ
 /  ()Ë- 4)

	)

191 
	#SI_MAXSZ
 128

	)

192 
	#SI_PAD
 ((
SI_MAXSZ
 /  ()Ë- 3)

	)

204 #i‡!
	`deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
) || \

205 
	`deföed
(
__EXTENSIONS__
)

206 
	~<sys/time_im∂.h
>

208 
	~<sys/time_°d_im∂.h
>

217 
	~<sys/ty≥s.h
>

219 #i‡!
	`deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
) || \

220 
	`deföed
(
__EXTENSIONS__
)

221 
	ssigöfo
 {

223 
	s
{

225 
si_signo
;

226 
si_code
;

227 
si_î∫o
;

228 #ifde‡
_LP64


229 
si_∑d
;

231 
	u
{

233 
__∑d
[
SI_PAD
];

235 
	s
{

236 
pid_t
 
__pid
;

237 
	u
{

238 
	s
{

239 
uid_t
 
__uid
;

240 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

241 (
_POSIX_C_SOURCE
 > 2Ë|| 
	`deföed
(
__EXTENSIONS__
)

242 
sigvÆ
 
__vÆue
;

244 
__sigvÆ
 
__vÆue
;

246 } 
__kûl
;

247 
	s
{

248 
˛ock_t
 
__utime
;

249 
__°©us
;

250 
˛ock_t
 
__°ime
;

251 } 
__˛d
;

252 } 
__pd©a
;

253 } 
__¥oc
;

255 
	s
{

256 *
__addr
;

257 
__å≠no
;

258 
ˇddr_t
 
__pc
;

259 } 
__Áu…
;

261 
	s
{

263 
__fd
;

264 
__b™d
;

265 } 
__fûe
;

267 
	s
{

268 
ˇddr_t
 
__Áddr
;

269 #i‡!
	`deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
) || \

270 
	`deföed
(
__EXTENSIONS__
)

271 
time°ruc_t
 
__t°amp
;

273 
_time°ruc_t
 
__t°amp
;

275 
__sysˇŒ
;

276 
__nsyßrg
;

277 
__Áu…
;

278 
__syßrg
[8];

279 
__m°©e
[10];

280 } 
__¥of
;

282 } 
__d©a
;

284 } 
	tsigöfo_t
;

286 #i‡
	`deföed
(
_SYSCALL32
)

290 
	#SI32_MAXSZ
 128

	)

291 
	#SI32_PAD
 ((
SI32_MAXSZ
 /  (
öt32_t
)Ë- 3)

	)

293 
	ssigöfo32
 {

295 
öt32_t
 
si_signo
;

296 
öt32_t
 
si_code
;

297 
öt32_t
 
si_î∫o
;

299 
	u
{

301 
öt32_t
 
__∑d
[
SI32_PAD
];

303 
	s
{

304 
pid32_t
 
__pid
;

305 
	u
{

306 
	s
{

307 
uid32_t
 
__uid
;

308 
sigvÆ32
 
__vÆue
;

309 } 
__kûl
;

310 
	s
{

311 
˛ock32_t
 
__utime
;

312 
öt32_t
 
__°©us
;

313 
˛ock32_t
 
__°ime
;

314 } 
__˛d
;

315 } 
__pd©a
;

316 } 
__¥oc
;

318 
	s
{

319 
ˇddr32_t
 
__addr
;

320 
öt32_t
 
__å≠no
;

321 
ˇddr32_t
 
__pc
;

322 } 
__Áu…
;

324 
	s
{

326 
öt32_t
 
__fd
;

327 
öt32_t
 
__b™d
;

328 } 
__fûe
;

330 
	s
{

331 
ˇddr32_t
 
__Áddr
;

332 
time°ruc32_t
 
__t°amp
;

333 
öt16_t
 
__sysˇŒ
;

334 
öt8_t
 
__nsyßrg
;

335 
öt8_t
 
__Áu…
;

336 
öt32_t
 
__syßrg
[8];

337 
öt32_t
 
__m°©e
[10];

338 } 
__¥of
;

340 } 
__d©a
;

342 } 
	tsigöfo32_t
;

351 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
) || \

352 
	`deföed
(
__EXTENSIONS__
)

354 
	sk_sigöfo
 {

355 
si_signo
;

356 
si_code
;

357 
si_î∫o
;

358 #ifde‡
_LP64


359 
si_∑d
;

361 
	u
{

362 
	s
{

363 
pid_t
 
__pid
;

364 
	u
{

365 
	s
{

366 
uid_t
 
__uid
;

367 
sigvÆ
 
__vÆue
;

368 } 
__kûl
;

369 
	s
{

370 
˛ock_t
 
__utime
;

371 
__°©us
;

372 
˛ock_t
 
__°ime
;

373 } 
__˛d
;

374 } 
__pd©a
;

375 } 
__¥oc
;

377 
	s
{

378 *
__addr
;

379 
__å≠no
;

380 
ˇddr_t
 
__pc
;

381 } 
__Áu…
;

383 
	s
{

385 
__fd
;

386 
__b™d
;

387 } 
__fûe
;

389 
	s
{

390 
ˇddr_t
 
__Áddr
;

392 #i‡!
	`deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
) || \

393 
	`deföed
(
__EXTENSIONS__
)

394 
time°ruc_t
 
__t°amp
;

396 
_time°ruc_t
 
__t°amp
;

398 
__sysˇŒ
;

399 
__nsyßrg
;

400 
__Áu…
;

404 } 
__¥of
;

406 } 
__d©a
;

408 } 
	tk_sigöfo_t
;

410 
	ssigqueue
 {

411 
sigqueue
 *
sq_√xt
;

412 
k_sigöfo_t
 
sq_öfo
;

413 (*
sq_func
)(
sigqueue
 *);

414 *
sq_back±r
;

416 } 
	tsigqueue_t
;

419 
	#SI_CANQUEUE
(
c
) ((cË<
SI_QUEUE
)

	)

423 
	#si_pid
 
__d©a
.
__¥oc
.
__pid


	)

424 
	#si_°©us
 
__d©a
.
__¥oc
.
__pd©a
.
__˛d
.
__°©us


	)

425 
	#si_°ime
 
__d©a
.
__¥oc
.
__pd©a
.
__˛d
.
__°ime


	)

426 
	#si_utime
 
__d©a
.
__¥oc
.
__pd©a
.
__˛d
.
__utime


	)

427 
	#si_uid
 
__d©a
.
__¥oc
.
__pd©a
.
__kûl
.
__uid


	)

428 
	#si_vÆue
 
__d©a
.
__¥oc
.
__pd©a
.
__kûl
.
__vÆue


	)

429 
	#si_addr
 
__d©a
.
__Áu…
.
__addr


	)

430 
	#si_å≠no
 
__d©a
.
__Áu…
.
__å≠no


	)

431 
	#si_å≠a·î
 
__d©a
.
__Áu…
.
__å≠no


	)

432 
	#si_pc
 
__d©a
.
__Áu…
.
__pc


	)

433 
	#si_fd
 
__d©a
.
__fûe
.
__fd


	)

434 
	#si_b™d
 
__d©a
.
__fûe
.
__b™d


	)

435 
	#si_t°amp
 
__d©a
.
__¥of
.
__t°amp


	)

436 
	#si_sysˇŒ
 
__d©a
.
__¥of
.
__sysˇŒ


	)

437 
	#si_nsyßrg
 
__d©a
.
__¥of
.
__nsyßrg


	)

438 
	#si_syßrg
 
__d©a
.
__¥of
.
__syßrg


	)

439 
	#si_Áu…
 
__d©a
.
__¥of
.
__Áu…


	)

440 
	#si_Áddr
 
__d©a
.
__¥of
.
__Áddr


	)

441 
	#si_m°©e
 
__d©a
.
__¥of
.
__m°©e


	)

446 #i‡
	`deföed
(
_SYSCALL32_IMPL
)

448 
	`sigöfo_kto32
(c⁄° 
k_sigöfo_t
 *, 
sigöfo32_t
 *);

449 
	`sigöfo_32tok
(c⁄° 
sigöfo32_t
 *, 
k_sigöfo_t
 *);

453 #ifdef 
__˝lu•lus


454 
	}
}

	@/usr/include/sys/signal.h

13 #i‚de‡
_SYS_SIGNAL_H


14 
	#_SYS_SIGNAL_H


	)

16 #¥agm®
idít
 "@(#)signal.h 1.54 99/07/26 SMI"

18 
	~<sys/„©uª_ã°s.h
>

19 
	~<sys/iso/sig«l_iso.h
>

21 #ifdef 
__˝lu•lus


25 #i‡
deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 - 0 == 0) || \

26 
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
) || \

27 
	$deföed
(
_XPG4_2
)

29 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0) && \

30 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

31 (
_POSIX_C_SOURCE
 > 2Ë|| 
	$deföed
(
_XPG4_2
)

35 
	~<sys/sigöfo.h
>

40 #i‚def 
_SIGSET_T


41 
	#_SIGSET_T


	)

42 
	s
{

43 
__sigbôs
[4];

44 } 
	tsig£t_t
;

46 #i‡
	`deföed
(
_SYSCALL32
)

50 
	s
{

51 
uöt32_t
 
__sigbôs
[4];

52 } 
	tsig£t32_t
;

58 
	s
{

59 
__sigbôs
[2];

60 } 
	tk_sig£t_t
;

76 
	ssiga˘i⁄
 {

77 
ß_Êags
;

78 
	u
{

79 #ifdef 
__˝lu•lus


80 (*
_h™dÀr
)();

82 (*
_h™dÀr
)();

84 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0) && \

85 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

86 (
_POSIX_C_SOURCE
 > 2Ë|| 
	`deföed
(
_XPG4_2
)

87 (*
_siga˘i⁄
)(, 
sigöfo_t
 *, *);

89 } 
_fun˝å
;

90 
sig£t_t
 
ß_mask
;

91 #i‚de‡
_LP64


92 
ß_ªsv
[2];

95 
	#ß_h™dÀr
 
_fun˝å
.
_h™dÀr


	)

96 
	#ß_siga˘i⁄
 
_fun˝å
.
_siga˘i⁄


	)

98 #i‡
	`deföed
(
_SYSCALL32
)

102 
	ssiga˘i⁄32
 {

103 
öt32_t
 
ß_Êags
;

104 
	u
{

105 
ˇddr32_t
 
_h™dÀr
;

106 
ˇddr32_t
 
_siga˘i⁄
;

107 } 
_fun˝å
;

108 
sig£t32_t
 
ß_mask
;

109 
öt32_t
 
ß_ªsv
[2];

115 
	#SA_NOCLDSTOP
 0x00020000

	)

118 #i‡
	`deföed
(
__EXTENSIONS__
) || \

119 ((
__STDC__
 - 0 =0Ë&& !
	`deföed
(
_POSIX_C_SOURCE
)) || \

120 
	$deföed
(
_XPG4_2
)

125 
	#SA_ONSTACK
 0x00000001

	)

126 
	#SA_RESETHAND
 0x00000002

	)

127 
	#SA_RESTART
 0x00000004

	)

130 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0) && \

131 !
	`deföed
(
_POSIX_C_SOURCE
)) || (_POSIX_C_SOURCE > 2) || \

132 
	$deföed
(
_XPG4_2
)

133 
	#SA_SIGINFO
 0x00000008

	)

136 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0) && \

137 !
	`deföed
(
_POSIX_C_SOURCE
)Ë|| 
	$deföed
(
_XPG4_2
)

138 
	#SA_NODEFER
 0x00000010

	)

141 
	#SA_NOCLDWAIT
 0x00010000

	)

144 
	#SA_WAITSIG
 0x00010000

	)

146 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| !deföed(
_XPG4_2
)

151 
	#NSIG
 46

	)

152 
	#MAXSIG
 45

	)

157 
	#S_SIGNAL
 1

	)

158 
	#S_SIGSET
 2

	)

159 
	#S_SIGACTION
 3

	)

160 
	#S_NONE
 4

	)

163 
	#MINSIGSTKSZ
 2048

	)

164 
	#SIGSTKSZ
 8192

	)

166 
	#SS_ONSTACK
 0x00000001

	)

167 
	#SS_DISABLE
 0x00000002

	)

170 #i‚def 
_STACK_T


171 
	#_STACK_T


	)

172 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| !deföed(
_XPG4_2
)

173 
	ssigÆt°ack
 {

175 
	s
{

177 *
ss_•
;

178 
size_t
 
ss_size
;

179 
ss_Êags
;

180 } 
	t°ack_t
;

182 #i‡
	`deföed
(
_SYSCALL32
)

186 
	ssigÆt°ack32
 {

187 
ˇddr32_t
 
ss_•
;

188 
size32_t
 
ss_size
;

189 
öt32_t
 
ss_Êags
;

190 } 
	t°ack32_t
;

198 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0) && \

199 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !
	$deföed
(
_XOPEN_SOURCE
))

202 
	ssignŸify_id
 {

203 
pid_t
 
¢_pid
;

204 
¢_ödex
;

205 
¢_∑d
;

206 } 
	tsignŸify_id_t
;

208 #i‡
	`deföed
(
_SYSCALL32
)

212 
	ssignŸify32_id
 {

213 
pid32_t
 
¢_pid
;

214 
öt32_t
 
¢_ödex
;

215 
öt32_t
 
¢_∑d
;

216 } 
	tsignŸify32_id_t
;

222 
	#SN_PROC
 1

	)

223 
	#SN_CANCEL
 2

	)

224 
	#SN_SEND
 3

	)

229 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 == 0 && \

230 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

231 
	$deföed
(
_XPG4_2
)

232 
	ssig°ack
 {

233 *
ss_•
;

234 
ss_⁄°ack
;

242 #i‡
	`deföed
(
_XPG4_2
)

243 
	~<sys/uc⁄ãxt.h
>

246 #ifde‡
_KERNEL


247 
	~<sys/t_lock.h
>

249 
k_sig£t_t


251 
nuŒsmask
,

252 
fûl£t
,

253 
hﬁdvf‹k
,

254 
ˇ¡mask
,

255 
ˇ¡ª£t
,

256 
ign‹edeÁu…
,

257 
°›deÁu…
,

258 
c‹edeÁu…
;

260 
	#sigmask
(
n
) (()1 << ((“Ë- 1Ë& (32 - 1)))

	)

261 
	#sigw‹d
(
n
) ((()(“Ë- 1))>>5)

	)

263 
	#sigem±y£t
(
s
) (*(sË
nuŒsmask
)

	)

264 
	#sigfûl£t
(
s
) (*(sË
fûl£t
)

	)

265 
	#sigadd£t
(
s
, 
n
) ((s)->
__sigbôs
[
	`sigw‹d
“)] |
	`sigmask
“))

	)

266 
	#sigdñ£t
(
s
, 
n
) ((s)->
__sigbôs
[
	`sigw‹d
“)] &~
	`sigmask
“))

	)

267 
	#sigismembî
(
s
, 
n
) (
	`sigmask
“Ë& (s)->
__sigbôs
[
	`sigw‹d
“)])

	)

268 
	#sigi£m±y
(
s
) (!(((s)->
__sigbôs
[0]Ë| ((s)->__sigbôs[1])))

	)

269 
	#sigutok
(
us
, 
ks
) ((ks)->
__sigbôs
[0] = (us)->__sigbits[0], \

270 (
ks
)->
__sigbôs
[1] = (
us
)->__sigbôs[1])

	)

271 
	#sigktou
(
ks
, 
us
) ((us)->
__sigbôs
[0] = (ks)->__sigbits[0], \

272 (
us
)->
__sigbôs
[1] = (
ks
)->__sigbits[1], \

273 (
us
)->
__sigbôs
[2] = 0, \

274 (
us
)->
__sigbôs
[3] = 0)

	)

275 
	s
{

276 
sig
;

277 
≥rm
;

278 
check≥rm
;

279 
sicode
;

280 
sigvÆ
 
vÆue
;

281 } 
	tsig£nd_t
;

283 
	s
{

284 
sigqueue_t
 
¢_sigq
;

285 
u_l⁄gl⁄g_t
 
¢_¢id
;

286 } 
	tsignŸifyq_t
;

289 
	ssigqhdr
 {

290 
sigqueue_t
 *
sqb_‰ì
;

291 
uch¨_t
 
sqb_cou¡
;

292 
uch¨_t
 
sqb_maxcou¡
;

293 
ush‹t_t
 
sqb_size
;

294 
uch¨_t
 
sqb_≥xôed
;

295 
kmuãx_t
 
sqb_lock
;

296 } 
	tsigqhdr_t
;

298 
	#_SIGQUEUE_MAX
 32

	)

299 
	#_SIGNOTIFY_MAX
 32

	)

301 
	`£tsiga˘
(, (*)(), 
k_sig£t_t
, );

302 
	`sig‹£t
(
k_sig£t_t
 *, k_sigset_t *);

303 
	`sig™d£t
(
k_sig£t_t
 *, k_sigset_t *);

304 
	`sigdiff£t
(
k_sig£t_t
 *, k_sigset_t *);

305 
	`sigöå
(
k_sig£t_t
 *, );

306 
	`sigunöå
(
k_sig£t_t
 *);

307 
	`sigª∂a˚
(
k_sig£t_t
 *, k_sigset_t *);

311 #ifdef 
__˝lu•lus


312 
	}
}

	@/usr/include/sys/stat_impl.h

6 #i‚de‡
_SYS_STAT_IMPL_H


7 
	#_SYS_STAT_IMPL_H


	)

9 #¥agm®
idít
 "@(#)stat_impl.h 1.1 99/05/04 SMI"

11 
	~<sys/„©uª_ã°s.h
>

12 
	~<sys/ty≥s.h
>

14 #ifdef 
__˝lu•lus


18 #i‡!
deföed
(
_KERNEL
)

20 #i‡
deföed
(
i386
Ë|| deföed(
__i386
)

32 #i‡
deföed
(
__STDC__
)

34 #i‡
_FILE_OFFSET_BITS
 =32 && !
deföed
(
_LP64
) && \

35 !
deföed
(
löt
Ë&& !
	$deföed
(
__löt
)

36 
	`f°©
(, 
°©
 *);

37 
	`°©
(c⁄° *, 
°©
 *);

38 
	`_fx°©
(c⁄° , , 
°©
 *);

39 
	`_x°©
(c⁄° , c⁄° *, 
°©
 *);

41 
	`f°©
(, 
°©
 *);

42 
	`°©
(c⁄° *, 
°©
 *);

45 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

46 
	`deföed
(
_XPG4_2
Ë|| 
	$deföed
(
__EXTENSIONS__
)

47 #i‡
_FILE_OFFSET_BITS
 =32 && !
	`deföed
(
_LP64
) && \

48 !
	`deföed
(
löt
Ë&& !
	$deföed
(
__löt
)

49 
	`l°©
(c⁄° *, 
°©
 *);

51 
	`l°©
(c⁄° *, 
°©
 *);

53 #i‡!
	`deföed
(
_LP64
Ë&& !deföed(
löt
Ë&& !deföed(
__löt
)

54 
	`mknod
(c⁄° *, 
mode_t
, 
dev_t
);

56 
	`mknod
(c⁄° *, 
mode_t
, 
dev_t
);

60 #i‡!
	`deföed
(
_LP64
Ë&& (!deföed(
_POSIX_C_SOURCE
) && \

61 !
	`deföed
(
_XOPEN_SOURCE
Ë|| 
	$deföed
(
__EXTENSIONS__
))

62 #i‡
_FILE_OFFSET_BITS
 == 32

63 
	`_lx°©
(c⁄° , c⁄° *, 
°©
 *);

65 
	`_xmknod
(c⁄° , c⁄° *, 
mode_t
, 
dev_t
);

71 #i‡
_FILE_OFFSET_BITS
 =32 && !
	`deföed
(
_LP64
) && \

72 !
	`deföed
(
löt
Ë&& !
	$deföed
(
__löt
)

73 
	`f°©
(), 
	`°©
();

74 
	`_fx°©
(), 
	`_x°©
();

76 
	`f°©
(), 
	`°©
();

78 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
) || \

79 
	`deföed
(
_XPG4_2
Ë|| 
	$deföed
(
__EXTENSIONS__
)

80 #i‡
_FILE_OFFSET_BITS
 =32 && !
	`deföed
(
_LP64
) && \

81 !
	`deföed
(
löt
Ë&& !
	$deföed
(
__löt
)

82 
	`l°©
();

84 
	`l°©
();

86 #i‡!
	`deföed
(
_LP64
Ë&& !deföed(
löt
Ë&& !deföed(
__löt
)

87 
	`mknod
();

89 
	`mknod
();

93 #i‡!
	`deföed
(
_LP64
Ë&& (!deföed(
_POSIX_C_SOURCE
) && \

94 !
	`deföed
(
_XOPEN_SOURCE
Ë|| 
	$deföed
(
__EXTENSIONS__
))

95 #i‡
_FILE_OFFSET_BITS
 == 32

96 
	`_lx°©
();

98 
	`_xmknod
();

108 #i‡
_FILE_OFFSET_BITS
 =32 && !
	`deföed
(
_LP64
) && \

109 !
	`deföed
(
löt
Ë&& !
	$deföed
(
__löt
)

112 #ifde‡
__STDC__


113 
	$°©
(c⁄° *
_∑th
, 
°©
 *
_buf
)

115 
	$°©
(
_∑th
, 
_buf
)

116 *
_∑th
;

117 
°©
 *
_buf
;

120  (
	`_x°©
(
_STAT_VER
, 
_∑th
, 
_buf
));

121 
	}
}

123 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

124 
deföed
(
_XPG4_2
Ë|| 
	$deföed
(
__EXTENSIONS__
)

126 #ifde‡
__STDC__


127 
	$l°©
(c⁄° *
_∑th
, 
°©
 *
_buf
)

129 
	$l°©
(
_∑th
, 
_buf
)

130 *
_∑th
;

131 
°©
 *
_buf
;

134  (
	`_lx°©
(
_STAT_VER
, 
_∑th
, 
_buf
));

135 
	}
}

139 #ifde‡
__STDC__


140 
	$f°©
(
_fd
, 
°©
 *
_buf
)

142 
	$f°©
(
_fd
, 
_buf
)

143 
_fd
;

144 
°©
 *
_buf
;

147  (
	`_fx°©
(
_STAT_VER
, 
_fd
, 
_buf
));

148 
	}
}

152 #i‡!
deföed
(
_LP64
Ë&& !deföed(
löt
Ë&& !deföed(
__löt
) && \

153 (!
deföed
(
_POSIX_C_SOURCE
) && \

154 !
deföed
(
_XOPEN_SOURCE
Ë|| deföed(
_XPG4_2
Ë|| 
	$deföed
(
__EXTENSIONS__
))

156 #ifde‡
__STDC__


157 
	$mknod
(c⁄° *
_∑th
, 
mode_t
 
_mode
, 
dev_t
 
_dev
)

159 
	$mknod
(
_∑th
, 
_mode
, 
_dev
)

160 *
_∑th
;

161 
mode_t
 
_mode
;

162 
dev_t
 
_dev
;

165  (
	`_xmknod
(
_MKNOD_VER
, 
_∑th
, 
_mode
, 
_dev
));

166 
	}
}

171 #i‡
deföed
(
__STDC__
)

173 
f°©
(, 
°©
 *);

174 
°©
(const *, stat *);

176 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

177 
deföed
(
_XPG4_2
Ë|| 
	$deföed
(
__EXTENSIONS__
)

178 
	`l°©
(c⁄° *, 
°©
 *);

179 
	`mknod
(c⁄° *, 
mode_t
, 
dev_t
);

184 
	`f°©
(), 
	`°©
();

186 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

187 
	`deföed
(
_XPG4_2
Ë|| 
	$deföed
(
__EXTENSIONS__
)

188 
	`l°©
(), 
	`mknod
();

197 #ifdef 
__˝lu•lus


198 
	}
}

	@/usr/include/sys/stream.h

13 #i‚de‡
_SYS_STREAM_H


14 
	#_SYS_STREAM_H


	)

16 #¥agm®
idít
 "@(#)stream.h 1.85 99/12/15 SMI"

21 
	~<sys/iß_defs.h
>

22 
	~<sys/vnode.h
>

23 
	~<sys/pﬁl.h
>

24 
	~<sys/°rmdï.h
>

25 
	~<sys/¸ed.h
>

26 
	~<sys/t_lock.h
>

27 
	~<sys/modñ.h
>

28 
	~<sys/°r·.h
>

30 #ifdef 
__˝lu•lus


67 
	squeue
 {

68 
qöô
 *
q_qöfo
;

69 
msgb
 *
q_fú°
;

70 
msgb
 *
q_œ°
;

71 
queue
 *
q_√xt
;

72 
queue
 *
q_lök
;

73 *
q_±r
;

74 
size_t
 
q_cou¡
;

75 
uöt_t
 
q_Êag
;

76 
ssize_t
 
q_möpsz
;

78 
ssize_t
 
q_maxpsz
;

80 
size_t
 
q_hiw©
;

81 
size_t
 
q_low©
;

82 
qb™d
 *
q_b™dp
;

83 
kmuãx_t
 
q_lock
;

84 
°d©a
 *
q_°ªam
;

85 
syncq
 *
q_syncq
;

86 
q_nb™d
;

87 
kc⁄dv¨_t
 
q_waô
;

88 
kc⁄dv¨_t
 
q_sync
;

89 
queue
 *
q_nf§v
;

90 
queue
 *
q_nb§v
;

91 
ush‹t_t
 
q_døöög
;

92 
q_°ruiŸ
;

93 
uöt_t
 
q_syncqmsgs
;

94 
size_t
 
q_mblk˙t
;

103 
msgb
 *
q_sqhód
;

104 
msgb
 *
q_sqèû
;

105 
uöt_t
 
q_sqÊags
;

106 
size_t
 
q_ªf˙t
;

112 
queue
 *
q_sq√xt
;

113 
queue
 *
q_sq¥ev
;

114 
¥i_t
 
q_•ri
;

115 } 
	tqueue_t
;

120 
	#QENAB
 0x00000001

	)

121 
	#QWANTR
 0x00000002

	)

122 
	#QWANTW
 0x00000004

	)

123 
	#QFULL
 0x00000008

	)

124 
	#QREADR
 0x00000010

	)

125 
	#QUSE
 0x00000020

	)

126 
	#QNOENB
 0x00000040

	)

128 
	#QBACK
 0x00000100

	)

129 
	#QHLIST
 0x00000200

	)

131 
	#QPAIR
 0x00000800

	)

132 
	#QPERQ
 0x00001000

	)

133 
	#QPERMOD
 0x00002000

	)

134 
	#QMTSAFE
 0x00004000

	)

135 
	#QMTOUTPERIM
 0x00008000

	)

136 
	#QMT_TYPEMASK
 (
QPAIR
|
QPERQ
|
QPERMOD
|
QMTSAFE
|
QMTOUTPERIM
)

	)

138 
	#QINSERVICE
 0x00010000

	)

139 
	#QWCLOSE
 0x00020000

	)

140 
	#QEND
 0x00040000

	)

141 
	#QWANTWSYNC
 0x00080000

	)

142 
	#QSYNCSTR
 0x00100000

	)

143 
	#QISDRV
 0x00200000

	)

144 
	#QHOT
 0x00400000

	)

145 
	#QNEXTHOT
 0x00800000

	)

146 
	#_QINSERTING
 0x04000000

	)

147 
	#_QREMOVING
 0x08000000

	)

150 
	#Q_SQQUEUED
 0x01

	)

151 
	#Q_SQDRAINING
 0x02

	)

160 
	sqb™d
 {

161 
qb™d
 *
qb_√xt
;

162 
size_t
 
qb_cou¡
;

163 
msgb
 *
qb_fú°
;

164 
msgb
 *
qb_œ°
;

165 
size_t
 
qb_hiw©
;

166 
size_t
 
qb_low©
;

167 
uöt_t
 
qb_Êag
;

168 
size_t
 
qb_mblk˙t
;

169 } 
	tqb™d_t
;

174 
	#QB_FULL
 0x01

	)

175 
	#QB_WANTW
 0x02

	)

176 
	#QB_BACK
 0x04

	)

181 
	#NBAND
 256

	)

186 
	eqfõlds
 {

187 
QHIWAT
 = 0,

188 
QLOWAT
 = 1,

189 
QMAXPSZ
 = 2,

190 
QMINPSZ
 = 3,

191 
QCOUNT
 = 4,

192 
QFIRST
 = 5,

193 
QLAST
 = 6,

194 
QFLAG
 = 7,

195 
QSTRUIOT
 = 8,

196 
QBAD
 = 9

197 } 
	tqfõlds_t
;

202 
	smoduÀ_öfo
 {

203 
ush‹t_t
 
mi_idnum
;

204 *
mi_id«me
;

205 
ssize_t
 
mi_möpsz
;

206 
ssize_t
 
mi_maxpsz
;

207 
size_t
 
mi_hiw©
;

208 
size_t
 
mi_low©
;

214 
	sqöô
 {

215 (*
qi_puç
)();

216 (*
qi_§vp
)();

217 (*
qi_q›í
)();

218 (*
qi_q˛o£
)();

219 (*
qi_qadmö
)();

220 
moduÀ_öfo
 *
qi_möfo
;

221 
moduÀ_°©
 *
qi_m°©
;

222 (*
qi_rwp
)();

223 (*
qi_öf›
)();

224 
qi_°ruiŸ
;

230 
	#STRUIOT_NONE
 -1

	)

231 
	#STRUIOT_DONTCARE
 0

	)

232 
	#STRUIOT_STANDARD
 1

	)

233 
	#STRUIOT_IP
 2

	)

239 
	s°ªamèb
 {

240 
qöô
 *
°_rdöô
;

241 
qöô
 *
°_wröô
;

242 
qöô
 *
°_muxröô
;

243 
qöô
 *
°_muxwöô
;

250 
	slökblk
 {

251 
queue_t
 *
l_qt›
;

253 
queue_t
 *
l_qbŸ
;

254 
l_ödex
;

260 
	s‰ì_πn
 {

261 (*
‰ì_func
)();

262 
ˇddr_t
 
‰ì_¨g
;

263 } 
	t‰ä_t
;

272 
	#DBLK_REFMAX
 255U

	)

274 
	sd©ab
 {

275 
‰ä_t
 *
db_‰äp
;

276 *
db_ba£
;

277 *
db_lim
;

278 
db_ªf
;

279 
db_ty≥
;

280 
db_Êags
;

281 
db_°ruioÊag
;

282 *
db_ˇche
;

283 
msgb
 *
db_mblk
;

284 (*
db_‰ì
)(
msgb
 *, 
d©ab
 *);

285 (*
db_œ°‰ì
)(
msgb
 *, 
d©ab
 *);

286 #i‚de‡
_LP64


287 *
db_∑d
;

289 *
db_°ruioba£
;

290 *
db_°ruiﬁim
;

291 *
db_°rui›å
;

292 
	u
{

293 
íf‹˚_Æignmít
;

294 
d©a
[8];

295 
u16
:16;

299 } 
db_°ruioun
;

300 
·hdr_t
 *
db_·hdr
;

301 
·Êw_t
 ***
db_·Êw
;

302 
uid_t
 
db_uid
;

304 
uid_t
 
db_lid
;

305 } 
	tdblk_t
;

310 
	smsgb
 {

311 
msgb
 *
b_√xt
;

312 
msgb
 *
b_¥ev
;

313 
msgb
 *
b_c⁄t
;

314 *
b_Ωå
;

315 *
b_w±r
;

316 
d©ab
 *
b_d©≠
;

317 
b_b™d
;

318 
b_·Êag
;

319 
b_Êag
;

320 
queue_t
 *
b_queue
;

321 } 
	tmblk_t
;

326 
	#DBLK_REFMIN
 0x01

	)

331 
	#STRUIO_SPEC
 0x01

	)

332 
	#STRUIO_DONE
 0x02

	)

333 
	#STRUIO_IP
 0x04

	)

334 
	#STRUIO_ZC
 0x08

	)

335 
	#STRUIO_ICK
 0x10

	)

340 
	#MSGMARK
 0x01

	)

341 
	#MSGNOLOOP
 0x02

	)

343 
	#MSGDELIM
 0x04

	)

344 
	#MSGNOGET
 0x08

	)

345 
	#MSGMARKNEXT
 0x10

	)

346 
	#MSGNOTMARKNEXT
 0x20

	)

355 
	#M_DATA
 0x00

	)

356 
	#M_PROTO
 0x01

	)

361 
	#M_BREAK
 0x08

	)

362 
	#M_PASSFP
 0x09

	)

363 
	#M_EVENT
 0x0a

	)

364 
	#M_SIG
 0x0b

	)

365 
	#M_DELAY
 0x0c

	)

366 
	#M_CTL
 0x0d

	)

367 
	#M_IOCTL
 0x0e

	)

368 
	#M_SETOPTS
 0x10

	)

369 
	#M_RSE
 0x11

	)

374 
	#M_IOCACK
 0x81

	)

375 
	#M_IOCNAK
 0x82

	)

376 
	#M_PCPROTO
 0x83

	)

377 
	#M_PCSIG
 0x84

	)

378 
	#M_READ
 0x85

	)

379 
	#M_FLUSH
 0x86

	)

380 
	#M_STOP
 0x87

	)

381 
	#M_START
 0x88

	)

382 
	#M_HANGUP
 0x89

	)

383 
	#M_ERROR
 0x8a

	)

384 
	#M_COPYIN
 0x8b

	)

385 
	#M_COPYOUT
 0x8c

	)

386 
	#M_IOCDATA
 0x8d

	)

387 
	#M_PCRSE
 0x8e

	)

388 
	#M_STOPI
 0x8f

	)

389 
	#M_STARTI
 0x90

	)

390 
	#M_PCEVENT
 0x91

	)

391 
	#M_UNHANGUP
 0x92

	)

396 
	#QNORM
 0x00

	)

397 
	#QPCTL
 0x80

	)

402 #if 
deföed
(
_LP64
)

403 
	siocblk
 {

404 
ioc_cmd
;

405 
¸ed_t
 *
ioc_¸
;

406 
uöt_t
 
ioc_id
;

407 
uöt_t
 
ioc_Êag
;

408 
size_t
 
ioc_cou¡
;

409 
ioc_rvÆ
;

410 
ioc_îr‹
;

413 
	siocblk
 {

414 
ioc_cmd
;

415 
¸ed_t
 *
ioc_¸
;

416 
uöt_t
 
ioc_id
;

417 
size_t
 
ioc_cou¡
;

418 
ioc_îr‹
;

419 
ioc_rvÆ
;

420 
ioc_fûl1
;

421 
uöt_t
 
ioc_Êag
;

422 
ioc_fûÀr
[2];

426 
iocblk
 *
	tIOCP
;

428 
	#ioc_uid
 
ioc_¸
->
¸_uid


	)

429 
	#ioc_gid
 
ioc_¸
->
¸_gid


	)

433 
	#IOC_MODELS
 
DATAMODEL_MASK


	)

434 
	#IOC_ILP32
 
DATAMODEL_ILP32


	)

435 
	#IOC_LP64
 
DATAMODEL_LP64


	)

436 
	#IOC_NATIVE
 
DATAMODEL_NATIVE


	)

437 
	#IOC_NONE
 
DATAMODEL_NONE


	)

442 
	#IOC_CONVERT_FROM
(
io˝
) 
	`ddi_modñ_c⁄vît_‰om
( \

443 ((
iocblk
 *)
io˝
)->
ioc_Êag
)

	)

448 #if 
deföed
(
_LP64
)

449 
	sc›yªq
 {

450 
cq_cmd
;

451 
¸ed_t
 *
cq_¸
;

452 
uöt_t
 
cq_id
;

453 
uöt_t
 
cq_Êag
;

454 
mblk_t
 *
cq_¥iv©e
;

455 
ˇddr_t
 
cq_addr
;

456 
size_t
 
cq_size
;

459 
	sc›yªq
 {

460 
cq_cmd
;

461 
¸ed_t
 *
cq_¸
;

462 
uöt_t
 
cq_id
;

463 
ˇddr_t
 
cq_addr
;

464 
size_t
 
cq_size
;

465 
uöt_t
 
cq_Êag
;

466 
mblk_t
 *
cq_¥iv©e
;

467 
cq_fûÀr
[4];

471 
	#cq_uid
 
cq_¸
->
¸_uid


	)

472 
	#cq_gid
 
cq_¸
->
¸_gid


	)

476 
	#STRCANON
 0x01

	)

478 
	#RECOPY
 0x02

	)

485 #if 
deföed
(
_LP64
)

486 
	sc›yª•
 {

487 
˝_cmd
;

488 
¸ed_t
 *
˝_¸
;

489 
uöt_t
 
˝_id
;

490 
uöt_t
 
˝_Êag
;

491 
mblk_t
 *
˝_¥iv©e
;

492 
ˇddr_t
 
˝_rvÆ
;

496 
	sc›yª•
 {

497 
˝_cmd
;

498 
¸ed_t
 *
˝_¸
;

499 
uöt_t
 
˝_id
;

500 
ˇddr_t
 
˝_rvÆ
;

502 
size_t
 
˝_∑d1
;

503 
uöt_t
 
˝_∑d2
;

504 
mblk_t
 *
˝_¥iv©e
;

505 
uöt_t
 
˝_Êag
;

506 
˝_fûÀr
[3];

510 
	#˝_uid
 
˝_¸
->
¸_uid


	)

511 
	#˝_gid
 
˝_¸
->
¸_gid


	)

518 
	uio˘y≥s
 {

519 
iocblk
 iocblk;

520 
c›yªq
 copyreq;

521 
c›yª•
 copyresp;

529 
	s°r›ti⁄s
 {

530 
uöt_t
 
so_Êags
;

531 
so_ªad›t
;

532 
ush‹t_t
 
so_wroff
;

533 
ssize_t
 
so_möpsz
;

534 
ssize_t
 
so_maxpsz
;

535 
size_t
 
so_hiw©
;

536 
size_t
 
so_low©
;

537 
so_b™d
;

538 
ush‹t_t
 
so_îr›t
;

539 
ssize_t
 
so_maxblk
;

540 
ush‹t_t
 
so_c›y›t
;

545 
	#SO_ALL
 0x003f

	)

546 
	#SO_READOPT
 0x0001

	)

547 
	#SO_WROFF
 0x0002

	)

548 
	#SO_MINPSZ
 0x0004

	)

549 
	#SO_MAXPSZ
 0x0008

	)

550 
	#SO_HIWAT
 0x0010

	)

551 
	#SO_LOWAT
 0x0020

	)

552 
	#SO_MREADON
 0x0040

	)

553 
	#SO_MREADOFF
 0x0080

	)

554 
	#SO_NDELON
 0x0100

	)

555 
	#SO_NDELOFF
 0x0200

	)

556 
	#SO_ISTTY
 0x0400

	)

557 
	#SO_ISNTTY
 0x0800

	)

558 
	#SO_TOSTOP
 0x1000

	)

559 
	#SO_TONSTOP
 0x2000

	)

560 
	#SO_BAND
 0x4000

	)

561 
	#SO_DELIM
 0x8000

	)

562 
	#SO_NODELIM
 0x010000

	)

563 
	#SO_STRHOLD
 0x020000

	)

564 
	#SO_ERROPT
 0x040000

	)

565 
	#SO_COPYOPT
 0x080000

	)

566 
	#SO_MAXBLK
 0x100000

	)

568 #ifde‡
_KERNEL


576 
	#DEF_IOV_MAX
 16

	)

578 
	s°ruiod
 {

579 
mblk_t
 *
d_mp
;

580 
uio_t
 
d_uio
;

581 
iovec_t
 
d_iov
[
DEF_IOV_MAX
];

582 } 
	t°ruiod_t
;

587 
	söfod
 {

588 
d_cmd
;

589 
d_ªs
;

590 
d_byãs
;

591 
d_cou¡
;

592 
uio_t
 *
d_ui›
;

593 } 
	töfod_t
;

597 
	#INFOD_FIRSTBYTES
 0x02

	)

598 
	#INFOD_BYTES
 0x04

	)

599 
	#INFOD_COUNT
 0x08

	)

600 
	#INFOD_COPYOUT
 0x10

	)

611 #ifde‡
_KERNEL


612 
	#NOERROR
 (()-1)

	)

619 
	#MODOPEN
 0x1

	)

620 
	#CLONEOPEN
 0x2

	)

621 
	#CONSOPEN
 0x4

	)

622 
	#OPENFAIL
 -1

	)

627 
	#BPRI_LO
 1

	)

628 
	#BPRI_MED
 2

	)

629 
	#BPRI_HI
 3

	)

630 
	#BPRI_FT
 4

	)

636 
	#INFPSZ
 -1

	)

641 
	#FLUSHALL
 1

	)

642 
	#FLUSHDATA
 0

	)

647 
	#TRANSPARENT
 ()(-1)

	)

652 
	#STRHIGH
 5120

	)

653 
	#STRLOW
 1024

	)

658 
	#MAXIOCBSZ
 1024

	)

663 
	#PERIM_INNER
 1

	)

664 
	#PERIM_OUTER
 2

	)

673 
	#ˇ√«bÀ
(
q
) !((q)->
q_Êag
 & 
QNOENB
)

	)

678 #ifde‡
TRACE


679 
	#QNAME
(
q
) ((q)->
q_qöfo
->
qi_möfo
->
mi_id«me
)

	)

686 
	#d©amsg
(
ty≥
) \

687 ((
ty≥
Ë=
M_DATA
 || \

688 (
ty≥
Ë=
M_PROTO
 || \

689 (
ty≥
Ë=
M_PCPROTO
 || \

690 (
ty≥
Ë=
M_DELAY
)

	)

695 
	#que˛ass
(
bp
Ë(((bp)->
b_d©≠
->
db_ty≥
 >
QPCTL
Ë? QPCTL : 
QNORM
)

	)

700 
	#°ø 
(
a
) (
ˇddr_t
)((
öçå_t
)◊Ë& ~( ()-1))

	)

705 
	#bpsize
(
bp
Ë(()(bp->
b_d©≠
->
db_lim
 - bp->b_d©≠->
db_ba£
))

	)

711 #ifde‡
_KERNEL


717 
mblk_t
 *
Ælocb
(
size_t
, 
uöt_t
);

718 
mblk_t
 *
esbÆloc
(*, 
size_t
, 
uöt_t
, 
‰ä_t
 *);

719 
mblk_t
 *
mkiocb
(
uöt_t
 
cmd
);

720 
ã°b
(
size_t
, 
uöt_t
);

721 
bufˇŒ_id_t
 
bufˇŒ
(
size_t
, 
uöt_t
, (*)(*), *);

722 
bufˇŒ_id_t
 
esbbˇŒ
(
uöt_t
, (*)(*), *);

723 
‰ìb
(
msgb
 *);

724 
‰ìmsg
(
mblk_t
 *);

725 
mblk_t
 *
dupb
(mblk_t *);

726 
mblk_t
 *
dupmsg
(mblk_t *);

727 
mblk_t
 *
c›yb
(mblk_t *);

728 
mblk_t
 *
c›ymsg
(mblk_t *);

729 
lökb
(
mblk_t
 *, mblk_t *);

730 
mblk_t
 *
u∆ökb
(mblk_t *);

731 
mblk_t
 *
ªÆlocb
(mblk_à*, 
size_t
, 
uöt_t
);

732 
mblk_t
 *
rmvb
(mblk_t *, mblk_t *);

733 
puŒupmsg
(
msgb
 *, 
ssize_t
);

734 
mblk_t
 *
msgpuŒup
(
msgb
 *, 
ssize_t
);

735 
adjmsg
(
msgb
 *, 
ssize_t
);

736 
size_t
 
msgdsize
(
msgb
 *);

737 
mblk_t
 *
gëq
(
queue_t
 *);

738 
rmvq
(
queue_t
 *, 
mblk_t
 *);

739 
Êushq
(
queue_t
 *, );

740 
Êushq_comm⁄
(
queue_t
 *, , );

741 
Êushb™d
(
queue_t
 *, , );

742 
ˇ≈ut
(
queue_t
 *);

743 
bˇ≈ut
(
queue_t
 *, );

744 
ˇ≈uäext
(
queue_t
 *);

745 
bˇ≈uäext
(
queue_t
 *, );

746 
putq
(
queue_t
 *, 
mblk_t
 *);

747 
putbq
(
queue_t
 *, 
mblk_t
 *);

748 
ösq
(
queue_t
 *, 
mblk_t
 *, mblk_t *);

749 
put
(
queue_t
 *, 
mblk_t
 *);

750 
puäext
(
queue_t
 *, 
mblk_t
 *);

752 
put˘l
(
queue_t
 *, );

753 
put˘l1
(
queue_t
 *, , );

754 
puäext˘l
(
queue_t
 *, );

755 
puäext˘l1
(
queue_t
 *, , );

756 
queue_t
 *
backq
(queue_t *);

757 
qª∂y
(
queue_t
 *, 
mblk_t
 *);

758 
qíabÀ
(
queue_t
 *);

759 
qsize
(
queue_t
 *);

760 
n€«bÀ
(
queue_t
 *);

761 
íabÀok
(
queue_t
 *);

762 
°rq£t
(
queue_t
 *, 
qfõlds_t
, , 
öçå_t
);

763 
°rqgë
(
queue_t
 *, 
qfõlds_t
, , *);

764 
unbufˇŒ
(
bufˇŒ_id_t
);

765 
q¥ocs⁄
(
queue_t
 *);

766 
q¥ocsoff
(
queue_t
 *);

767 
‰ìze°r
(
queue_t
 *);

768 
un‰ìze°r
(
queue_t
 *);

769 
qwaô
(
queue_t
 *);

770 
qwaô_sig
(
queue_t
 *);

771 
qwaô_rw
(
queue_t
 *);

772 
qwrôî
(
queue_t
 *, 
mblk_t
 *, (*
func
)(), );

773 
timeout_id_t
 
qtimeout
(
queue_t
 *, (*
func
)(*), *, 
˛ock_t
);

774 
bufˇŒ_id_t
 
qbufˇŒ
(
queue_t
 *, 
size_t
, 
uöt_t
,

776 
˛ock_t
 
qu¡imeout
(
queue_t
 *, 
timeout_id_t
);

777 
qunbufˇŒ
(
queue_t
 *, 
bufˇŒ_id_t
);

778 
°rwakeq
(
queue_t
 *, );

779 
°rui›ut
(
queue_t
 *, 
mblk_t
 *, 
°ruiod_t
 *, );

780 
°ruiogë
(
queue_t
 *, 
mblk_t
 *, 
°ruiod_t
 *, );

781 
rw√xt
(
queue_t
 *, 
°ruiod_t
 *);

782 
öf⁄ext
(
queue_t
 *, 
öfod_t
 *);

783 
isuioq
(
queue_t
 *);

784 
¸óã_puéocks
(
queue_t
 *, );

791 
n°Ωush
;

793 #ifdef 
__˝lu•lus


	@/usr/include/sys/syslog.h

14 #i‚de‡
_SYS_SYSLOG_H


15 
	#_SYS_SYSLOG_H


	)

17 #¥agm®
idít
 "@(#)syslog.h 1.10 92/07/14 SMI"

19 #ifdef 
__˝lu•lus


26 
	#LOG_KERN
 (0<<3)

	)

27 
	#LOG_USER
 (1<<3)

	)

28 
	#LOG_MAIL
 (2<<3)

	)

29 
	#LOG_DAEMON
 (3<<3)

	)

30 
	#LOG_AUTH
 (4<<3)

	)

31 
	#LOG_SYSLOG
 (5<<3)

	)

32 
	#LOG_LPR
 (6<<3)

	)

33 
	#LOG_NEWS
 (7<<3)

	)

34 
	#LOG_UUCP
 (8<<3)

	)

35 
	#LOG_CRON
 (15<<3)

	)

37 
	#LOG_LOCAL0
 (16<<3)

	)

38 
	#LOG_LOCAL1
 (17<<3)

	)

39 
	#LOG_LOCAL2
 (18<<3)

	)

40 
	#LOG_LOCAL3
 (19<<3)

	)

41 
	#LOG_LOCAL4
 (20<<3)

	)

42 
	#LOG_LOCAL5
 (21<<3)

	)

43 
	#LOG_LOCAL6
 (22<<3)

	)

44 
	#LOG_LOCAL7
 (23<<3)

	)

46 
	#LOG_NFACILITIES
 24

	)

47 
	#LOG_FACMASK
 0x03f8

	)

52 
	#LOG_EMERG
 0

	)

53 
	#LOG_ALERT
 1

	)

54 
	#LOG_CRIT
 2

	)

55 
	#LOG_ERR
 3

	)

56 
	#LOG_WARNING
 4

	)

57 
	#LOG_NOTICE
 5

	)

58 
	#LOG_INFO
 6

	)

59 
	#LOG_DEBUG
 7

	)

61 
	#LOG_PRIMASK
 0x0007

	)

66 
	#LOG_MASK
(
¥i
) (1 << (¥i))

	)

67 
	#LOG_UPTO
(
¥i
) ((1 << (’ri)+1)Ë- 1)

	)

75 
	#LOG_PID
 0x01

	)

76 
	#LOG_CONS
 0x02

	)

77 
	#LOG_ODELAY
 0x04

	)

78 
	#LOG_NDELAY
 0x08

	)

79 
	#LOG_NOWAIT
 0x10

	)

81 #ifdef 
__˝lu•lus


	@/usr/include/sys/t_lock.h

12 #i‚de‡
_SYS_T_LOCK_H


13 
	#_SYS_T_LOCK_H


	)

15 #¥agm®
idít
 "@(#)t_lock.h 1.45 98/02/01 SMI"

17 #i‚def 
_ASM


18 
	~<sys/machlock.h
>

19 
	~<sys/∑øm.h
>

20 
	~<sys/muãx.h
>

21 
	~<sys/rwlock.h
>

22 
	~<sys/£m≠h‹e.h
>

23 
	~<sys/c⁄dv¨.h
>

26 #ifdef 
__˝lu•lus


30 #i‚def 
_ASM


42 #i‡
deföed
(
_KERNEL
)

44 
n˝us
;

51 
di•_lock_íãr
(
di•_lock_t
 *);

52 
di•_lock_exô
(
di•_lock_t
 *);

53 
di•_lock_exô_n›ªem±
(
di•_lock_t
 *);

54 
di•_lock_íãr_high
(
di•_lock_t
 *);

55 
di•_lock_exô_high
(
di•_lock_t
 *);

56 
di•_lock_öô
(
di•_lock_t
 *
Õ
, *
«me
);

57 
di•_lock_de°roy
(
di•_lock_t
 *
Õ
);

59 
	#DISP_LOCK_INIT
(
Õ
) 
	`LOCK_INIT_CLEAR
((
lock_t
 *)÷p))

	)

60 
	#DISP_LOCK_HELD
(
Õ
) 
	`LOCK_HELD
((
lock_t
 *)÷p))

	)

61 
	#DISP_LOCK_DESTROY
(
Õ
) 
	`ASSERT
(!
	`DISP_LOCK_HELD
÷p))

	)

69 #i‚de‡
NO_LOCKS_HELD


70 
	#NO_LOCKS_HELD
 1

	)

72 #i‚de‡
NO_COMPETING_THREADS


73 
	#NO_COMPETING_THREADS
 1

	)

80 #ifdef 
__˝lu•lus


	@/usr/include/sys/time_impl.h

12 #i‚de‡
_SYS_TIME_IMPL_H


13 
	#_SYS_TIME_IMPL_H


	)

15 #¥agm®
idít
 "@(#)time_impl.h 1.5 99/10/05 SMI"

17 
	~<sys/„©uª_ã°s.h
>

19 #ifdef 
__˝lu•lus


23 #i‚def 
_ASM


25 #i‚de‡
_TIME_T


26 
	#_TIME_T


	)

27 
	ttime_t
;

34 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

35 (
	g_POSIX_C_SOURCE
 > 2Ë|| 
	$deföed
(
__EXTENSIONS__
)

36 
	stime•ec
 {

37 
time_t
 
tv_£c
;

38 
tv_n£c
;

39 } 
	ttime•ec_t
;

41 #i‡
	`deföed
(
_SYSCALL32
)

43 
	~<sys/ty≥s32.h
>

45 
	#TIMESPEC32_TO_TIMESPEC
(
ts
, 
ts32
) { \

46 (
ts
)->
tv_£c
 = (
time_t
)(
ts32
)->tv_sec; \

47 (
ts
)->
tv_n£c
 = (
ts32
)->tv_nsec; \

48 
	}

	)
}

50 
	#TIMESPEC_TO_TIMESPEC32
(
ts32
, 
ts
) { \

51 (
ts32
)->
tv_£c
 = (
time32_t
)(
ts
)->tv_sec; \

52 (
ts32
)->
tv_n£c
 = (
ts
)->tv_nsec; \

53 }

	)

55 
	#TIMESPEC_OVERFLOW
(
ts
) \

56 ((
ts
)->
tv_£c
 < 
TIME32_MIN
 || (ts)->tv_£¯> 
TIME32_MAX
)

	)

60 
time•ec
 
	ttime°ruc_t
;

69 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

70 
	$deföed
(
__EXTENSIONS__
)

71 
	#time°ruc
 
time•ec


	)

77 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

78 (
_POSIX_C_SOURCE
 > 2Ë|| 
	$deföed
(
__EXTENSIONS__
)

79 
	sôimî•ec
 {

80 
time•ec
 
ô_öãrvÆ
;

81 
time•ec
 
ô_vÆue
;

82 } 
	tôimî•ec_t
;

84 #i‡
	`deföed
(
_SYSCALL32
)

86 
	#ITIMERSPEC32_TO_ITIMERSPEC
(
ô
, 
ô32
) { \

87 
	`TIMESPEC32_TO_TIMESPEC
(&(
ô
)->
ô_öãrvÆ
, &(
ô32
)->it_interval); \

88 
	`TIMESPEC32_TO_TIMESPEC
(&(
ô
)->
ô_vÆue
, &(
ô32
)->it_value); \

89 
	}

	)
}

91 
	#ITIMERSPEC_TO_ITIMERSPEC32
(
ô32
, 
ô
) { \

92 
	`TIMESPEC_TO_TIMESPEC32
(&(
ô32
)->
ô_öãrvÆ
, &(
ô
)->it_interval); \

93 
	`TIMESPEC_TO_TIMESPEC32
(&(
ô32
)->
ô_vÆue
, &(
ô
)->it_value); \

94 }

	)

96 
	#ITIMERSPEC_OVERFLOW
(
ô
) \

97 (
	`TIMESPEC_OVERFLOW
(&(
ô
)->
ô_öãrvÆ
) && \

98 
	`TIMESPEC_OVERFLOW
(&(
ô
)->
ô_vÆue
))

	)

106 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
) || \

107 (
	g_POSIX_C_SOURCE
 > 2Ë|| 
	$deföed
(
__EXTENSIONS__
)

109 
	#__CLOCK_REALTIME0
 0

	)

110 
	#CLOCK_VIRTUAL
 1

	)

111 
	#CLOCK_PROF
 2

	)

112 
	#__CLOCK_REALTIME3
 3

	)

113 
	#CLOCK_HIGHRES
 4

	)

115 #ifde‡
_KERNEL


116 
	#CLOCK_MAX
 5

	)

124 #i‡(
_POSIX_C_SOURCE
 >199506LË|| 
	`deföed
(
_POSIX_PER_PROCESS_TIMER_SOURCE
)

125 
	#CLOCK_REALTIME
 
__CLOCK_REALTIME3


	)

127 
	#CLOCK_REALTIME
 
__CLOCK_REALTIME0


	)

130 
	#TIMER_RELTIME
 0x0

	)

131 
	#TIMER_ABSTIME
 0x1

	)

135 #ifdef 
__˝lu•lus


136 
	}
}

	@/usr/include/sys/time_std_impl.h

16 #i‚de‡
_SYS_TIME_STD_IMPL_H


17 
	#_SYS_TIME_STD_IMPL_H


	)

19 #¥agm®
idít
 "@(#)time_std_impl.h 1.2 98/02/13 SMI"

21 
	~<sys/„©uª_ã°s.h
>

23 #ifdef 
__˝lu•lus


27 #i‚def 
_TIME_T


28 
	#_TIME_T


	)

29 
	ttime_t
;

32 
	s_time•ec
 {

33 
time_t
 
	g__tv_£c
;

34 
	g__tv_n£c
;

35 } 
	t_time•ec_t
;

37 
_time•ec
 
	t_time°ruc_t
;

39 #ifdef 
__˝lu•lus


	@/usr/include/sys/types32.h

6 #i‚de‡
_SYS_TYPES32_H


7 
	#_SYS_TYPES32_H


	)

9 #¥agm®
idít
 "@(#)types32.h 1.4 98/02/13 SMI"

11 
	~<sys/öt_ty≥s.h
>

13 #ifdef 
__˝lu•lus


28 
uöt32_t
 
	tˇddr32_t
;

29 
öt32_t
 
	tdaddr32_t
;

30 
öt32_t
 
	toff32_t
;

31 
uöt32_t
 
	töo32_t
;

32 
öt32_t
 
	tblk˙t32_t
;

33 
uöt32_t
 
	tfsblk˙t32_t
;

34 
uöt32_t
 
	tfsfû˙t32_t
;

35 
öt32_t
 
	tid32_t
;

36 
uöt32_t
 
	tmaj‹32_t
;

37 
uöt32_t
 
	tmö‹32_t
;

38 
öt32_t
 
	tkey32_t
;

39 
uöt32_t
 
	tmode32_t
;

40 
öt32_t
 
	tuid32_t
;

41 
öt32_t
 
	tgid32_t
;

42 
uöt32_t
 
	t∆ök32_t
;

43 
uöt32_t
 
	tdev32_t
;

44 
öt32_t
 
	tpid32_t
;

45 
uöt32_t
 
	tsize32_t
;

46 
öt32_t
 
	tssize32_t
;

47 
öt32_t
 
	ttime32_t
;

48 
öt32_t
 
	t˛ock32_t
;

50 
	stimevÆ32
 {

51 
time32_t
 
tv_£c
;

52 
öt32_t
 
tv_u£c
;

55 
	stime•ec32
 {

56 
time32_t
 
tv_£c
;

57 
öt32_t
 
tv_n£c
;

58 } 
	ttime•ec32_t
;

60 
time•ec32
 
	ttime°ruc32_t
;

62 
	sôimî•ec32
 {

63 
time•ec32
 
ô_öãrvÆ
;

64 
time•ec32
 
ô_vÆue
;

65 } 
	tôimî•ec32_t
;

67 #ifdef 
__˝lu•lus


	@/usr/include/sys/uio.h

13 #i‚de‡
_SYS_UIO_H


14 
	#_SYS_UIO_H


	)

16 #¥agm®
idít
 "@(#)uio.h 1.29 97/06/29 SMI"

18 
	~<sys/„©uª_ã°s.h
>

20 #ifdef 
__˝lu•lus


24 
	~<sys/ty≥s.h
>

33 #if 
deföed
(
_XPG4_2
)

34 
	siovec
 {

35 *
iov_ba£
;

36 
size_t
 
iov_Àn
;

37 } 
	tiovec_t
;

39 
	siovec
 {

40 
ˇddr_t
 
iov_ba£
;

41 #i‡
deföed
(
_LP64
)

42 
size_t
 
iov_Àn
;

44 
iov_Àn
;

46 } 
	tiovec_t
;

49 #i‡
deföed
(
_SYSCALL32
)

53 
	siovec32
 {

54 
ˇddr32_t
 
iov_ba£
;

55 
öt32_t
 
iov_Àn
;

56 } 
	tiovec32_t
;

60 #i‡ !
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

64 
	euio_£g
 { 
UIO_USERSPACE
, 
UIO_SYSSPACE
, 
UIO_USERISPACE
 } 
	tuio_£g_t
;

66 
	suio
 {

67 
iovec_t
 *
uio_iov
;

68 
uio_iov˙t
;

69 
Œoff_t
 
_uio_off£t
;

70 
uio_£g_t
 
uio_£gÊg
;

71 
uio_fmode
;

72 
Œdaddr_t
 
_uio_limô
;

73 
ssize_t
 
uio_ªsid
;

74 } 
	tuio_t
;

76 
	#uio_loff£t
 
_uio_off£t
.
_f


	)

77 #i‡!
deföed
(
_LP64
)

78 
	#uio_off£t
 
_uio_off£t
.
_p
.
_l


	)

80 
	#uio_off£t
 
uio_loff£t


	)

83 
	#uio_Œimô
 
_uio_limô
.
_f


	)

84 #i‡!
deföed
(
_LP64
)

85 
	#uio_limô
 
_uio_limô
.
_p
.
_l


	)

87 
	#uio_limô
 
uio_Œimô


	)

93 
	euio_rw
 { 
UIO_READ
, 
UIO_WRITE
 } 
	tuio_rw_t
;

96 #if 
deföed
(
_KERNEL
)

98 
uiomove
(*, 
size_t
, 
uio_rw
, 
uio_t
 *);

99 
uªadc
(, 
uio_t
 *);

100 
uwrôec
(
uio
 *);

101 
uiomvuio
(
uio_t
 *, uio_t *);

102 
uioskù
(
uio_t
 *, 
size_t
);

103 
uiodup
(
uio_t
 *, uio_à*, 
iovec_t
 *, );

104 
uioùc›yö
(*, 
size_t
, 
uio_t
 *, *, , );

105 
uioùc›yout
(*, 
size_t
, 
uio_t
 *, *, , );

106 
ui›ageÊù
(*, 
size_t
, 
uio_t
 *);

110 #i‡ 
deföed
(
__STDC__
)

112 
ssize_t
 
ªadv
(, c⁄° 
iovec
 *, );

113 
ssize_t
 
wrôev
(, c⁄° 
iovec
 *, );

117 
ssize_t
 
ªadv
();

118 
ssize_t
 
wrôev
();

124 #ifdef 
__˝lu•lus


	@/usr/include/sys/un.h

31 #i‚def 
_SYS_UN_H


32 
	#_SYS_UN_H


	)

34 #¥agm®
idít
 "@(#)un.h 1.9 96/07/12 SMI"

36 #ifdef 
__˝lu•lus


40 #i‚de‡
_SA_FAMILY_T


41 
	#_SA_FAMILY_T


	)

42 
	tß_Ámûy_t
;

48 
	ssockaddr_un
 {

49 
ß_Ámûy_t
 
	gsun_Ámûy
;

50 
	gsun_∑th
[108];

53 #ifde‡
_KERNEL


54 
u≈_disˇrd
();

57 #ifdef 
__˝lu•lus


	@/usr/include/sys/unistd.h

22 #i‚de‡
_SYS_UNISTD_H


23 
	#_SYS_UNISTD_H


	)

25 #¥agm®
idít
 "@(#)unistd.h 1.37 98/10/28 SMI"

27 
	~<sys/„©uª_ã°s.h
>

29 #ifdef 
__˝lu•lus


35 
	#_CS_PATH
 65

	)

41 
	#_CS_LFS_CFLAGS
 68

	)

42 
	#_CS_LFS_LDFLAGS
 69

	)

43 
	#_CS_LFS_LIBS
 70

	)

44 
	#_CS_LFS_LINTFLAGS
 71

	)

46 
	#_CS_LFS64_CFLAGS
 72

	)

47 
	#_CS_LFS64_LDFLAGS
 73

	)

48 
	#_CS_LFS64_LIBS
 74

	)

49 
	#_CS_LFS64_LINTFLAGS
 75

	)

52 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 700

	)

53 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 701

	)

54 
	#_CS_XBS5_ILP32_OFF32_LIBS
 702

	)

55 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 703

	)

56 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 705

	)

57 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 706

	)

58 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 707

	)

59 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 708

	)

60 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 709

	)

61 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 710

	)

62 
	#_CS_XBS5_LP64_OFF64_LIBS
 711

	)

63 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 712

	)

64 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 713

	)

65 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 714

	)

66 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 715

	)

67 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 716

	)

73 
	#_SC_ARG_MAX
 1

	)

74 
	#_SC_CHILD_MAX
 2

	)

75 
	#_SC_CLK_TCK
 3

	)

76 
	#_SC_NGROUPS_MAX
 4

	)

77 
	#_SC_OPEN_MAX
 5

	)

78 
	#_SC_JOB_CONTROL
 6

	)

79 
	#_SC_SAVED_IDS
 7

	)

80 
	#_SC_VERSION
 8

	)

82 
	#_SC_PASS_MAX
 9

	)

83 
	#_SC_LOGNAME_MAX
 10

	)

84 
	#_SC_PAGESIZE
 11

	)

85 
	#_SC_XOPEN_VERSION
 12

	)

87 
	#_SC_NPROCESSORS_CONF
 14

	)

88 
	#_SC_NPROCESSORS_ONLN
 15

	)

89 
	#_SC_STREAM_MAX
 16

	)

90 
	#_SC_TZNAME_MAX
 17

	)

92 
	#_SC_AIO_LISTIO_MAX
 18

	)

93 
	#_SC_AIO_MAX
 19

	)

94 
	#_SC_AIO_PRIO_DELTA_MAX
 20

	)

95 
	#_SC_ASYNCHRONOUS_IO
 21

	)

96 
	#_SC_DELAYTIMER_MAX
 22

	)

97 
	#_SC_FSYNC
 23

	)

98 
	#_SC_MAPPED_FILES
 24

	)

99 
	#_SC_MEMLOCK
 25

	)

100 
	#_SC_MEMLOCK_RANGE
 26

	)

101 
	#_SC_MEMORY_PROTECTION
 27

	)

102 
	#_SC_MESSAGE_PASSING
 28

	)

103 
	#_SC_MQ_OPEN_MAX
 29

	)

104 
	#_SC_MQ_PRIO_MAX
 30

	)

105 
	#_SC_PRIORITIZED_IO
 31

	)

106 
	#_SC_PRIORITY_SCHEDULING
 32

	)

107 
	#_SC_REALTIME_SIGNALS
 33

	)

108 
	#_SC_RTSIG_MAX
 34

	)

109 
	#_SC_SEMAPHORES
 35

	)

110 
	#_SC_SEM_NSEMS_MAX
 36

	)

111 
	#_SC_SEM_VALUE_MAX
 37

	)

112 
	#_SC_SHARED_MEMORY_OBJECTS
 38

	)

113 
	#_SC_SIGQUEUE_MAX
 39

	)

114 
	#_SC_SIGRT_MIN
 40

	)

115 
	#_SC_SIGRT_MAX
 41

	)

116 
	#_SC_SYNCHRONIZED_IO
 42

	)

117 
	#_SC_TIMERS
 43

	)

118 
	#_SC_TIMER_MAX
 44

	)

120 
	#_SC_2_C_BIND
 45

	)

121 
	#_SC_2_C_DEV
 46

	)

122 
	#_SC_2_C_VERSION
 47

	)

123 
	#_SC_2_FORT_DEV
 48

	)

124 
	#_SC_2_FORT_RUN
 49

	)

125 
	#_SC_2_LOCALEDEF
 50

	)

126 
	#_SC_2_SW_DEV
 51

	)

127 
	#_SC_2_UPE
 52

	)

128 
	#_SC_2_VERSION
 53

	)

129 
	#_SC_BC_BASE_MAX
 54

	)

130 
	#_SC_BC_DIM_MAX
 55

	)

131 
	#_SC_BC_SCALE_MAX
 56

	)

132 
	#_SC_BC_STRING_MAX
 57

	)

133 
	#_SC_COLL_WEIGHTS_MAX
 58

	)

134 
	#_SC_EXPR_NEST_MAX
 59

	)

135 
	#_SC_LINE_MAX
 60

	)

136 
	#_SC_RE_DUP_MAX
 61

	)

137 
	#_SC_XOPEN_CRYPT
 62

	)

138 
	#_SC_XOPEN_ENH_I18N
 63

	)

139 
	#_SC_XOPEN_SHM
 64

	)

142 
	#_SC_2_CHAR_TERM
 66

	)

143 
	#_SC_XOPEN_XCU_VERSION
 67

	)

146 
	#_SC_ATEXIT_MAX
 76

	)

147 
	#_SC_IOV_MAX
 77

	)

148 
	#_SC_XOPEN_UNIX
 78

	)

149 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

152 #i‚de‡
_SC_T_IOV_MAX


153 
	#_SC_T_IOV_MAX
 79

	)

156 
	#_SC_PHYS_PAGES
 500

	)

157 
	#_SC_AVPHYS_PAGES
 501

	)

163 
	#_SC_COHER_BLKSZ
 503

	)

164 
	#_SC_SPLIT_CACHE
 504

	)

165 
	#_SC_ICACHE_SZ
 505

	)

166 
	#_SC_DCACHE_SZ
 506

	)

167 
	#_SC_ICACHE_LINESZ
 507

	)

168 
	#_SC_DCACHE_LINESZ
 508

	)

169 
	#_SC_ICACHE_BLKSZ
 509

	)

170 
	#_SC_DCACHE_BLKSZ
 510

	)

171 
	#_SC_DCACHE_TBLKSZ
 511

	)

172 
	#_SC_ICACHE_ASSOC
 512

	)

173 
	#_SC_DCACHE_ASSOC
 513

	)

175 
	#_SC_MAXPID
 514

	)

176 
	#_SC_STACK_PROT
 515

	)

182 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 568

	)

183 
	#_SC_GETGR_R_SIZE_MAX
 569

	)

184 
	#_SC_GETPW_R_SIZE_MAX
 570

	)

185 
	#_SC_LOGIN_NAME_MAX
 571

	)

186 
	#_SC_THREAD_KEYS_MAX
 572

	)

187 
	#_SC_THREAD_STACK_MIN
 573

	)

188 
	#_SC_THREAD_THREADS_MAX
 574

	)

189 
	#_SC_TTY_NAME_MAX
 575

	)

190 
	#_SC_THREADS
 576

	)

191 
	#_SC_THREAD_ATTR_STACKADDR
 577

	)

192 
	#_SC_THREAD_ATTR_STACKSIZE
 578

	)

193 
	#_SC_THREAD_PRIORITY_SCHEDULING
 579

	)

194 
	#_SC_THREAD_PRIO_INHERIT
 580

	)

195 
	#_SC_THREAD_PRIO_PROTECT
 581

	)

196 
	#_SC_THREAD_PROCESS_SHARED
 582

	)

197 
	#_SC_THREAD_SAFE_FUNCTIONS
 583

	)

200 
	#_SC_XOPEN_LEGACY
 717

	)

201 
	#_SC_XOPEN_REALTIME
 718

	)

202 
	#_SC_XOPEN_REALTIME_THREADS
 719

	)

203 
	#_SC_XBS5_ILP32_OFF32
 720

	)

204 
	#_SC_XBS5_ILP32_OFFBIG
 721

	)

205 
	#_SC_XBS5_LP64_OFF64
 722

	)

206 
	#_SC_XBS5_LPBIG_OFFBIG
 723

	)

211 
	#_PC_LINK_MAX
 1

	)

212 
	#_PC_MAX_CANON
 2

	)

213 
	#_PC_MAX_INPUT
 3

	)

214 
	#_PC_NAME_MAX
 4

	)

215 
	#_PC_PATH_MAX
 5

	)

216 
	#_PC_PIPE_BUF
 6

	)

217 
	#_PC_NO_TRUNC
 7

	)

218 
	#_PC_VDISABLE
 8

	)

219 
	#_PC_CHOWN_RESTRICTED
 9

	)

221 
	#_PC_ASYNC_IO
 10

	)

222 
	#_PC_PRIO_IO
 11

	)

223 
	#_PC_SYNC_IO
 12

	)

231 
	#_PC_FILESIZEBITS
 67

	)

232 
	#_PC_LAST
 67

	)

234 #i‚def 
_POSIX_VERSION


235 
	#_POSIX_VERSION
 199506L

	)

238 #i‚def 
_POSIX2_VERSION


239 
	#_POSIX2_VERSION
 199209L

	)

242 #i‚def 
_POSIX2_C_VERSION


243 
	#_POSIX2_C_VERSION
 199209L

	)

246 
	#_XOPEN_XPG3


	)

247 
	#_XOPEN_XPG4


	)

248 
	#_XOPEN_UNIX


	)

250 #i‚def 
_XOPEN_XCU_VERSION


251 
	#_XOPEN_XCU_VERSION
 4

	)

254 
	#_XOPEN_REALTIME
 1

	)

255 
	#_XOPEN_ENH_I18N
 1

	)

256 
	#_XOPEN_SHM
 1

	)

257 
	#_POSIX2_C_BIND
 1

	)

258 
	#_POSIX2_CHAR_TERM
 1

	)

259 
	#_POSIX2_LOCALEDEF
 1

	)

260 
	#_POSIX2_C_DEV
 1

	)

261 
	#_POSIX2_SW_DEV
 1

	)

262 
	#_POSIX2_UPE
 1

	)

264 #ifdef 
__˝lu•lus


	@/usr/include/sys/user.h

13 #i‚de‡
_SYS_USER_H


14 
	#_SYS_USER_H


	)

16 #¥agm®
idít
 "@(#)user.h 1.59 99/08/31 SMI"

18 
	~<sys/ty≥s.h
>

19 
	~<sys/sig«l.h
>

21 #ifdef 
__˝lu•lus


29 
	sexd©a
 {

30 
vnode
 *
vp
;

31 
size_t
 
ux_tsize
;

32 
size_t
 
ux_dsize
;

33 
size_t
 
ux_bsize
;

34 
size_t
 
ux_lsize
;

35 
ux_nshlibs
;

36 
ux_mach
;

37 
ux_mag
;

38 
off_t
 
ux_toff£t
;

39 
off_t
 
ux_doff£t
;

40 
off_t
 
ux_loff£t
;

41 
ˇddr_t
 
ux_txt‹g
;

42 
ˇddr_t
 
ux_d©‹g
;

43 
ˇddr_t
 
ux_íéoc
;

46 #ifdef 
__˝lu•lus


50 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)

52 
	~<sys/∑øm.h
>

53 
	~<sys/pcb.h
>

54 
	~<sys/sigöfo.h
>

55 
	~<sys/ªsour˚.h
>

56 
	~<sys/time.h
>

57 
	~<sys/auxv.h
>

58 
	~<sys/î∫o.h
>

59 
	~<sys/t_lock.h
>

61 #ifdef 
__˝lu•lus


70 
	suf_íåy
 {

71 
kmuãx_t
 
uf_lock
;

72 
fûe
 *
uf_fûe
;

73 
Âﬁlöfo
 *
uf_Âﬁlöfo
;

74 
uf_ªf˙t
;

75 
uf_Æloc
;

76 
uf_Êag
;

77 
uf_busy
;

78 
kc⁄dv¨_t
 
uf_w™ãd_cv
;

79 
kc⁄dv¨_t
 
uf_˛osög_cv
;

80 } 
	tuf_íåy_t
;

85 
	suf_æi°
 {

86 
uf_æi°
 *
ur_√xt
;

87 
uf_íåy_t
 *
ur_li°
;

88 
ur_nfûes
;

89 } 
	tuf_æi°_t
;

94 
	suf_öfo
 {

95 
kmuãx_t
 
fi_lock
;

96 
kmuãx_t
 
fi_∑d
;

97 
fi_nfûes
;

98 
uf_íåy_t
 *vﬁ©ûê
fi_li°
;

99 
uf_æi°_t
 *
fi_æi°
;

100 } 
	tuf_öfo_t
;

133 
	#UF_ENTER
(
uÂ
, 
fù
, 
fd
) \

135 
uf_íåy_t
 *
_Êi°
 = (
fù
)->
fi_li°
; \

136 
uÂ
 = &
_Êi°
[
fd
]; \

137 
	`ASSERT
((
fd
Ë< (
fù
)->
fi_nfûes
); \

138 
	`muãx_íãr
(&
uÂ
->
uf_lock
); \

139 
_Êi°
 =(
fù
)->
fi_li°
) \

141 
	`muãx_exô
(&
uÂ
->
uf_lock
); \

142 }

	)

144 
	#UF_EXIT
(
uÂ
) 
	`muãx_exô
(&uÂ->
uf_lock
)

	)

146 
	#PSARGSZ
 80

	)

148 
	#PSCOMSIZ
 14

	)

150 
	#MAXCOMLEN
 16

	)

152 
	s
{

153 
uöt_t
 
w‹d
[9];

154 } 
	tk_sys£t_t
;

165 #i‡
deföed
(
•¨c
Ë|| deföed(
__•¨c
)

166 
	#__KERN_NAUXV_IMPL
 19

	)

167 #ñi‡
deföed
(
i386
Ë|| deföed(
__i386
)

168 
	#__KERN_NAUXV_IMPL
 21

	)

169 #ñi‡
deföed
(
__ü64
)

170 
	#__KERN_NAUXV_IMPL
 21

	)

173 
execsw
;

180 
	su£r
 {

185 
u_execid
;

186 
u_execsz
;

187 
pg˙t_t
 
u_tsize
;

188 
pg˙t_t
 
u_dsize
;

189 
time_t
 
u_°¨t
;

190 
˛ock_t
 
u_ticks
;

191 
kc⁄dv¨_t
 
u_cv
;

196 
exd©a
 
u_exd©a
;

197 
auxv_t
 
u_auxv
[
__KERN_NAUXV_IMPL
];

198 
u_pßrgs
[
PSARGSZ
];

199 
u_comm
[
MAXCOMLEN
 + 1];

205 
u_¨gc
;

206 
u_ívc
;

207 
u_auxvc
;

208 
uöçå_t
 
u_¨gv
;

209 
uöçå_t
 
u_ívp
;

210 
uöçå_t
 
u_auxvp
;

215 
vnode
 *
u_cdú
;

216 
vnode
 *
u_rdú
;

217 
mode_t
 
u_cmask
;

218 
u_mem
;

219 
u_nshm£g
;

220 
u_acÊag
;

221 
u_sy°øp
;

226 
k_sys£t_t
 
u_íåymask
;

227 
k_sys£t_t
 
u_exômask
;

228 
k_sig£t_t
 
u_signode„r
;

229 
k_sig£t_t
 
u_sig⁄°ack
;

230 
k_sig£t_t
 
u_sigª£th™d
;

231 
k_sig£t_t
 
u_sigª°¨t
;

232 
k_sig£t_t
 
u_sigmask
[
MAXSIG
];

233 (*
u_sig«l
[
MAXSIG
])();

244 
æimô64
 
u_æimô
[
RLIM_NLIMITS
];

245 #i‡
deföed
(
_LP64
)

246 
æimô64
 
u_ßved_æimô
[
RLIM_NLIMITS
];

248 
æimô64
 
u_ßved_lf_æimô
;

250 
uf_öfo_t
 
u_föfo
;

252 #i‡
deföed
(
i386
Ë|| deföed(
__i386
Ë|| deföed(
__ü64
)

253 (*
u_sigªtu∫
)();

255 
execsw
 *
u_execsw
;

256 } 
	tu£r_t
;

258 
	~<sys/¥oc.h
>

260 #ifdef 
_KERNEL


261 #ifdef 
sun


262 
	#u
 (
cuΩroc
->
p_u£r
)

	)

265 
	#P_FINFO
(
p
) (&’)->
p_u£r
.
u_föfo
)

	)

276 
	#UNLIMITED_CUR
(
p
, 
ty≥
) \

277 (
	`PTOU
(
p
)->
u_æimô
[(
ty≥
)].
æim_cur
 =
RLIM64_INFINITY
)

	)

279 #i‡
deföed
(
_SYSCALL32_IMPL
Ë|| deföed(
__löt
)

281 
	#P_CURLIMIT
(
p
, 
ty≥
) 
	`p_cuæimô
(’), (ty≥), (p)->
p_modñ
)

	)

282 
	#P_CURLIMIT32
(
p
, 
ty≥
) 
	`p_cuæimô
(’), (ty≥), 
DATAMODEL_ILP32
)

	)

286 
	#P_CURLIMIT
(
p
, 
ty≥
) \

287 (
	`UNLIMITED_CUR
(
p
, 
ty≥
) ? \

288 
æim_öföôy_m≠
[(
ty≥
)] : 
	`PTOU
(
p
)->
u_æimô
[—y≥)].
æim_cur
)

	)

290 
	#P_CURLIMIT32
(
p
, 
ty≥
) 
	`P_CURLIMIT
’,Åy≥)

	)

296 #ifdef 
__˝lu•lus


317 
	~<sys/ªg£t.h
>

319 #ifdef 
__˝lu•lus


323 
	#PSARGSZ
 80

	)

325 
	su£r
 {

326 
gªg£t_t
 
u_ªg
;

327 
gªg_t
 *
u_¨0
;

328 
u_pßrgs
[
PSARGSZ
];

329 (*
u_sig«l
[
MAXSIG
])();

330 
u_code
;

331 
ˇddr_t
 
u_addr
;

332 } 
	tu£r_t
;

334 #ifdef 
__˝lu•lus


	@/usr/include/sys/va_list.h

6 #i‚def 
_SYS_VA_LIST_H


7 
	#_SYS_VA_LIST_H


	)

9 #¥agm®
idít
 "@(#)va_list.h 1.12 99/05/04 SMI"

21 #ifdef 
__˝lu•lus


25 #i‡
deföed
(
__STDC__
Ë&& !deföed(
__ü64
)

26 *
	t__va_li°
;

28 *
	t__va_li°
;

31 #ifdef 
__˝lu•lus


	@/usr/include/varargs.h

13 #i‚de‡
_VARARGS_H


14 
	#_VARARGS_H


	)

16 #¥agm®
idít
 "@(#)varargs.h 1.40 99/03/11 SMI"

18 
	~<sys/va_li°.h
>

20 #ifdef 
__˝lu•lus


31 #i‚def 
_VA_LIST


32 
	#_VA_LIST


	)

33 
__va_li°
 
	tva_li°
;

53 #i‡(
deföed
(
__BUILTIN_VA_ARG_INCR
Ë|| deföed(
__•¨c
Ë|| deföed(
__i386
))

54 
	#va_Æi°
 
__buûtö_va_Æi°


	)

56 #i‡
deföed
(
__•¨cv9
)

57 
	#va_d˛
 
va_Æi°
;

	)

59 
	#va_d˛
 
va_Æi°
;

	)

62 #i‡(
deföed
(
__BUILTIN_VA_ARG_INCR
Ë|| deföed(
__•¨c
Ë|| deföed(
__i386
)) && \

63 !
deföed
(
__löt
)

69 
	#va_°¨t
(
li°
)Üi° = (*Ë&
va_Æi°


	)

70 
	#va_¨g
(
li°
, 
mode
) ((modê*)
	`__buûtö_va_¨g_ö¸
((modê*Ói°))[0]

	)

80 
	#va_°¨t
(
li°
)Üi° = (*Ë&
va_Æi°


	)

81 
	#va_¨g
(
li°
, 
mode
) \

82 ((
mode
 *)(
li°
 = (*)((*Ói° +  (mode))))[-1]

	)

86 
	#va_íd
(
li°
)

	)

92 #i‡
deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0) && \

93 !
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
))

95 
	#va_c›y
(
to
, 
‰om
) (—oË(‰om))

	)

99 #ifdef 
__˝lu•lus


	@/usr/include/ia32/sys/machtypes.h

6 #i‚de‡
_IA32_SYS_MACHTYPES_H


7 
	#_IA32_SYS_MACHTYPES_H


	)

9 #¥agm®
idít
 "@(#)machtypes.h 1.1 99/05/04 SMI"

11 #ifdef 
__˝lu•lus


21 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

22 
	$deföed
(
__EXTENSIONS__
)

24 
	s_œbñ_t
 { 
vÆ
[6]; } 
	tœbñ_t
;

28 
	tlock_t
;

30 #ifdef 
__˝lu•lus


31 
	}
}

	@/usr/include/ia64/sys/machtypes.h

6 #i‚de‡
_IA64_SYS_MACHTYPES_H


7 
	#_IA64_SYS_MACHTYPES_H


	)

9 #¥agm®
idít
 "@(#)machtypes.h 1.1 99/05/04 SMI"

11 #ifdef 
__˝lu•lus


21 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

22 
	$deföed
(
__EXTENSIONS__
)

24 
	s_œbñ_t
 { 
vÆ
[12]; } 
	tœbñ_t
;

28 
	tlock_t
;

30 #ifdef 
__˝lu•lus


31 
	}
}

	@/usr/include/stdio_impl.h

6 #i‚de‡
_STDIO_IMPL_H


7 
	#_STDIO_IMPL_H


	)

9 #¥agm®
idít
 "@(#)stdio_impl.h 1.8 99/06/10 SMI"

11 
	~<sys/iß_defs.h
>

13 #ifdef 
__˝lu•lus


17 #i‚de‡
_SSIZE_T


18 
	#_SSIZE_T


	)

19 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

20 
	tssize_t
;

22 
	tssize_t
;

26 #ifdef 
_LP64


28 #i‚def 
_FILE64_H


30 
	s__FILE_TAG
 {

31 
	g__∑d
[16];

38 
	s__FILE_TAG


40 #ifde‡
_STDIO_REVERSE


41 *
	g_±r
;

42 
ssize_t
 
	g_˙t
;

44 
ssize_t
 
	g_˙t
;

45 *
	g_±r
;

47 *
	g_ba£
;

48 
	g_Êag
;

49 
	g_fûe
;

50 
	g__‹õ¡©i⁄
:2;

51 
	g__i⁄ﬁock
:1;

52 
	g__fûÀr
:5;

57 #ifdef 
__˝lu•lus


	@/usr/include/stdio_tag.h

6 #i‚de‡
_STDIO_TAG_H


7 
	#_STDIO_TAG_H


	)

9 #¥agm®
idít
 "@(#)stdio_tag.h 1.3 98/04/20 SMI"

11 #ifdef 
__˝lu•lus


15 #i‚def 
__FILE_TAG


16 #if 
deföed
(
__˝lu•lus
) && (__cplusplus < 54321L)

17 
	#__FILE_TAG
 
FILE


	)

19 
	#__FILE_TAG
 
__FILE


	)

21 
__FILE_TAG
 
	t__FILE
;

24 #ifdef 
__˝lu•lus


	@/usr/include/sys/auxv.h

8 #i‚def 
_SYS_AUXV_H


9 
	#_SYS_AUXV_H


	)

11 #¥agm®
idít
 "@(#)auxv.h 1.26 98/01/13 SMI"

13 #ifdef 
__˝lu•lus


17 #i‡!
deföed
(
_ASM
)

19 
	s
{

20 
a_ty≥
;

21 
	u
{

22 
a_vÆ
;

23 #ifde‡
__STDC__


24 *
a_±r
;

26 *
a_±r
;

28 (*
a_f˙
)();

29 } 
a_un
;

30 } 
	tauxv_t
;

32 #i‡
deföed
(
_SYSCALL32
)

34 
	s
{

35 
öt32_t
 
	ma_ty≥
;

36 
	u
{

37 
öt32_t
 
	ma_vÆ
;

38 
ˇddr32_t
 
	ma_±r
;

39 
ˇddr32_t
 
	ma_f˙
;

40 } 
	ma_un
;

41 } 
	tauxv32_t
;

47 
	#AT_NULL
 0

	)

48 
	#AT_IGNORE
 1

	)

49 
	#AT_EXECFD
 2

	)

50 
	#AT_PHDR
 3

	)

51 
	#AT_PHENT
 4

	)

52 
	#AT_PHNUM
 5

	)

53 
	#AT_PAGESZ
 6

	)

54 
	#AT_BASE
 7

	)

55 
	#AT_FLAGS
 8

	)

56 
	#AT_ENTRY
 9

	)

57 
	#AT_DCACHEBSIZE
 10

	)

58 
	#AT_ICACHEBSIZE
 11

	)

59 
	#AT_UCACHEBSIZE
 12

	)

61 
	#AT_SUN_UID
 2000

	)

62 
	#AT_SUN_RUID
 2001

	)

63 
	#AT_SUN_GID
 2002

	)

64 
	#AT_SUN_RGID
 2003

	)

69 
	#AT_SUN_LDELF
 2004

	)

70 
	#AT_SUN_LDSHDR
 2005

	)

71 
	#AT_SUN_LDNAME
 2006

	)

72 
	#AT_SUN_LPAGESZ
 2007

	)

78 
	#AT_SUN_PLATFORM
 2008

	)

83 
	#AT_SUN_HWCAP
 2009

	)

85 #i‡
deföed
(
_KERNEL
)

86 
auxv_hwˇp
;

87 
kauxv_hwˇp
;

90 
	#AT_SUN_IFLUSH
 2010

	)

91 
	#AT_SUN_CPU
 2011

	)

100 
	#AT_SUN_EMUL_ENTRY
 2012

	)

101 
	#AT_SUN_EMUL_EXECFD
 2013

	)

108 
	#AT_SUN_EXECNAME
 2014

	)

110 
	#AT_SUN_MMU
 2015

	)

112 #ifdef 
__˝lu•lus


	@/usr/include/sys/condvar.h

14 #i‚de‡
_SYS_CONDVAR_H


15 
	#_SYS_CONDVAR_H


	)

17 #¥agm®
idít
 "@(#)condvar.h 1.11 00/03/05 SMI"

19 #i‚def 
_ASM


20 
	~<sys/ty≥s.h
>

21 
	~<sys/time.h
>

22 #ifde‡
_KERNEL


23 
	~<sys/muãx.h
>

27 #ifdef 
__˝lu•lus


31 #i‚def 
_ASM


37 
	s_kc⁄dv¨
 {

38 
ush‹t_t
 
_›aque
;

39 } 
	tkc⁄dv¨_t
;

41 
	e
{

42 
	mCV_DEFAULT
,

43 
	mCV_DRIVER


44 } 
	tkcv_ty≥_t
;

47 #i‡
deföed
(
_KERNEL
)

53 
cv_öô
(
kc⁄dv¨_t
 *, *, 
kcv_ty≥_t
, *);

54 
cv_de°roy
(
kc⁄dv¨_t
 *);

55 
cv_waô
(
kc⁄dv¨_t
 *, 
kmuãx_t
 *);

56 
cv_waô_°›
(
kc⁄dv¨_t
 *, 
kmuãx_t
 *);

57 
˛ock_t
 
cv_timedwaô
(
kc⁄dv¨_t
 *, 
kmuãx_t
 *, clock_t);

58 
cv_waô_sig
(
kc⁄dv¨_t
 *, 
kmuãx_t
 *);

59 
˛ock_t
 
cv_timedwaô_sig
(
kc⁄dv¨_t
 *, 
kmuãx_t
 *, clock_t);

60 
cv_waô_sig_sw≠
(
kc⁄dv¨_t
 *, 
kmuãx_t
 *);

61 
cv_sig«l
(
kc⁄dv¨_t
 *);

62 
cv_brﬂdˇ°
(
kc⁄dv¨_t
 *);

63 
cv_waôu¡û_sig
(
kc⁄dv¨_t
 *, 
kmuãx_t
 *, 
time°ruc_t
 *);

69 #ifdef 
__˝lu•lus


	@/usr/include/sys/cred.h

31 #i‚de‡
_SYS_CRED_H


32 
	#_SYS_CRED_H


	)

34 #¥agm®
idít
 "@(#)cred.h 1.21 97/01/09 SMI"

36 #ifde‡
_KERNEL


37 
	~<sys/t_lock.h
>

40 #ifdef 
__˝lu•lus


50 
	s¸ed
 {

51 
uöt_t
 
¸_ªf
;

52 
uid_t
 
¸_uid
;

53 
gid_t
 
¸_gid
;

54 
uid_t
 
¸_ruid
;

55 
gid_t
 
¸_rgid
;

56 
uid_t
 
¸_suid
;

57 
gid_t
 
¸_sgid
;

58 
uöt_t
 
¸_ngroups
;

59 
gid_t
 
¸_groups
[1];

60 } 
	t¸ed_t
;

62 #ifde‡
_KERNEL


64 
	#CRED
() 
cuπhªad
->
t_¸ed


	)

66 
¥oc
;

68 
ngroups_max
;

72 
¸ed
 *
k¸ed
;

74 
¸ed_öô
();

75 
¸hﬁd
(
¸ed_t
 *);

76 
¸‰ì
(
¸ed_t
 *);

77 
¸ed_t
 *
¸gë
();

78 
¸ed_t
 *
¸c›y
(cred_t *);

79 
¸c›y_to
(
¸ed_t
 *, cred_t *);

80 
¸ed_t
 *
¸dup
(cred_t *);

81 
¸dup_to
(
¸ed_t
 *, cred_t *);

82 
¸ed_t
 *
¸gë¸ed
();

83 
¸£t
(
¥oc
 *, 
¸ed_t
 *);

84 
su£r
(
¸ed_t
 *);

85 
groupmembî
(
gid_t
, 
¸ed_t
 *);

86 
ha•ro˝îm
(
¸ed_t
 *, cred_t *);

87 
¸cmp
(
¸ed_t
 *, cred_t *);

91 #ifdef 
__˝lu•lus


	@/usr/include/sys/debug.h

8 #i‚de‡
_SYS_DEBUG_H


9 
	#_SYS_DEBUG_H


	)

11 #¥agm®
idít
 "@(#)debug.h 1.22 97/05/15 SMI"

13 
	~<sys/iß_defs.h
>

15 #ifdef 
__˝lu•lus


25 #i‡
deföed
(
__STDC__
)

26 
assÁû
(const *, const *, );

27 #i‡
DEBUG


28 
	#ASSERT
(
EX
Ë(()((EXË|| 
	`assÁû
(#EX, 
__FILE__
, 
__LINE__
)))

	)

30 
	#ASSERT
(
x
)

	)

33 
assÁû
();

34 #i‡
DEBUG


35 
	#ASSERT
(
EX
Ë(()((EXË|| 
	`assÁû
("EX", 
__FILE__
, 
__LINE__
)))

	)

37 
	#ASSERT
(
x
)

	)

44 #i‡
deföed
(
_LP64
)

45 
	#ASSERT64
(
x
) 
	`ASSERT
(x)

	)

46 
	#ASSERT32
(
x
)

	)

48 
	#ASSERT64
(
x
)

	)

49 
	#ASSERT32
(
x
) 
	`ASSERT
(x)

	)

52 #ifdef 
_KERNEL


54 
ab‹t_£quí˚_íãr
(*);

55 
debug_íãr
(*);

59 #ifde‡
MONITOR


60 
	#MONITOR
(
id
, 
w1
, 
w2
, 
w3
, 
w4
Ë
	`m⁄ô‹
(id, w1, w2, w3, w4)

	)

62 
	#MONITOR
(
id
, 
w1
, 
w2
, 
w3
, 
w4
)

	)

65 #i‡
deföed
(
DEBUG
Ë&& !deföed(
sun
)

67 
	#STATIC


	)

70 
	#STATIC
 

	)

73 #ifdef 
__˝lu•lus


	@/usr/include/sys/int_const.h

6 #i‚de‡
_SYS_INT_CONST_H


7 
	#_SYS_INT_CONST_H


	)

9 #¥agm®
idít
 "@(#)int_const.h 1.2 96/07/08 SMI"

33 
	~<sys/iß_defs.h
>

35 #ifde‡
__˝lu•lus


54 #ifde‡
__STDC__


56 
	#__CONCAT__
(
A
,
B
ËA ## B

	)

59 
	#__CONCAT__
(
A
,
B
ËA 
	)
B

62 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

63 
	#INT8_C
(
c
) (c)

	)

65 
	#INT16_C
(
c
) (c)

	)

66 
	#INT32_C
(
c
) (c)

	)

67 #ifde‡ 
_LP64


69 
	#INT64_C
(
c
) 
	`__CONCAT__
(c,
l
)

	)

71 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

73 
	#INT64_C
(
c
) 
	`__CONCAT__
(c,
Œ
)

	)

78 
	#UINT8_C
(
c
) 
	`__CONCAT__
(c,
u
)

	)

80 
	#UINT16_C
(
c
) 
	`__CONCAT__
(c,
u
)

	)

82 
	#UINT32_C
(
c
) 
	`__CONCAT__
(c,
u
)

	)

83 #ifde‡ 
_LP64


85 
	#UINT64_C
(
c
) 
	`__CONCAT__
(c,
ul
)

	)

87 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

89 
	#UINT64_C
(
c
) 
	`__CONCAT__
(c,
uŒ
)

	)

93 #ifde‡ 
_LP64


95 
	#INTMAX_C
(
c
) 
	`__CONCAT__
(c,
l
)

	)

97 
	#UINTMAX_C
(
c
) 
	`__CONCAT__
(c,
ul
)

	)

99 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

101 
	#INTMAX_C
(
c
) 
	`__CONCAT__
(c,
Œ
)

	)

103 
	#UINTMAX_C
(
c
) 
	`__CONCAT__
(c,
uŒ
)

	)

105 
	#INTMAX_C
(
c
) (c)

	)

106 
	#UINTMAX_C
(
c
) (c)

	)

110 #ifde‡
__˝lu•lus


	@/usr/include/sys/int_fmtio.h

6 #i‚de‡
_SYS_INT_FMTIO_H


7 
	#_SYS_INT_FMTIO_H


	)

9 #¥agm®
idít
 "@(#)int_fmtio.h 1.2 96/07/08 SMI"

38 
	~<sys/iß_defs.h
>

40 #ifde‡
__˝lu•lus


71 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

72 
	#PRId8
 "d"

	)

74 
	#PRId16
 "d"

	)

75 
	#PRId32
 "d"

	)

76 #ifde‡ 
_LP64


77 
	#PRId64
 "ld"

	)

79 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

80 
	#PRId64
 "Œd"

	)

84 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

85 
	#PRIdLEAST8
 "d"

	)

87 
	#PRIdLEAST16
 "d"

	)

88 
	#PRIdLEAST32
 "d"

	)

89 #ifde‡ 
_LP64


90 
	#PRIdLEAST64
 "ld"

	)

92 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

93 
	#PRIdLEAST64
 "Œd"

	)

97 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

98 
	#PRIi8
 "i"

	)

100 
	#PRIi16
 "i"

	)

101 
	#PRIi32
 "i"

	)

102 #ifde‡ 
_LP64


103 
	#PRIi64
 "li"

	)

105 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

106 
	#PRIi64
 "Œi"

	)

110 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

111 
	#PRIiLEAST8
 "i"

	)

113 
	#PRIiLEAST16
 "i"

	)

114 
	#PRIiLEAST32
 "i"

	)

115 #ifde‡ 
_LP64


116 
	#PRIiLEAST64
 "li"

	)

118 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

119 
	#PRIiLEAST64
 "Œi"

	)

123 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

124 
	#PRIo8
 "o"

	)

126 
	#PRIo16
 "o"

	)

127 
	#PRIo32
 "o"

	)

128 #ifde‡ 
_LP64


129 
	#PRIo64
 "lo"

	)

131 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

132 
	#PRIo64
 "Œo"

	)

136 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

137 
	#PRIoLEAST8
 "o"

	)

139 
	#PRIoLEAST16
 "o"

	)

140 
	#PRIoLEAST32
 "o"

	)

141 #ifde‡ 
_LP64


142 
	#PRIoLEAST64
 "lo"

	)

144 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

145 
	#PRIoLEAST64
 "Œo"

	)

149 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

150 
	#PRIx8
 "x"

	)

152 
	#PRIx16
 "x"

	)

153 
	#PRIx32
 "x"

	)

154 #ifde‡ 
_LP64


155 
	#PRIx64
 "lx"

	)

157 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

158 
	#PRIx64
 "Œx"

	)

162 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

163 
	#PRIxLEAST8
 "x"

	)

165 
	#PRIxLEAST16
 "x"

	)

166 
	#PRIxLEAST32
 "x"

	)

167 #ifde‡ 
_LP64


168 
	#PRIxLEAST64
 "lx"

	)

170 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

171 
	#PRIxLEAST64
 "Œx"

	)

175 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

176 
	#PRIX8
 "X"

	)

178 
	#PRIX16
 "X"

	)

179 
	#PRIX32
 "X"

	)

180 #ifde‡ 
_LP64


181 
	#PRIX64
 "lX"

	)

183 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

184 
	#PRIX64
 "ŒX"

	)

188 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

189 
	#PRIXLEAST8
 "X"

	)

191 
	#PRIXLEAST16
 "X"

	)

192 
	#PRIXLEAST32
 "X"

	)

193 #ifde‡ 
_LP64


194 
	#PRIXLEAST64
 "lX"

	)

196 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

197 
	#PRIXLEAST64
 "ŒX"

	)

204 
	#PRIu8
 "u"

	)

205 
	#PRIu16
 "u"

	)

206 
	#PRIu32
 "u"

	)

207 #ifde‡ 
_LP64


208 
	#PRIu64
 "lu"

	)

210 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

211 
	#PRIu64
 "Œu"

	)

215 
	#PRIuLEAST8
 "u"

	)

216 
	#PRIuLEAST16
 "u"

	)

217 
	#PRIuLEAST32
 "u"

	)

218 #ifde‡ 
_LP64


219 
	#PRIuLEAST64
 "lu"

	)

221 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

222 
	#PRIuLEAST64
 "Œu"

	)

229 
	#SCNd16
 "hd"

	)

230 
	#SCNd32
 "d"

	)

231 #ifde‡ 
_LP64


232 
	#SCNd64
 "ld"

	)

234 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

235 
	#SCNd64
 "Œd"

	)

239 
	#SCNi16
 "hi"

	)

240 
	#SCNi32
 "i"

	)

241 #ifde‡ 
_LP64


242 
	#SCNi64
 "li"

	)

244 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

245 
	#SCNi64
 "Œi"

	)

249 
	#SCNo16
 "ho"

	)

250 
	#SCNo32
 "o"

	)

251 #ifde‡ 
_LP64


252 
	#SCNo64
 "lo"

	)

254 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

255 
	#SCNo64
 "Œo"

	)

259 
	#SCNu16
 "hu"

	)

260 
	#SCNu32
 "u"

	)

261 #ifde‡ 
_LP64


262 
	#SCNu64
 "lu"

	)

264 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

265 
	#SCNu64
 "Œu"

	)

269 
	#SCNx16
 "hx"

	)

270 
	#SCNx32
 "x"

	)

271 #ifde‡ 
_LP64


272 
	#SCNx64
 "lx"

	)

274 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

275 
	#SCNx64
 "Œx"

	)

282 #ifde‡ 
_LP64


283 
	#PRIdMAX
 "ld"

	)

284 
	#PRIoMAX
 "lo"

	)

285 
	#PRIxMAX
 "lx"

	)

286 
	#PRIuMAX
 "lu"

	)

288 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

289 
	#PRIdMAX
 "Œd"

	)

290 
	#PRIoMAX
 "Œo"

	)

291 
	#PRIxMAX
 "Œx"

	)

292 
	#PRIuMAX
 "Œu"

	)

294 
	#PRIdMAX
 "d"

	)

295 
	#PRIoMAX
 "o"

	)

296 
	#PRIxMAX
 "x"

	)

297 
	#PRIuMAX
 "u"

	)

301 #ifde‡ 
_LP64


302 
	#SCNiMAX
 "li"

	)

303 
	#SCNdMAX
 "ld"

	)

304 
	#SCNoMAX
 "lo"

	)

305 
	#SCNxMAX
 "lx"

	)

307 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

308 
	#SCNiMAX
 "Œi"

	)

309 
	#SCNdMAX
 "Œd"

	)

310 
	#SCNoMAX
 "Œo"

	)

311 
	#SCNxMAX
 "Œx"

	)

313 
	#SCNiMAX
 "i"

	)

314 
	#SCNdMAX
 "d"

	)

315 
	#SCNoMAX
 "o"

	)

316 
	#SCNxMAX
 "x"

	)

320 #ifde‡
__˝lu•lus


	@/usr/include/sys/int_limits.h

6 #i‚de‡
_SYS_INT_LIMITS_H


7 
	#_SYS_INT_LIMITS_H


	)

9 #¥agm®
idít
 "@(#)int_limits.h 1.6 99/08/06 SMI"

44 
	~<sys/iß_defs.h
>

46 #ifde‡
__˝lu•lus


70 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

71 
	#INT8_MAX
 (127)

	)

73 
	#INT16_MAX
 (32767)

	)

74 
	#INT32_MAX
 (2147483647)

	)

75 #i‡
deföed
(
_LP64
Ë|| (
__STDC__
 - 0 =0 && !deföed(
_NO_LONGLONG
))

76 
	#INT64_MAX
 (9223372036854775807LL)

	)

79 
	#UINT8_MAX
 (255U)

	)

80 
	#UINT16_MAX
 (65535U)

	)

81 
	#UINT32_MAX
 (4294967295U)

	)

82 #i‡
deföed
(
_LP64
Ë|| (
__STDC__
 - 0 =0 && !deföed(
_NO_LONGLONG
))

83 
	#UINT64_MAX
 (18446744073709551615ULL)

	)

86 #ifde‡
INT64_MAX


87 
	#INTMAX_MAX
 
INT64_MAX


	)

89 
	#INTMAX_MAX
 
INT32_MAX


	)

92 #ifde‡
UINT64_MAX


93 
	#UINTMAX_MAX
 
UINT64_MAX


	)

95 
	#UINTMAX_MAX
 
UINT32_MAX


	)

98 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

99 
	#INT_LEAST8_MAX
 
INT8_MAX


	)

101 
	#INT_LEAST16_MAX
 
INT16_MAX


	)

102 
	#INT_LEAST32_MAX
 
INT32_MAX


	)

103 #ifde‡
INT64_MAX


104 
	#INT_LEAST64_MAX
 
INT64_MAX


	)

111 
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)

112 
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)

113 
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)

114 #ifde‡
UINT64_MAX


115 
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)

124 
	#INTPTR_MAX


	)

125 
	#UINTPTR_MAX


	)

132 #i‡
deföed
(
__EXTENSIONS__
) || \

133 (!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
))

135 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

136 
	#INT8_MIN
 (-128)

	)

138 
	#INT16_MIN
 (-32767-1)

	)

139 
	#INT32_MIN
 (-2147483647-1)

	)

140 #i‡
deföed
(
_LP64
Ë|| (
__STDC__
 - 0 =0 && !deföed(
_NO_LONGLONG
))

141 
	#INT64_MIN
 (-9223372036854775807LL-1)

	)

144 #ifde‡
INT64_MIN


145 
	#INTMAX_MIN
 
INT64_MIN


	)

147 
	#INTMAX_MIN
 
INT32_MIN


	)

150 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

151 
	#INT_LEAST8_MIN
 
INT8_MIN


	)

153 
	#INT_LEAST16_MIN
 
INT16_MIN


	)

154 
	#INT_LEAST32_MIN
 
INT32_MIN


	)

155 #ifde‡
INT64_MIN


156 
	#INT_LEAST64_MIN
 
INT64_MIN


	)

161 #ifde‡
__˝lu•lus


	@/usr/include/sys/iso/signal_iso.h

25 #i‚de‡
_SYS_SIGNAL_ISO_H


26 
	#_SYS_SIGNAL_ISO_H


	)

28 #¥agm®
idít
 "@(#)signal_iso.h 1.1 99/08/09 SMI"

30 
	~<sys/uni°d.h
>

32 #ifdef 
__˝lu•lus


36 
	#SIGHUP
 1

	)

37 
	#SIGINT
 2

	)

38 
	#SIGQUIT
 3

	)

39 
	#SIGILL
 4

	)

40 
	#SIGTRAP
 5

	)

41 
	#SIGIOT
 6

	)

42 
	#SIGABRT
 6

	)

43 
	#SIGEMT
 7

	)

44 
	#SIGFPE
 8

	)

45 
	#SIGKILL
 9

	)

46 
	#SIGBUS
 10

	)

47 
	#SIGSEGV
 11

	)

48 
	#SIGSYS
 12

	)

49 
	#SIGPIPE
 13

	)

50 
	#SIGALRM
 14

	)

51 
	#SIGTERM
 15

	)

52 
	#SIGUSR1
 16

	)

53 
	#SIGUSR2
 17

	)

54 
	#SIGCLD
 18

	)

55 
	#SIGCHLD
 18

	)

56 
	#SIGPWR
 19

	)

57 
	#SIGWINCH
 20

	)

58 
	#SIGURG
 21

	)

59 
	#SIGPOLL
 22

	)

60 
	#SIGIO
 
SIGPOLL


	)

61 
	#SIGSTOP
 23

	)

62 
	#SIGTSTP
 24

	)

63 
	#SIGCONT
 25

	)

64 
	#SIGTTIN
 26

	)

65 
	#SIGTTOU
 27

	)

66 
	#SIGVTALRM
 28

	)

67 
	#SIGPROF
 29

	)

68 
	#SIGXCPU
 30

	)

69 
	#SIGXFSZ
 31

	)

70 
	#SIGWAITING
 32

	)

71 
	#SIGLWP
 33

	)

72 
	#SIGFREEZE
 34

	)

73 
	#SIGTHAW
 35

	)

74 
	#SIGCANCEL
 36

	)

75 
	#SIGLOST
 37

	)

78 
	#_SIGRTMIN
 38

	)

79 
	#_SIGRTMAX
 45

	)

80 
_sysc⁄f
();

81 
	#SIGRTMIN
 (()
	`_sysc⁄f
(
_SC_SIGRT_MIN
))

	)

82 
	#SIGRTMAX
 (()
	`_sysc⁄f
(
_SC_SIGRT_MAX
))

	)

84 #if 
deföed
(
__˝lu•lus
)

86 
	tSIG_FUNC_TYP
();

87 
SIG_FUNC_TYP
 *
	tSIG_TYP
;

88 
	#SIG_PF
 
SIG_TYP


	)

90 
	#SIG_DFL
 (
SIG_PF
)0

	)

91 
	#SIG_ERR
 (
SIG_PF
)-1

	)

92 
	#SIG_IGN
 (
SIG_PF
)1

	)

93 
	#SIG_HOLD
 (
SIG_PF
)2

	)

95 #ñif 
deföed
(
löt
)

97 
	#SIG_DFL
 ((*)())0

	)

98 
	#SIG_ERR
 ((*)())0

	)

99 
	#SIG_IGN
 ((*)())0

	)

100 
	#SIG_HOLD
 ((*)())0

	)

104 
	#SIG_DFL
 ((*)())0

	)

105 
	#SIG_ERR
 ((*)())-1

	)

106 
	#SIG_IGN
 ((*)())1

	)

107 
	#SIG_HOLD
 ((*)())2

	)

111 
	#SIG_BLOCK
 1

	)

112 
	#SIG_UNBLOCK
 2

	)

113 
	#SIG_SETMASK
 3

	)

115 
	#SIGNO_MASK
 0xFF

	)

116 
	#SIGDEFER
 0x100

	)

117 
	#SIGHOLD
 0x200

	)

118 
	#SIGRELSE
 0x400

	)

119 
	#SIGIGNORE
 0x800

	)

120 
	#SIGPAUSE
 0x1000

	)

122 #ifdef 
__˝lu•lus


	@/usr/include/sys/machlock.h

6 #i‚de‡
_SYS_MACHLOCK_H


7 
	#_SYS_MACHLOCK_H


	)

9 #¥agm®
idít
 "@(#)machlock.h 1.21 00/04/27 SMI"

11 #i‚de‡
_ASM


12 
	~<sys/ty≥s.h
>

13 
	~<sys/time.h
>

16 #ifdef 
__˝lu•lus


20 #i‚def 
_ASM


22 #ifde‡
_KERNEL


24 
lock_£t
(
lock_t
 *
Õ
);

25 
lock_åy
(
lock_t
 *
Õ
);

26 
ulock_åy
(
lock_t
 *
Õ
);

27 
lock_˛ór
(
lock_t
 *
Õ
);

28 
ulock_˛ór
(
lock_t
 *
Õ
);

29 
lock_£t_•l
(
lock_t
 *
Õ
, 
√w_pû
, 
ush‹t_t
 *
ﬁd_pû
);

30 
lock_˛ór_•lx
(
lock_t
 *
Õ
, 
s
);

34 
	#LOCK_HELD_VALUE
 0xff

	)

35 
	#LOCK_INIT_CLEAR
(
Õ
) (*÷pË0)

	)

36 
	#LOCK_INIT_HELD
(
Õ
) (*÷pË
LOCK_HELD_VALUE
)

	)

37 
	#LOCK_HELD
(
Õ
) (*(vﬁ©ûê
lock_t
 *)÷pË!0)

	)

39 
lock_t
 
	tdi•_lock_t
;

45 
	#SPIN_LOCK
(
∂
) (’lË> 
	`ù…o•l
(
LOCK_LEVEL
))

	)

53 
	#LOCK_SAMPLE_INTERVAL
(
i
) (((iË& 0xffË=0)

	)

58 #ifde‡
__STDC__


59 vﬁ©ûê
hªs_lock
;

61 
hªs_lock
;

63 
hπime_t
 
hπime_ba£
;

64 
hπime_t
 
hª°ime_adj
;

65 
˛ock_ªs
;

91 
	#CLOCK_LEVEL
 10

	)

92 
	#LOCK_LEVEL
 10

	)

93 
	#DISP_LEVEL
 (
LOCK_LEVEL
 + 1)

	)

104 
	#PTR24_LSB
 5

	)

105 
	#PTR24_MSB
 (
PTR24_LSB
 + 24)

	)

106 
	#PTR24_ALIGN
 32

	)

107 
	#PTR24_BASE
 0xe0000000

	)

109 #ifdef 
__˝lu•lus


	@/usr/include/sys/machsig.h

13 #i‚def 
_SYS_MACHSIG_H


14 
	#_SYS_MACHSIG_H


	)

16 #¥agm®
idít
 "@(#)machsig.h 1.10 99/08/15 SMI"

18 
	~<sys/„©uª_ã°s.h
>

20 #ifdef 
__˝lu•lus


36 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

38 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

39 
	~<vm/Áu…code.h
>

45 
	#ILL_ILLOPC
 1

	)

46 
	#ILL_ILLOPN
 2

	)

47 
	#ILL_ILLADR
 3

	)

48 
	#ILL_ILLTRP
 4

	)

49 
	#ILL_PRVOPC
 5

	)

50 
	#ILL_PRVREG
 6

	)

51 
	#ILL_COPROC
 7

	)

52 
	#ILL_BADSTK
 8

	)

53 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

54 
	#NSIGILL
 8

	)

61 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

62 
	#EMT_CPCOVF
 1

	)

63 
	#NSIGEMT
 1

	)

70 
	#FPE_INTDIV
 1

	)

71 
	#FPE_INTOVF
 2

	)

72 
	#FPE_FLTDIV
 3

	)

73 
	#FPE_FLTOVF
 4

	)

74 
	#FPE_FLTUND
 5

	)

75 
	#FPE_FLTRES
 6

	)

76 
	#FPE_FLTINV
 7

	)

77 
	#FPE_FLTSUB
 8

	)

78 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

79 
	#NSIGFPE
 8

	)

86 
	#SEGV_MAPERR
 1

	)

87 
	#SEGV_ACCERR
 2

	)

88 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

89 
	#NSIGSEGV
 2

	)

96 
	#BUS_ADRALN
 1

	)

97 
	#BUS_ADRERR
 2

	)

98 #i‚def 
BUS_OBJERR


99 
	#BUS_OBJERR
 3

	)

101 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

102 
	#NSIGBUS
 3

	)

107 #ifdef 
__˝lu•lus


	@/usr/include/sys/pcb.h

6 #i‚de‡
_SYS_PCB_H


7 
	#_SYS_PCB_H


	)

9 #¥agm®
idít
 "@(#)pcb.h 1.15 99/08/15 SMI"

11 
	~<sys/ªg.h
>

13 #ifdef 
__˝lu•lus


17 #i‚de‡
_ASM


18 
	sÂu_˘x
 {

19 
Âu
 
Âu_ªgs
;

20 
˝u
 *
Âu_˝u
;

21 
Âu_Êags
;

22 } 
	tÂu_˘x_t
;

24 
	spcb
 {

25 
Âu_˘x_t
 
	mpcb_Âu
;

26 
	mpcb_Êags
;

27 
dbªg£t_t
 
	mpcb_dªgs
;

28 
	mpcb_ö°r
;

29 } 
	tpcb_t
;

34 
	#DEBUG_ON
 0x01

	)

35 
	#DEBUG_PENDING
 0x02

	)

36 
	#DEBUG_MODIFIED
 0x04

	)

37 
	#INSTR_VALID
 0x08

	)

38 
	#NORMAL_STEP
 0x10

	)

39 
	#WATCH_STEP
 0x20

	)

40 
	#CPC_OVERFLOW
 0x40

	)

43 
	#FPU_EN
 0x1

	)

44 
	#FPU_VALID
 0x2

	)

45 
	#FPU_MODIFIED
 0x4

	)

47 
	#FPU_INVALID
 0x0

	)

51 #ifdef 
__˝lu•lus


	@/usr/include/sys/poll.h

13 #i‚de‡
_SYS_POLL_H


14 
	#_SYS_POLL_H


	)

16 #¥agm®
idít
 "@(#)poll.h 1.28 98/11/23 SMI"

18 #ifdef 
__˝lu•lus


26 
	spﬁlfd
 {

27 
fd
;

28 
evíts
;

29 
ªvíts
;

30 } 
	tpﬁlfd_t
;

32 
	tnfds_t
;

37 
	#POLLIN
 0x0001

	)

38 
	#POLLPRI
 0x0002

	)

39 
	#POLLOUT
 0x0004

	)

40 
	#POLLRDNORM
 0x0040

	)

41 
	#POLLWRNORM
 
POLLOUT


	)

42 
	#POLLRDBAND
 0x0080

	)

43 
	#POLLWRBAND
 0x0100

	)

45 
	#POLLNORM
 
POLLRDNORM


	)

51 
	#POLLERR
 0x0008

	)

52 
	#POLLHUP
 0x0010

	)

53 
	#POLLNVAL
 0x0020

	)

55 
	#POLLREMOVE
 0x0800

	)

57 #ifde‡
_KERNEL


63 
	#POLLRDDATA
 0x0200

	)

64 
	#POLLNOERR
 0x0400

	)

66 
	#POLLCLOSED
 0x8000

	)

70 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)

72 
	~<sys/thªad.h
>

79 
Âﬁlöfo
;

87 
	spﬁlhód
 {

88 
pﬁld©
 *
ph_li°
;

89 *
ph_∑d1
;

90 
ph_∑d2
;

91 } 
	tpﬁlhód_t
;

93 #i‡
deföed
(
_KERNEL
)

99 
pﬁlwakeup
(
pﬁlhód_t
 *, );

104 
pﬁŒock
(
pﬁlhód_t
 *, 
kmuãx_t
 *);

105 
pﬁlu∆ock
();

106 
pﬁÃñock
();

107 
pﬁl˛ónup
();

108 
pﬁlblockexô
(
Âﬁlöfo
 *);

109 
pﬁlˇche˛ón
(
Âﬁlöfo
 *, );

116 
pﬁlhód_˛ón
(
pﬁlhód_t
 *);

122 #i‡!
deföed
(
_KERNEL
)

123 #i‡
deföed
(
__STDC__
)

124 
pﬁl
(
pﬁlfd
 *, 
nfds_t
, );

126 
pﬁl
();

130 #ifdef 
__˝lu•lus


	@/usr/include/sys/proc.h

13 #i‚de‡
_SYS_PROC_H


14 
	#_SYS_PROC_H


	)

16 #¥agm®
idít
 "@(#)proc.h 1.134 00/02/14 SMI"

18 
	~<sys/time.h
>

20 
	~<sys/thªad.h
>

21 
	~<sys/¸ed.h
>

22 
	~<sys/u£r.h
>

23 
	~<sys/w©chpoöt.h
>

24 
	~<sys/timî.h
>

25 #i‡
deföed
(
i386
Ë|| deföed(
__i386
Ë|| deföed(
__ü64
)

26 
	~<sys/£gmít.h
>

28 
	~<sys/uå≠.h
>

29 
	~<sys/modñ.h
>

30 
	~<sys/ªf°r.h
>

31 
	~<sys/èsk.h
>

33 #ifdef 
__˝lu•lus


40 
	s¥of
 {

41 *
¥_ba£
;

42 
uöçå_t
 
¥_off
;

43 
size_t
 
¥_size
;

44 
uöt32_t
 
¥_sˇÀ
;

45 
¥_ßm∂es
;

54 
	s¥oc
 {

58 
vnode
 *
p_exec
;

59 
as
 *
p_as
;

60 
∂ock
 *
p_lockp
;

61 
kmuãx_t
 
p_¸lock
;

62 
¸ed
 *
p_¸ed
;

66 
p_sw≠˙t
;

67 
p_°©
;

68 
p_wcode
;

69 
ush‹t_t
 
p_pidÊag
;

70 
p_wd©a
;

71 
pid_t
 
p_µid
;

72 
¥oc
 *
p_lök
;

73 
¥oc
 *
p_∑ª¡
;

74 
¥oc
 *
p_chûd
;

75 
¥oc
 *
p_siblög
;

76 
¥oc
 *
p_psiblög
;

77 
¥oc
 *
p_siblög_ns
;

78 
¥oc
 *
p_chûd_ns
;

79 
¥oc
 *
p_√xt
;

80 
¥oc
 *
p_¥ev
;

81 
¥oc
 *
p_√xtofkö
;

82 
¥oc
 *
p_‹ph™
;

83 
¥oc
 *
p_√xt‹ph
;

84 
¥oc
 *
p_pglök
;

85 
¥oc
 *
p_µglök
;

86 
£ss
 *
p_£s•
;

87 
pid
 *
p_pidp
;

88 
pid
 *
p_pgidp
;

92 
kc⁄dv¨_t
 
p_cv
;

93 
kc⁄dv¨_t
 
p_Êag_cv
;

94 
kc⁄dv¨_t
 
p_lw≥xô
;

95 
kc⁄dv¨_t
 
p_hﬁdlwps
;

97 
ush‹t_t
 
p_∑d1
;

98 
uöt_t
 
p_Êag
;

100 
˛ock_t
 
p_utime
;

101 
˛ock_t
 
p_°ime
;

102 
˛ock_t
 
p_cutime
;

103 
˛ock_t
 
p_c°ime
;

104 
ˇddr_t
 *
p_£gac˘
;

105 
ˇddr_t
 
p_brkba£
;

106 
size_t
 
p_brksize
;

110 
k_sig£t_t
 
p_sig
;

111 
k_sig£t_t
 
p_ign‹e
;

112 
k_sig£t_t
 
p_sigöfo
;

113 
sigqueue
 *
p_sigqueue
;

114 
sigqhdr
 *
p_sigqhdr
;

115 
sigqhdr
 *
p_signhdr
;

116 
uch¨_t
 
p_°›sig
;

122 
p_fixÆignmít
;

127 
p_lw±ŸÆ
;

128 
p_lwp˙t
;

129 
p_lw¥˙t
;

130 
p_lwpwaô
;

131 
p_zomb˙t
;

132 
p_zomb_max
;

133 
id_t
 *
p_zomb_tid
;

134 
kthªad_t
 *
p_éi°
;

138 
k_sig£t_t
 
p_sigmask
;

139 
k_Êt£t_t
 
p_Êtmask
;

140 
vnode
 *
p_åa˚
;

141 
vnode
 *
p_∂i°
;

142 
kthªad_t
 *
p_agíâp
;

143 
w©ched_¨ó
 *
p_w¨ó
;

144 
ul⁄g_t
 
p_nw¨ó
;

145 
w©ched_∑ge
 *
p_w∑ge
;

146 
p_nw∑ge
;

147 
p_m≠˙t
;

149 
¥oc
 *
p_æök
;

150 
kc⁄dv¨_t
 
p_§wch™_cv
;

151 
size_t
 
p_°ksize
;

155 
hπime_t
 
p_m°¨t
;

156 
hπime_t
 
p_mãrm
;

157 
hπime_t
 
p_mÃól
;

158 
hπime_t
 
p_ac˘
[
NMSTATES
];

159 
Ãußge
 
p_ru
;

160 
ôimîvÆ
 
p_Ωrof_timî
;

161 
timeout_id_t
 
p_Ωrof_timîid
;

162 
uöt_t
 
p_defun˘
;

167 
kmuãx_t
 
p_pÊock
;

168 
¥of
 
p_¥of
;

173 
u£r
 
p_u£r
;

178 
kthªad_t
 *
p_£rvî_thªads
;

179 
do‹_node
 *
p_do‹_li°
;

180 
do‹_node
 *
p_uƒef_li°
;

181 
kc⁄dv¨_t
 
p_£rvî_cv
;

182 
p_uƒef_thªad
;

187 
uch¨_t
 
p_äf_Êags
;

192 
ˇddr_t
 
p_audô_d©a
;

193 
kthªad_t
 *
p_a¶w±p
;

194 #i‡
deföed
(
i386
Ë|| deföed(
__i386
Ë|| deföed(
__ü64
)

198 
kmuãx_t
 
p_ldéock
;

199 
£g_desc
 *
p_ldt
;

200 
£g_desc
 
p_ldt_desc
;

201 
p_ldéimô
;

203 
size_t
 
p_swrss
;

204 
aio
 *
p_aio
;

205 
ôimî
 **
p_ôimî
;

206 
k_sig£t_t
 
p_nŸifsigs
;

207 
kc⁄dv¨_t
 
p_nŸifcv
;

208 
timeout_id_t
 
p_Æ¨mid
;

209 
uöt_t
 
p_sc_unblocked
;

210 
vnode
 *
p_sc_do‹
;

211 
ˇddr_t
 
p_u§°ack
;

212 
uöt_t
 
p_°k¥Ÿ
;

213 
modñ_t
 
p_modñ
;

214 
lwpch™_d©a
 *
p_l˝
;

218 
kmuãx_t
 
p_l˝_muãxöôlock
;

219 
uå≠_h™dÀr_t
 *
p_uå≠s
;

220 
ªf°r_t
 *
p_c‹efûe
;

221 #i‡
deföed
(
__ü64
)

222 
ˇddr_t
 
p_up°ack
;

223 
size_t
 
p_up°ksize
;

224 
uch¨_t
 
p_iß
;

226 *
p_r˚
;

227 
èsk
 *
p_èsk
;

228 
¥oc
 *
p_èsk¥ev
;

229 
¥oc
 *
p_èsk√xt
;

230 } 
	t¥oc_t
;

232 #i‡
deföed
(
__ü64
)

236 
	#_ISA_IA32
 0

	)

237 
	#_ISA_IA64
 1

	)

239 
	#is_ü32_¥o˚ss
(
p
) (’)->
p_iß
 =
_ISA_IA32
)

	)

242 
	#PROC_T


	)

246 
¥oc_t
 *
¥a˘ive
;

250 
¥oc_t
 *
¥oc_sched
;

251 
¥oc_t
 *
¥oc_öô
;

252 
¥oc_t
 *
¥oc_∑geout
;

253 
¥oc_t
 *
¥oc_fsÊush
;

262 
	supcou¡
 {

263 
upcou¡
 *
	gup_√xt
;

264 
uid_t
 
	gup_uid
;

265 
uöt_t
 
	gup_cou¡
;

270 
	spid
 {

271 
	gpid_¥öa˘ive
 :1;

272 
	gpid_pg‹ph™ed
 :1;

273 
	gpid_∑ddög
 :6;

274 
	gpid_¥¶Ÿ
 :24;

275 
pid_t
 
	gpid_id
;

276 
¥oc
 *
	gpid_pglök
;

277 
pid
 *
	gpid_lök
;

278 
uöt_t
 
	gpid_ªf
;

281 
	#p_pgΩ
 
p_pgidp
->
pid_id


	)

282 
	#p_pid
 
p_pidp
->
pid_id


	)

283 
	#p_¶Ÿ
 
p_pidp
->
pid_¥¶Ÿ


	)

284 
	#p_dëached
 
p_pgidp
->
pid_pg‹ph™ed


	)

286 
	#PID_HOLD
(
pidp
) 
	`ASSERT
(
	`MUTEX_HELD
(&
pidlock
)); \

287 ++(
pidp
)->
pid_ªf
;

	)

288 
	#PID_RELE
(
pidp
) 
	`ASSERT
(
	`MUTEX_HELD
(&
pidlock
)); \

289 (
pidp
)->
pid_ªf
 > 1 ? \

290 --(
pidp
)->
pid_ªf
 : 
	`pid_ªÀ
’idp);

	)

296 
	s∂ock
 {

297 
kmuãx_t
 
	g∂_lock
;

299 
	#p_lock
 
p_lockp
->
∂_lock


	)

301 
¥oc_t
 
p0
;

302 
∂ock
 
p0lock
;

303 
pid
 
pid0
;

307 
	#SSLEEP
 1

	)

308 
	#SRUN
 2

	)

309 
	#SZOMB
 3

	)

310 
	#SSTOP
 4

	)

311 
	#SIDL
 5

	)

312 
	#SONPROC
 6

	)

315 
	#CLDPEND
 0x0001

	)

316 
	#CLDCONT
 0x0002

	)

322 
	#SSYS
 0x00000001

	)

323 
	#STRC
 0x00000002

	)

324 
	#SLOAD
 0x00000008

	)

325 
	#SLOCK
 0x00000010

	)

326 
	#SPREXEC
 0x00000020

	)

327 
	#SPROCTR
 0x00000040

	)

328 
	#SPRFORK
 0x00000080

	)

329 
	#SKILLED
 0x00000100

	)

330 
	#SULOAD
 0x00000200

	)

331 
	#SRUNLCL
 0x00000400

	)

332 
	#SBPTADJ
 0x00000800

	)

333 
	#SKILLCL
 0x00001000

	)

334 
	#SOWEUPC
 0x00002000

	)

335 
	#SEXECED
 0x00004000

	)

336 
	#SPASYNC
 0x00008000

	)

337 
	#SJCTL
 0x00010000

	)

338 
	#SNOWAIT
 0x00020000

	)

339 
	#SVFORK
 0x00040000

	)

340 
	#SVFWAIT
 0x00080000

	)

341 
	#EXITLWPS
 0x00100000

	)

342 
	#HOLDFORK
 0x00200000

	)

343 
	#SWAITSIG
 0x00400000

	)

344 
	#HOLDFORK1
 0x00800000

	)

345 
	#COREDUMP
 0x01000000

	)

346 
	#SMSACCT
 0x02000000

	)

347 
	#ASLWP
 0x04000000

	)

349 
	#SPRLOCK
 0x08000000

	)

350 
	#NOCD
 0x10000000

	)

351 
	#HOLDWATCH
 0x20000000

	)

352 
	#SMSFORK
 0x40000000

	)

355 
	#PTOU
(
p
) (&’)->
p_u£r
)

	)

357 
	#åacög
(
p
, 
sig
) (
	`sigismembî
(&’)->
p_sigmask
, sig))

	)

361 
	#ISSIG
(
t
, 
why
) 
	`ISSIG_FAST
—, 
	`âﬁwp
—), 
	`â›roc
—), why)

	)

371 
	#ISSIG_FAST
(
t
, 
lwp
, 
p
, 
why
) \

372 (
	`ISSIG_PENDING
(
t
, 
lwp
, 
p
Ë&& 
	`issig
(
why
))

	)

374 
	#ISSIG_PENDING
(
t
, 
lwp
, 
p
) \

375 ((
lwp
)->
lwp_cursig
 | \

376 (
p
)->
p_sig
.
__sigbôs
[0] | \

377 (
p
)->
p_sig
.
__sigbôs
[1] | \

378 (
t
)->
t_sig
.
__sigbôs
[0] | \

379 (
t
)->
t_sig
.
__sigbôs
[1] | \

380 (
p
)->
p_°›sig
 | \

381 ((
t
)->
t_¥oc_Êag
 & (
TP_PRSTOP
|
TP_HOLDLWP
|
TP_CHKPT
|
TP_PAUSE
)) | \

382 ((
p
)->
p_Êag
 & (
EXITLWPS
|
SKILLED
|
HOLDFORK1
|
HOLDWATCH
)))

	)

384 
	#ISSTOP
(
sig
) (
u
.
u_sig«l
[sig-1] =
SIG_DFL
 && \

385 
	`sigismembî
(&
°›deÁu…
, 
sig
))

	)

387 
	#ISHOLD
(
p
) (’)->
p_Êag
 & 
HOLDFORK
)

	)

389 
	#MUSTRETURN
(
p
, 
t
) (
	`ISHOLD
’Ë| (t)->
t_a˘ivefd
.
a_°Æe
)

	)

394 
	#ISANOMALOUS
(
p
) (
cuπhªad
->
t_a°Êag
 | \

395 ((
p
)->
p_Êag
 & (
EXITLWPS
|
SKILLED
|
HOLDFORK
|
HOLDFORK1
|
HOLDWATCH
)) | \

396 (
cuπhªad
->
t_¥oc_Êag
 & 
TP_HOLDLWP
))

	)

400 
	#FORREAL
 0

	)

401 
	#JUSTLOOKING
 1

	)

404 
	#SUSPEND_NORMAL
 0

	)

405 
	#SUSPEND_PAUSE
 1

	)

408 
	#NOCLASS
 (-1)

	)

410 #ifde‡
_KERNEL


414 
¥ofû_tick
(
uöçå_t
);

418 
ˇddr_t
 
födvaddr
(
¥oc_t
 *);

419 
√w¥oc
((*)(), 
id_t
, );

420 
vfwaô
(
pid_t
);

421 
‰ì¥oc
(
¥oc_t
 *);

422 
£åun
(
kthªad_t
 *);

423 
£åun_locked
(
kthªad_t
 *);

424 
exô
(, );

425 
ªlvm
();

426 
add_ns
(
¥oc_t
 *,Öroc_t *);

427 
dñëe_ns
(
¥oc_t
 *,Öroc_t *);

428 
upcou¡_öc
(
uid_t
);

429 
upcou¡_dec
(
uid_t
);

430 
upcou¡_gë
(
uid_t
);

431 #i‡
deföed
(
i386
Ë|| deföed(
__i386
Ë|| deföed(
__ü64
)

432 
ldt_dup
(
¥oc_t
 *,Öroc_t *);

435 
sig˛d
(
¥oc_t
 *, 
sigqueue_t
 *);

436 
sig˛d_dñëe
(
k_sigöfo_t
 *);

437 
sig˛d_ªpo°
();

438 
fsig
(
k_sig£t_t
 *, 
kthªad_t
 *);

439 
psig
();

440 
°›
(, );

441 
°›_⁄_Áu…
(
uöt_t
, 
k_sigöfo_t
 *);

442 
issig
();

443 
job°›≥d
(
¥oc_t
 *);

444 
psig«l
(
¥oc_t
 *, );

445 
tsig«l
(
kthªad_t
 *, );

446 
sigt›roc
(
¥oc_t
 *, 
kthªad_t
 *, );

447 
å≠sig
(
k_sigöfo_t
 *, );

448 
ót_sig«l
(
kthªad_t
 *
t
, 
sig
);

450 
pid_£tmö
();

451 
pid_t
 
pid_assign
(
¥oc_t
 *);

452 
pid_ªÀ
(
pid
 *);

453 
pid_exô
(
¥oc_t
 *);

454 
¥oc_íåy_‰ì
(
pid
 *);

455 
¥oc_t
 *
¥föd
(
pid_t
);

456 
¥oc_t
 *
pgföd
(
pid_t
);

457 
¥oc_t
 *
•æock
(
pid_t
);

458 
•ru∆ock
(
¥oc_t
 *);

459 
pid_öô
();

460 
¥oc_t
 *
pid_íåy
();

461 
pid_¶Ÿ
(
¥oc_t
 *);

462 
sig«l
(
pid_t
, );

463 
¥sig«l
(
pid
 *, );

465 
pgsig«l
(
pid
 *, );

466 
pgjoö
(
¥oc_t
 *, 
pid
 *);

467 
pg¸óã
(
¥oc_t
 *);

468 
pgexô
(
¥oc_t
 *);

469 
pgdëach
(
¥oc_t
 *);

470 
pgmembîs
(
pid_t
);

472 
öô_m°©e
(
kthªad_t
 *, );

473 
√w_m°©e
(
kthªad_t
 *, );

474 
ª°‹e_m°©e
(
kthªad_t
 *);

475 
ãrm_m°©e
(
kthªad_t
 *);

476 
e°im©e_mßc˘
(
kthªad_t
 *, 
hπime_t
);

477 
dißbÀ_mßc˘
(
¥oc_t
 *);

479 
uöt_t
 
˝u_deˇy
(uöt_t, 
˛ock_t
);

480 
uöt_t
 
˝u_grow
(uöt_t, 
˛ock_t
);

482 
£t_¥oc_¥e_sys
(
¥oc_t
 *
p
);

483 
£t_¥oc_po°_sys
(
¥oc_t
 *
p
);

484 
£t_¥oc_sys
(
¥oc_t
 *
p
);

485 
£t_¥oc_a°
(
¥oc_t
 *
p
);

486 
£t_Æl_¥oc_sys
();

490 
kthªad_t
 *
thªad_¸óã
(

491 
ˇddr_t
 
°k
,

492 
size_t
 
°ksize
,

493 (*
¥oc
)(),

494 
ˇddr_t
 
¨g
,

495 
size_t
 
Àn
,

496 
¥oc_t
 *
µ
,

497 
°©e
,

498 
¥i
);

499 
thªad_exô
();

500 
thªad_de°roy
(
kthªad_t
 *);

501 
thªad_‰ì
(
kthªad_t
 *);

502 
ª≠î
();

503 
ö°Æl˘x
(
kthªad_t
 *, *, (*)(), (*)(),

505 
ªmove˘x
(
kthªad_t
 *, *, (*)(), (*)(),

507 
ßve˘x
(
kthªad_t
 *);

508 
ª°‹e˘x
(
kthªad_t
 *);

509 
f‹k˘x
(
kthªad_t
 *, kthread_t *);

510 
lwp_¸óã˘x
(
kthªad_t
 *, kthread_t *);

511 
‰ì˘x
(
kthªad_t
 *, );

512 
kthªad_t
 *
thªad_u≈ö
();

513 
ªÀa£_öãºu±
();

514 
thªad_¸óã_öå
(
˝u
 *);

515 
thªad_öô
();

516 
thªad_lﬂd
(
kthªad_t
 *, (*)(), 
ˇddr_t
, 
size_t
);

518 
tsd_¸óã
(
uöt_t
 *, (*)(*));

519 
tsd_de°roy
(
uöt_t
 *);

520 *
tsd_gë¸óã
(
uöt_t
 *, (*)(*), *(*)());

521 *
tsd_gë
(
uöt_t
);

522 
tsd_£t
(
uöt_t
, *);

523 
tsd_exô
();

524 *
tsd_agít_gë
(
kthªad_t
 *, 
uöt_t
);

525 
tsd_agít_£t
(
kthªad_t
 *, 
uöt_t
, *);

529 
klwp_t
 *
lwp_¸óã
(

530 (*
¥oc
)(),

531 
ˇddr_t
 
¨g
,

532 
size_t
 
Àn
,

533 
¥oc_t
 *
p
,

534 
°©e
,

535 
¥i
,

536 
k_sig£t_t
 
smask
,

537 
cid
);

538 
lwp_¸óã_d⁄e
(
kthªad_t
 *);

539 
lwp_exô
();

540 
lwp_˛ónup
();

541 
lwp_su•íd
(
kthªad_t
 *, *);

542 
lwp_c⁄töue
(
kthªad_t
 *);

543 
hﬁdlwp
();

544 
°›lwp
();

545 
hﬁdlwps
();

546 
hﬁdw©ch
();

547 
pokñwps
(
¥oc_t
 *);

548 
c⁄töuñwps
(
¥oc_t
 *);

549 
exôlwps
();

550 
klwp_t
 *
f‹klwp
(klwp_à*, 
¥oc_t
 *);

551 
sigishñd
(
¥oc_t
 *, );

552 
sigwaôög_£nd
(
kmuãx_t
 *);

553 
lwp_lﬂd
(
klwp_t
 *, 
gªg£t_t
);

554 
lwp_£åvÆ
(
klwp_t
 *, , );

555 
lwp_f‹kªgs
(
klwp_t
 *, klwp_t *);

556 
lwp_‰ìªgs
(
klwp_t
 *, );

557 
ˇddr_t
 
lwp_°k_öô
(
klwp_t
 *, caddr_t);

558 
lwp_°k_föi
(
klwp_t
 *);

559 
lwp_πt
();

565 
sigq‰ì
(
¥oc_t
 *);

566 
sigöfo‰ì
(
sigqueue_t
 *);

567 
sigdeq
(
¥oc_t
 *, 
kthªad_t
 *, , 
sigqueue_t
 **);

568 
sigdñq
(
¥oc_t
 *, 
kthªad_t
 *, );

569 
sigaddq
(
¥oc_t
 *, 
kthªad_t
 *, 
k_sigöfo_t
 *, );

570 
sigaddqa
(
¥oc_t
 *, 
kthªad_t
 *, 
sigqueue_t
 *);

571 
sigdupq
(
¥oc_t
 *,Öroc_t *);

572 
sigqueue_t
 *
sigqÆloc
(
sigqhdr_t
 **);

573 
sigqhdøŒoc
(
sigqhdr_t
 **, , );

574 
sigqhdr‰ì
(
sigqhdr_t
 **);

575 
sigqªl
(
sigqueue_t
 *);

576 
sigqueue_t
 *
sig≠≥nd
(
k_sig£t_t
 *, sigqueue_t *,

577 
k_sig£t_t
 *, 
sigqueue_t
 *);

578 
sigqueue_t
 *
sig¥ïíd
(
k_sig£t_t
 *, sigqueue_t *,

579 
k_sig£t_t
 *, 
sigqueue_t
 *);

580 
csigtimedwaô
(
sig£t_t
 *, 
sigöfo_t
 *, 
time•ec
 *, *);

581 
wöfo
(
¥oc_t
 *, 
k_sigöfo_t
 *, );

582 
w°©
(, );

583 
£ndsig
(, 
k_sigöfo_t
 *, (*)());

584 #ifde‡
_SYSCALL32_IMPL


585 
£ndsig32
(, 
k_sigöfo_t
 *, (*)());

590 #ifdef 
__˝lu•lus


	@/usr/include/sys/regset.h

13 #i‚def 
_SYS_REGSET_H


14 
	#_SYS_REGSET_H


	)

16 #¥agm®
idít
 "@(#)regset.h 1.5 99/05/04 SMI"

24 
	~<sys/ªg.h
>

	@/usr/include/sys/rwlock.h

6 #i‚de‡
_SYS_RWLOCK_H


7 
	#_SYS_RWLOCK_H


	)

9 #¥agm®
idít
 "@(#)rwlock.h 1.9 98/02/18 SMI"

15 
	~<sys/ty≥s.h
>

17 #ifdef 
__˝lu•lus


21 #i‚de‡
_ASM


23 
	e
{

24 
RW_DRIVER
 = 2,

25 
RW_DEFAULT
 = 4

26 } 
	tkrw_ty≥_t
;

28 
	e
{

29 
	mRW_WRITER
,

30 
	mRW_READER


31 } 
	tkrw_t
;

33 
	s_krwlock
 {

34 *
	m_›aque
[1];

35 } 
	tkrwlock_t
;

37 #i‡
deföed
(
_KERNEL
)

39 
	#RW_READ_HELD
(
x
) (
	`rw_ªad_hñd
((x)))

	)

40 
	#RW_WRITE_HELD
(
x
) (
	`rw_wrôe_hñd
((x)))

	)

41 
	#RW_LOCK_HELD
(
x
) (
	`rw_lock_hñd
((x)))

	)

42 
	#RW_ISWRITER
(
x
) (
	`rw_iswrôî
(x))

	)

44 
rw_öô
(
krwlock_t
 *, *, 
krw_ty≥_t
, *);

45 
rw_de°roy
(
krwlock_t
 *);

46 
rw_íãr
(
krwlock_t
 *, 
krw_t
);

47 
rw_åyíãr
(
krwlock_t
 *, 
krw_t
);

48 
rw_exô
(
krwlock_t
 *);

49 
rw_downgøde
(
krwlock_t
 *);

50 
rw_åyupgøde
(
krwlock_t
 *);

51 
rw_ªad_hñd
(
krwlock_t
 *);

52 
rw_wrôe_hñd
(
krwlock_t
 *);

53 
rw_lock_hñd
(
krwlock_t
 *);

54 
rw_ªad_locked
(
krwlock_t
 *);

55 
rw_iswrôî
(
krwlock_t
 *);

56 
_kthªad
 *
rw_ow√r
(
krwlock_t
 *);

62 #ifdef 
__˝lu•lus


	@/usr/include/sys/semaphore.h

6 #i‚de‡
_SYS_SEMAPHORE_H


7 
	#_SYS_SEMAPHORE_H


	)

9 #¥agm®
idít
 "@(#)semaphore.h 1.5 98/02/01 SMI"

15 #i‚def 
_ASM


17 #ifde‡
_KERNEL


18 
	~<sys/thªad.h
>

21 #ifdef 
__˝lu•lus


25 
	e
{

26 
SEMA_DEFAULT
,

27 
SEMA_DRIVER


28 } 
	tk£ma_ty≥_t
;

30 
	s_k£ma
 {

31 * 
_›aque
[2];

32 } 
	tk£ma_t
;

34 #i‡
deföed
(
_KERNEL
)

36 
	#SEMA_HELD
(
x
) (
	`£ma_hñd
((x)))

	)

38 
£ma_öô
(
k£ma_t
 *, 
uöt32_t
, *, 
k£ma_ty≥_t
, *);

39 
£ma_de°roy
(
k£ma_t
 *);

40 
£ma_p
(
k£ma_t
 *);

41 
£ma_p_sig
(
k£ma_t
 *);

42 
£ma_v
(
k£ma_t
 *);

43 
£ma_åyp
(
k£ma_t
 *);

44 
£ma_hñd
(
k£ma_t
 *);

48 #ifdef 
__˝lu•lus


	@/usr/include/sys/strft.h

6 #i‚de‡
_SYS_STRFT_H


7 
	#_SYS_STRFT_H


	)

9 #¥agm®
idít
 "@(#)strft.h 1.1 99/07/30 SMI"

19 #ifdef 
__˝lu•lus


28 
	~<sys/time.h
>

30 
	#tdñè_t_sz
 12

	)

31 
hπime_t
 
	ttdñè_t
 [
tdñè_t_sz
][2];

33 
hπime_t
 
	tts_t
;

35 
ts_t
 
_t°amp_c
;

38 
	#öôt°amp
(Ë
_t°amp_c
 = 0; { \

39 }

	)

41 
	#t°amp
(Ë
	`gëhπime
()

	)

43 
	#tdñè
(
td
, 
tv
) \

44 
	`tdñè2
(
td
, 
	`t°amp
(), 
tv
)

	)

46 
	#tdñèts
(
td
, 
tv
) { \

47 
ts_t
 
_td
 = 
td
; \

49 
td
 = 
	`t°amp
(); \

50 
	`tdñè2
(
_td
, 
td
, 
tv
) \

51 
td
 = 
	`t°amp
(); \

52 }

	)

54 
	#tdñè2
(
td1
, 
td2
, 
tv
) { \

55 
ts_t
 
_tdñè
 = 
td2
 - 
td1
 - 
_t°amp_c
; \

56 
_ix
; \

58 
_tdñè
 > 0) { \

59 
_tdñè
 < 10ll) \

60 
_ix
 = 0; \

61 
_tdñè
 < 100ll) \

62 
_ix
 = 1; \

63 
_tdñè
 < 1000ll) \

64 
_ix
 = 2; \

65 
_tdñè
 < 10000ll) \

66 
_ix
 = 3; \

67 
_tdñè
 < 100000ll) \

68 
_ix
 = 4; \

69 
_tdñè
 < 1000000ll) \

70 
_ix
 = 5; \

71 
_tdñè
 < 10000000ll) \

72 
_ix
 = 6; \

73 
_tdñè
 < 100000000ll) \

74 
_ix
 = 7; \

75 
_tdñè
 < 1000000000ll) \

76 
_ix
 = 8; \

77 
_tdñè
 < 10000000000ll) \

78 
_ix
 = 9; \

79 
_tdñè
 < 100000000000ll) \

80 
_ix
 = 10; \

82 
_ix
 = 11; \

83 
tv
[
_ix
][0]++; \

84 
tv
[
_ix
][1] +
_tdñè
; \

86 
tv
[0][0]++; \

87 }

	)

89 
	#¥ötdñè
(
wh©
, 
tv
) { \

90 
_ix
; \

91 
_ns
 = 10; \

92 
_toc
 = 0ll; \

93 
_tŸ
 = 0ll; \

94 
_n
, 
_∆
; \

95 *
_t
 = "< N.NNNNNNNNN"; \

97 
_ix
 = 0; _ix < 
tdñè_t_sz
; _ix++) { \

98 
_toc
 +
tv
[
_ix
][0]; \

99 
_tŸ
 +
tv
[
_ix
][1]; \

101 
	`¥ötf
("%s: %ŒdÉvít†f‹ %Œdns", 
wh©
, 
_toc
, 
_tŸ
); \

102 
_toc
 != 0) \

103 
_n
 = 
_tŸ
 / 
_toc
; \

105 
_n
 = 0ll; \

106 
_∆
 = 
_n
 / 1000000000ll; \

107 
	`¥ötf
(" (%Œd.%09Œds)\n", 
_∆
, 
_n
 - _nl * 1000000000ll); \

108 
_ix
 = 0; 
_tŸ
 !0Œ && _ix < 
tdñè_t_sz
; _ix++) { \

109 (
_ix
 + 1Ë=
tdñè_t_sz
) { \

110 *
_t
 = '>'; \

111 } 
_ix
 < 8) { \

112 
	`•rötf
(
_t
, "< 0.%09Œds", 
_ns
); \

114 
	`•rötf
(
_t
, "< %Œd.%.*ss", 
_ns
 / 1000000000ll, \

115 9 - (
_ix
 - 8), "000000000"); \

117 
_n
 = ((
tv
[
_ix
][0] * 10000Œ / 
_toc
) + 5ll) / 10ll; \

118 
_∆
 = 
_n
 / 10ll; \

119 
	`¥ötf
("%s: %Œd (%Œ2d.%Œd%%Ëof", 
_t
, \

120 
tv
[
_ix
][0], 
_∆
, 
_n
 - _nl * 10ll); \

121 
tv
[
_ix
][0] != 0) \

122 
_n
 = 
tv
[
_ix
][1] /Åv[_ix][0]; \

124 
_n
 = 0ll; \

125 
_∆
 = 
_n
 / 1000000000ll; \

126 
	`¥ötf
(" %Œd.%09Œds", 
_∆
, 
_n
 - _nl * 1000000000ll); \

127 
_n
 = ((
tv
[
_ix
][1] * 10000Œ / 
_tŸ
) + 5ll) / 10ll; \

128 
_∆
 = 
_n
 / 10ll; \

129 
	`¥ötf
(" (%Œ2d.%Œd%%)\n", 
_∆
, 
_n
 - _nl * 10ll); \

130 
_ns
 *= 10; \

132 }

	)

134 
	#zîŸdñè
(
tv
) { \

135 
_ix
; \

136 
_ix
 = 0; _ix < 
tdñè_t_sz
; _ix++) { \

137 
tv
[
_ix
][0] = 0; \

138 
tv
[
_ix
][1] = 0; \

140 }

	)

142 
	#addtdñè
(
tva
, 
tvb
) { \

143 
_ix
; \

144 
_ix
 = 0; _ix < 
tdñè_t_sz
; _ix++) { \

145 
tva
[
_ix
][0] +
tvb
[_ix][0]; \

146 
tva
[
_ix
][1] +
tvb
[_ix][1]; \

148 }

	)

150 
	#˝ytdñè
(
tva
, 
tvb
) { \

151 
_ix
; \

152 
_ix
 = 0; _ix < 
tdñè_t_sz
; _ix++) { \

153 
tva
[
_ix
][0] = 
tvb
[_ix][0]; \

154 
tva
[
_ix
][1] = 
tvb
[_ix][1]; \

156 }

	)

164 
	#FTEV_MASK
 0x1FFF

	)

165 
	#FTEV_ISWR
 0x8000

	)

166 
	#FTEV_CS
 0x4000

	)

167 
	#FTEV_PS
 0x2000

	)

169 
	#FTEV_QMASK
 0x1F00

	)

171 
	#FTEV_ALLOCMASK
 0x1FF8

	)

172 
	#FTEV_ALLOCB
 0x0000

	)

173 
	#FTEV_ESBALLOC
 0x0001

	)

174 
	#FTEV_DESBALLOC
 0x0002

	)

175 
	#FTEV_ESBALLOCA
 0x0003

	)

176 
	#FTEV_DESBALLOCA
 0x0004

	)

177 
	#FTEV_ALLOCBIG
 0x0005

	)

178 
	#FTEV_ALLOCBW
 0x0006

	)

180 
	#FTEV_FREEB
 0x0008

	)

181 
	#FTEV_DUPB
 0x0009

	)

182 
	#FTEV_COPYB
 0x000A

	)

184 
	#FTEV_CALLER
 0x000F

	)

186 
	#FTEV_PUT
 0x0100

	)

187 
	#FTEV_FSYNCQ
 0x0103

	)

188 
	#FTEV_DSYNCQ
 0x0104

	)

189 
	#FTEV_PUTQ
 0x0105

	)

190 
	#FTEV_GETQ
 0x0106

	)

191 
	#FTEV_RMVQ
 0x0107

	)

192 
	#FTEV_INSQ
 0x0108

	)

193 
	#FTEV_PUTBQ
 0x0109

	)

194 
	#FTEV_FLUSHQ
 0x010A

	)

195 
	#FTEV_REPLYQ
 0x010B

	)

196 
	#FTEV_PUTNEXT
 0x010D

	)

197 
	#FTEV_RWNEXT
 0x010E

	)

198 
	#FTEV_QWINNER
 0x010F

	)

199 
	#FTEV_GEWRITE
 0x0101

	)

201 
	#FTFLW_HASH
(
h
Ë((()(h))%
·Êw_hash_sz
)

	)

203 
	#FTBLK_EVNTS
 0x9

	)

212 
	s·ev¡
 {

213 
ts_t
 
	gts
;

214 *
	gmid
;

215 
ush‹t_t
 
	gev¡
;

216 
ush‹t_t
 
	gd©a
;

222 
	s·blk
 {

223 
·blk
 *
	gnxt
;

224 
	gix
;

225 
·ev¡
 
	gev
[
FTBLK_EVNTS
];

238 
	s·hdr
 {

239 
·blk
 *
	gèû
;

240 
	ghash
;

241 *
	gthªad
;

242 
	g˝u_£qid
;

243 
·blk
 
	gfú°
;

251 
	s·Êwe
 {

252 *
	gmid
;

253 
ush‹t_t
 
	gev¡
;

254 
ush‹t_t
 
	gd©a
;

255 
tdñè_t
 
	gtd
;

258 
	s·Êw
 {

259 
·Êw
 *
	gnxt
;

260 
	ghash
;

261 
	gcou¡
;

262 
·Êwe
 
	gev
[1];

265 
·ev¡
 
	t·ev¡_t
;

266 
·blk
 
	t·blk_t
;

267 
·hdr
 
	t·hdr_t
;

268 
·Êwe
 
	t·Êwe_t
;

269 
·Êw
 
	t·Êw_t
;

270 
·evíts
 
	t·evíts_t
;

272 #ifde‡
_KERNEL


274 
°r_·evít
(
·hdr_t
 *, *, ,

275 , 
ts_t
);

276 
°r_·√vî
;

277 
°r_·Æl
;

278 
°r_·öhîô
;

280 
	#STR_FTEVENT_MBLK
(
mp
, 
p
, 
e
, 
d
) { \

281 
·hdr_t
 *
_hp
; \

283 
°r_·√vî
 =0 && 
mp
 !
NULL
 && \

284 ((
_hp
 = 
mp
->
b_d©≠
->
db_·hdr
Ë!
NULL
)) \

285 
	`°r_·evít
(
_hp
, 
p
, 
e
, 
d
, (
ts_t
)0); \

286 }

	)

288 
	#STR_TSEVENT_MBLK
(
mp
, 
p
, 
e
, 
d
, 
t
) { \

289 
·hdr_t
 *
_hp
; \

291 
°r_·√vî
 =0 && 
mp
 !
NULL
 && \

292 ((
_hp
 = (
mp
)->
b_d©≠
->
db_·hdr
Ë!
NULL
)) \

293 
	`°r_·evít
(
_hp
, (
p
), (
e
), (
d
), (
t
)); \

294 }

	)

297 
	#STR_FTCLR_MBLK
(
mp
) { \

298 
·hdr_t
 *
_hp
 = (
mp
)->
b_d©≠
->
db_·hdr
; \

299 
_hp
 && (_hp->
fú°
.
nxt
 =
NULL
)) { \

300 
_ix
; \

301 
·blk_t
 *
_Â
 = 
_hp
->
èû
; \

302 
_ix
 = 
_Â
->
ix
; _ix >= 0; _ix--) { \

303 
_Â
->
ev
[
_ix
].
ts
 = (
ts_t
)0; \

304 
_Â
->
ev
[
_ix
].
mid
 = 
NULL
; \

305 
_Â
->
ev
[
_ix
].
ev¡
 = 0; \

306 
_Â
->
ev
[
_ix
].
d©a
 = 0; \

308 
_hp
->
thªad
 = 
cuπhªad
; \

309 
_hp
->
˝u_£qid
 = 
CPU
->cpu_seqid; \

310 
_hp
->
fú°
.
ix
 = 0; \

311 
_hp
->
hash
 = 0; \

313 }

	)

315 
	#STR_FTEVENT_MSG
(
mp
, 
p
, 
e
, 
d
) { \

316 
°r_·√vî
 == 0) { \

317 
mblk_t
 *
_mp
; \

318 
·hdr_t
 *
_hp
; \

320 
_mp
 = (
mp
); _mp; _m∞_mp->
b_c⁄t
) { \

321 (
_hp
 = 
_mp
->
b_d©≠
->
db_·hdr
Ë!
NULL
) \

322 
	`°r_·evít
(
_hp
, (
p
), (
e
), (
d
), (
ts_t
)0);\

325 }

	)

327 
	#STR_TSEVENT_MSG
(
mp
, 
p
, 
e
, 
d
, 
t
) { \

328 
°r_·√vî
 == 0) { \

329 
mblk_t
 *
_mp
; \

330 
·hdr_t
 *
_hp
; \

332 
_mp
 = (
mp
); _mp; _m∞_mp->
b_c⁄t
) { \

333 (
_hp
 = 
_mp
->
b_d©≠
->
db_·hdr
Ë!
NULL
) \

334 
	`°r_·evít
(
_hp
, (
p
), (
e
), (
d
), (
t
)); \

337 }

	)

339 
	#STR_FTALLOC
(
hµ
, 
p
, 
e
, 
d
, 
f
) { \

340 (
f
Ë=
B_TRUE
) { \

341 
·hdr_t
 *
_hp
 = *(
hµ
); \

343 
	`ASSERT
(
_hp
 =
NULL
); \

344 
_hp
 = 
	`kmem_ˇche_Æloc
(
·hdr_ˇche
, 
KM_NOSLEEP
); \

345 (*
hµ
 = 
_hp
Ë!
NULL
) { \

346 
_hp
->
èû
 = &_hp->
fú°
; \

347 
_hp
->
hash
 = 0; \

348 
_hp
->
thªad
 = 
cuπhªad
; \

349 
_hp
->
˝u_£qid
 = 
CPU
->cpu_seqid; \

350 
_hp
->
fú°
.
nxt
 = 
NULL
; \

351 
_hp
->
fú°
.
ix
 = 0; \

352 
	`°r_·evít
(
_hp
, (
p
), (
e
), (
d
), (
ts_t
)0); \

355 }

	)

359 #ifdef 
__˝lu•lus


	@/usr/include/sys/strmdep.h

13 #i‚de‡
_SYS_STRMDEP_H


14 
	#_SYS_STRMDEP_H


	)

16 #¥agm®
idít
 "@(#)strmdep.h 1.10 98/01/06 SMI"

18 #ifdef 
__˝lu•lus


31 
	#°rb˝y
(
s
, 
d
, 
c
) 
	`bc›y
(s, d, c)

	)

37 
	#ßvóddr
(
fun˝
)

	)

43 
	#°r_Æig√d
(
X
) (((
ul⁄g_t
)(XË& ( (Ë- 1)Ë=0)

	)

45 #ifdef 
__˝lu•lus


	@/usr/include/sys/ucontext.h

13 #i‚de‡
_SYS_UCONTEXT_H


14 
	#_SYS_UCONTEXT_H


	)

16 #¥agm®
idít
 "@(#)ucontext.h 1.7 99/05/04 SMI"

18 
	~<sys/„©uª_ã°s.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/ªg£t.h
>

22 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

23 
	~<sys/sig«l.h
>

26 #ifdef 
__˝lu•lus


36 #i‡
deföed
(
_XPG4_2
Ë&& !deföed(
__EXTENSIONS__
)

37 #i‚def 
_SIGSET_T


38 
	#_SIGSET_T


	)

39 
	s
{

40 
__sigbôs
[4];

41 } 
	tsig£t_t
;

44 #i‚def 
_STACK_T


45 
	#_STACK_T


	)

46 
	s
{

47 *
	mss_•
;

48 
size_t
 
	mss_size
;

49 
	mss_Êags
;

50 } 
	t°ack_t
;

54 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

55 
uc⁄ãxt
 
	tuc⁄ãxt_t
;

57 
__uc⁄ãxt
 
	tuc⁄ãxt_t
;

60 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

61 
	suc⁄ãxt
 {

63 
	s__uc⁄ãxt
 {

65 
	guc_Êags
;

66 
uc⁄ãxt_t
 *
	guc_lök
;

67 
sig£t_t
 
	guc_sigmask
;

68 
°ack_t
 
	guc_°ack
;

69 
mc⁄ãxt_t
 
	guc_mc⁄ãxt
;

70 
	guc_fûÀr
[5];

73 #i‡
deföed
(
__ü64
Ë&& deföed(
_SYSCALL32
)

77 
	suc⁄ãxt32
 {

78 
uöt32_t
 
	guc_Êags
;

79 
ˇddr32_t
 
	guc_lök
;

80 
sig£t32_t
 
	guc_sigmask
;

81 
°ack32_t
 
	guc_°ack
;

82 
mc⁄ãxt32_t
 
	guc_mc⁄ãxt
;

83 
öt32_t
 
	guc_fûÀr
[5];

84 } 
	tuc⁄ãxt32_t
;

86 #i‡
deföed
(
_KERNEL
)

87 
uc⁄ãxt_¡o32
(c⁄° 
uc⁄ãxt_t
 *
§c
, 
uc⁄ãxt32_t
 *
de°
);

88 
uc⁄ãxt_32t⁄
(c⁄° 
uc⁄ãxt32_t
 *
§c
, 
uc⁄ãxt_t
 *
de°
);

93 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

94 
	#GETCONTEXT
 0

	)

95 
	#SETCONTEXT
 1

	)

104 
	#UC_SIGMASK
 001

	)

105 
	#UC_STACK
 002

	)

106 
	#UC_CPU
 004

	)

107 
	#UC_MAU
 010

	)

108 
	#UC_FPU
 
UC_MAU


	)

110 
	#UC_MCONTEXT
 (
UC_CPU
|
UC_FPU
)

	)

116 
	#UC_ALL
 (
UC_SIGMASK
|
UC_STACK
|
UC_MCONTEXT
)

	)

119 #ifde‡
_KERNEL


120 
ßvec⁄ãxt
(
uc⁄ãxt_t
 *, 
k_sig£t_t
);

121 
ª°‹ec⁄ãxt
(
uc⁄ãxt_t
 *);

124 #ifdef 
__˝lu•lus


	@/usr/include/sys/vnode.h

32 #i‚de‡
_SYS_VNODE_H


33 
	#_SYS_VNODE_H


	)

35 #¥agm®
idít
 "@(#)vnode.h 1.85 99/07/30 SMI"

37 
	~<sys/ty≥s.h
>

38 
	~<sys/t_lock.h
>

39 
	~<sys/time_im∂.h
>

40 
	~<sys/¸ed.h
>

41 
	~<sys/uio.h
>

42 
	~<sys/ªsour˚.h
>

43 
	~<vm/£g_íum.h
>

44 #ifdef 
_KERNEL


45 
	~<sys/buf.h
>

48 #ifdef 
__˝lu•lus


63 
	evty≥
 {

64 
VNON
 = 0,

65 
VREG
 = 1,

66 
VDIR
 = 2,

67 
VBLK
 = 3,

68 
VCHR
 = 4,

69 
VLNK
 = 5,

70 
VFIFO
 = 6,

71 
VDOOR
 = 7,

72 
VPROC
 = 8,

73 
VSOCK
 = 9,

74 
VBAD
 = 10

75 } 
	tvty≥_t
;

87 
	svnode
 {

88 
kmuãx_t
 
v_lock
;

89 
ush‹t_t
 
v_Êag
;

90 
uöt_t
 
v_cou¡
;

91 
vfs
 *
v_vfsmou¡edhîe
;

92 
vnode›s
 *
v_›
;

93 
vfs
 *
v_vf•
;

94 
°d©a
 *
v_°ªam
;

95 
∑ge
 *
v_∑ges
;

96 
vty≥
 
v_ty≥
;

97 
dev_t
 
v_rdev
;

98 
ˇddr_t
 
v_d©a
;

99 
fûock
 *
v_fûocks
;

100 
shæockli°
 *
v_shæocks
;

101 
kc⁄dv¨_t
 
v_cv
;

102 *
v_loˇlôy
;

103 } 
	tvnode_t
;

108 
	#VROOT
 0x01

	)

109 
	#VNOCACHE
 0x02

	)

110 
	#VNOMAP
 0x04

	)

111 
	#VDUP
 0x08

	)

112 
	#VNOSWAP
 0x10

	)

113 
	#VNOMOUNT
 0x20

	)

114 
	#VISSWAP
 0x40

	)

115 
	#VSWAPLIKE
 0x80

	)

117 
	#IS_SWAPVP
(
vp
) (((vp)->
v_Êag
 & (
VISSWAP
 | 
VSWAPLIKE
)Ë!0)

	)

122 
	#VVFSLOCK
 0x100

	)

123 
	#VVFSWAIT
 0x200

	)

128 
	#VVMLOCK
 0x400

	)

134 
	#VDIROPEN
 0x800

	)

140 
	#VVMEXEC
 0x1000

	)

142 
	#VPXFS
 0x2000

	)

143 
	#IS_PXFSVP
(
vp
) ((vp)->
v_Êag
 & 
VPXFS
)

	)

158 
	sv©å
 {

159 
uöt_t
 
va_mask
;

160 
vty≥_t
 
va_ty≥
;

161 
mode_t
 
va_mode
;

162 
uid_t
 
va_uid
;

163 
gid_t
 
va_gid
;

164 
dev_t
 
va_fsid
;

165 
u_l⁄gl⁄g_t
 
va_nodeid
;

166 
∆ök_t
 
va_∆ök
;

167 
u_off£t_t
 
va_size
;

168 
time°ruc_t
 
va_©ime
;

169 
time°ruc_t
 
va_mtime
;

170 
time°ruc_t
 
va_˘ime
;

171 
dev_t
 
va_rdev
;

172 
uöt_t
 
va_blksize
;

173 
u_l⁄gl⁄g_t
 
va_nblocks
;

174 
uöt_t
 
va_vcode
;

175 } 
	tv©å_t
;

177 #ifde‡
_SYSCALL32


182 
	sv©å32
 {

183 
uöt32_t
 
va_mask
;

184 
vty≥_t
 
va_ty≥
;

185 
mode32_t
 
va_mode
;

186 
uid32_t
 
va_uid
;

187 
gid32_t
 
va_gid
;

188 
dev32_t
 
va_fsid
;

189 
u_l⁄gl⁄g_t
 
va_nodeid
;

190 
∆ök_t
 
va_∆ök
;

191 
u_off£t_t
 
va_size
;

192 
time°ruc32_t
 
va_©ime
;

193 
time°ruc32_t
 
va_mtime
;

194 
time°ruc32_t
 
va_˘ime
;

195 
dev32_t
 
va_rdev
;

196 
uöt32_t
 
va_blksize
;

197 
u_l⁄gl⁄g_t
 
va_nblocks
;

198 
uöt32_t
 
va_vcode
;

199 } 
	tv©å32_t
;

201 
	#v©å32
 
v©å


	)

202 
v©å_t
 
	tv©å32_t
;

208 
	#AT_TYPE
 0x0001

	)

209 
	#AT_MODE
 0x0002

	)

210 
	#AT_UID
 0x0004

	)

211 
	#AT_GID
 0x0008

	)

212 
	#AT_FSID
 0x0010

	)

213 
	#AT_NODEID
 0x0020

	)

214 
	#AT_NLINK
 0x0040

	)

215 
	#AT_SIZE
 0x0080

	)

216 
	#AT_ATIME
 0x0100

	)

217 
	#AT_MTIME
 0x0200

	)

218 
	#AT_CTIME
 0x0400

	)

219 
	#AT_RDEV
 0x0800

	)

220 
	#AT_BLKSIZE
 0x1000

	)

221 
	#AT_NBLOCKS
 0x2000

	)

222 
	#AT_VCODE
 0x4000

	)

224 
	#AT_ALL
 (
AT_TYPE
|
AT_MODE
|
AT_UID
|
AT_GID
|
AT_FSID
|
AT_NODEID
|\

225 
AT_NLINK
|
AT_SIZE
|
AT_ATIME
|
AT_MTIME
|
AT_CTIME
|\

226 
AT_RDEV
|
AT_BLKSIZE
|
AT_NBLOCKS
|
AT_VCODE
)

	)

228 
	#AT_STAT
 (
AT_MODE
|
AT_UID
|
AT_GID
|
AT_FSID
|
AT_NODEID
|
AT_NLINK
|\

229 
AT_SIZE
|
AT_ATIME
|
AT_MTIME
|
AT_CTIME
|
AT_RDEV
)

	)

231 
	#AT_TIMES
 (
AT_ATIME
|
AT_MTIME
|
AT_CTIME
)

	)

233 
	#AT_NOSET
 (
AT_NLINK
|
AT_RDEV
|
AT_FSID
|
AT_NODEID
|
AT_TYPE
|\

234 
AT_BLKSIZE
|
AT_NBLOCKS
|
AT_VCODE
)

	)

239 
	#VSUID
 04000

	)

240 
	#VSGID
 02000

	)

241 
	#VSVTX
 01000

	)

246 
	#VREAD
 00400

	)

247 
	#VWRITE
 00200

	)

248 
	#VEXEC
 00100

	)

250 
	#MODEMASK
 07777

	)

251 
	#PERMMASK
 00777

	)

257 
	#MANDMODE
(
mode
) (((modeË& (
VSGID
|(
VEXEC
>>3))Ë=VSGID)

	)

258 
	#MANDLOCK
(
vp
, 
mode
) ((vp)->
v_ty≥
 =
VREG
 && 
	`MANDMODE
(mode))

	)

263 
	erm
 { 
RMFILE
, 
RMDIRECTORY
 };

264 
	esymfﬁlow
 { 
NO_FOLLOW
, 
FOLLOW
 };

265 
	ev˚x˛
 { 
NONEXCL
, 
EXCL
 };

266 
	e¸óã
 { 
CRCREAT
, 
CRMKNOD
, 
CRMKDIR
 };

268 
rm
 
	trm_t
;

269 
symfﬁlow
 
	tsymfﬁlow_t
;

270 
v˚x˛
 
	tv˚x˛_t
;

271 
¸óã
 
	t¸óã_t
;

277 
	sv£ˇâr
 {

278 
uöt_t
 
vß_mask
;

279 
vß_a˛˙t
;

280 *
vß_a˛íç
;

281 
vß_dÁ˛˙t
;

282 *
vß_dÁ˛íç
;

283 } 
	tv£ˇâr_t
;

286 
	#VSA_ACL
 0x0001

	)

287 
	#VSA_ACLCNT
 0x0002

	)

288 
	#VSA_DFACL
 0x0004

	)

289 
	#VSA_DFACLCNT
 0x0008

	)

294 
∑th«me
;

295 
fid
;

296 
Êock64
;

297 
shæock
;

298 
∑ge
;

299 
£g
;

300 
as
;

301 
pﬁlhód
;

306 
	svnode›s
 {

307 (*
v›_›í
)(
vnode
 **
vµ
, 
Êag
, 
¸ed
 *
¸
);

308 (*
v›_˛o£
)(
vnode
 *
vp
, 
Êag
, 
cou¡
,

309 
off£t_t
 
off£t
, 
¸ed
 *
¸
);

310 (*
v›_ªad
)(
vnode
 *
vp
, 
uio
 *
ui›
, 
ioÊag
,

311 
¸ed
 *
¸
);

312 (*
v›_wrôe
)(
vnode
 *
vp
, 
uio
 *
ui›
, 
ioÊag
,

313 
¸ed
 *
¸
);

314 (*
v›_io˘l
)(
vnode
 *
vp
, 
cmd
, 
öçå_t
 
¨g
, 
Êag
,

315 
¸ed
 *
¸
, *
rvÆp
);

316 (*
v›_£tÊ
)(
vnode
 *
vp
, 
oÊags
, 
nÊags
,

317 
¸ed
 *
¸
);

318 (*
v›_gë©å
)(
vnode
 *
vp
, 
v©å
 *
v≠
, 
Êags
,

319 
¸ed
 *
¸
);

320 (*
v›_£èâr
)(
vnode
 *
vp
, 
v©å
 *
v≠
, 
Êags
,

321 
¸ed
 *
¸
);

322 (*
v›_ac˚ss
)(
vnode
 *
vp
, 
mode
, 
Êags
,

323 
¸ed
 *
¸
);

324 (*
v›_lookup
)(
vnode
 *
dvp
, *
nm
, vnodê**
vµ
,

325 
∑th«me
 *
≤p
, 
Êags
,

326 
vnode
 *
rdú
, 
¸ed
 *);

327 (*
v›_¸óã
)(
vnode
 *
dvp
, *
«me
, 
v©å
 *
v≠
,

328 
v˚x˛_t
 
ex˛
, 
mode
, 
vnode
 **
vµ
,

329 
¸ed
 *
¸
, 
Êag
);

330 (*
v›_ªmove
)(
vnode
 *
vp
, *
nm
, 
¸ed
 *
¸
);

331 (*
v›_lök
)(
vnode
 *
tdvp
, vnodê*
svp
, *
äm
,

332 
¸ed
 *
¸
);

333 (*
v›_ª«me
)(
vnode
 *
sdvp
, *
¢m
,

334 
vnode
 *
tdvp
, *
äm
, 
¸ed
 *
¸
);

335 (*
v›_mkdú
)(
vnode
 *
dvp
, *
dú«me
,

336 
v©å
 *
v≠
, 
vnode
 **
vµ
,

337 
¸ed
 *
¸
);

338 (*
v›_rmdú
)(
vnode
 *
vp
, *
nm
, vnodê*
cdú
,

339 
¸ed
 *
¸
);

340 (*
v›_ªaddú
)(
vnode
 *
vp
, 
uio
 *
ui›
,

341 
¸ed
 *
¸
, *
eoÂ
);

342 (*
v›_symlök
)(
vnode
 *
dvp
, *
lök«me
,

343 
v©å
 *
v≠
, *
èrgë
,

344 
¸ed
 *
¸
);

345 (*
v›_ªadlök
)(
vnode
 *
vp
, 
uio
 *
ui›
,

346 
¸ed
 *
¸
);

347 (*
v›_fsync
)(
vnode
 *
vp
, 
syncÊag
, 
¸ed
 *
¸
);

348 (*
v›_öa˘ive
)(
vnode
 *
vp
, 
¸ed
 *
¸
);

349 (*
v›_fid
)(
vnode
 *
vp
, 
fid
 *
fidp
);

350 (*
v›_rwlock
)(
vnode
 *
vp
, 
wrôe_lock
);

351 (*
v›_rwu∆ock
)(
vnode
 *
vp
, 
wrôe_lock
);

352 (*
v›_£ek
)(
vnode
 *
vp
, 
off£t_t
 
ooff
, off£t_à*
nofÂ
);

353 (*
v›_cmp
)(
vnode
 *
vp1
, vnodê*
vp2
);

354 (*
v›_‰lock
)(
vnode
 *
vp
, 
cmd
, 
Êock64
 *
bÂ
,

355 
Êag
, 
off£t_t
 
off£t
, 
¸ed
 *
¸
);

356 (*
v›_•a˚
)(
vnode
 *
vp
, 
cmd
, 
Êock64
 *
bÂ
,

357 
Êag
, 
off£t_t
 
off£t
, 
¸ed
 *
¸
);

358 (*
v›_ªÆvp
)(
vnode
 *
vp
, vnodê**
vµ
);

359 (*
v›_gë∑ge
)(
vnode
 *
vp
, 
off£t_t
 
off
, 
size_t
 
Àn
,

360 
uöt_t
 *
¥Ÿp
, 
∑ge
 **
∂¨r
, 
size_t
 
∂sz
,

361 
£g
 *£g, 
ˇddr_t
 
addr
, 
£g_rw
 
rw
,

362 
¸ed
 *
¸
);

363 (*
v›_puçage
)(
vnode
 *
vp
, 
off£t_t
 
off
, 
size_t
 
Àn
,

364 
Êags
, 
¸ed
 *
¸
);

365 (*
v›_m≠
)(
vnode
 *
vp
, 
off£t_t
 
off
, 
as
 *as,

366 
ˇddr_t
 *
addΩ
, 
size_t
 
Àn
, 
uch¨_t
 
¥Ÿ
,

367 
uch¨_t
 
max¥Ÿ
, 
uöt_t
 
Êags
, 
¸ed
 *
¸
);

368 (*
v›_addm≠
)(
vnode
 *
vp
, 
off£t_t
 
off
, 
as
 *as,

369 
ˇddr_t
 
addr
, 
size_t
 
Àn
, 
uch¨_t
 
¥Ÿ
,

370 
uch¨_t
 
max¥Ÿ
, 
uöt_t
 
Êags
, 
¸ed
 *
¸
);

371 (*
v›_dñm≠
)(
vnode
 *
vp
, 
off£t_t
 
off
, 
as
 *as,

372 
ˇddr_t
 
addr
, 
size_t
 
Àn
, 
uöt_t
 
¥Ÿ
,

373 
uöt_t
 
max¥Ÿ
, uöt_à
Êags
, 
¸ed
 *
¸
);

374 (*
v›_pﬁl
)(
vnode
 *
vp
, 
ev
, 
™y
, *
ªvp
,

375 
pﬁlhód
 **
phµ
);

376 (*
v›_dump
)(
vnode
 *
vp
, 
ˇddr_t
 
addr
, 
lbdn
,

377 
dblks
);

378 (*
v›_∑thc⁄f
)(
vnode
 *
vp
, 
cmd
, 
ul⁄g_t
 *
vÆp
,

379 
¸ed
 *
¸
);

380 (*
v›_∑geio
)(
vnode
 *
vp
, 
∑ge
 *
µ
,

381 
u_off£t_t
 
io_off
, 
size_t
 
io_Àn
, 
Êags
,

382 
¸ed
 *
¸
);

383 (*
v›_dump˘l
)(
vnode
 *
vp
, 
a˘i⁄
, *
blkp
);

384 (*
v›_di•o£
)(
vnode
 *
vp
, 
∑ge
 *
µ
, 
Êag
,

385 
dn
, 
¸ed
 *
¸
);

386 (*
v›_£t£ˇâr
)(
vnode
 *
vp
, 
v£ˇâr_t
 *
vßp
, 
Êag
,

387 
¸ed
 *
¸
);

388 (*
v›_gë£ˇâr
)(
vnode
 *
vp
, 
v£ˇâr_t
 *
vßp
, 
Êag
,

389 
¸ed
 *
¸
);

390 (*
v›_shæock
)(
vnode
 *
vp
, 
cmd
, 
shæock
 *
shr
,

391 
Êag
);

392 } 
	tvnode›s_t
;

394 
	#VOP_OPEN
(
vµ
, 
mode
, 
¸
Ë(*(*(vµ))->
v_›
->
v›_›í
)(vµ, mode, cr)

	)

395 
	#VOP_CLOSE
(
vp
, 
f
, 
c
, 
o
, 
¸
Ë(*(vp)->
v_›
->
v›_˛o£
)(vp, f, c, o, cr)

	)

396 
	#VOP_READ
(
vp
, 
ui›
, 
iof
, 
¸
Ë(*(vp)->
v_›
->
v›_ªad
)(vp, ui›, iof, cr)

	)

397 
	#VOP_WRITE
(
vp
, 
ui›
, 
iof
, 
¸
Ë(*(vp)->
v_›
->
v›_wrôe
)(vp, ui›, iof, cr)

	)

398 
	#VOP_IOCTL
(
vp
, 
cmd
, 
a
, 
f
, 
¸
, 
rvp
) \

399 (*(
vp
)->
v_›
->
v›_io˘l
)(vp, 
cmd
, 
a
, 
f
, 
¸
, 
rvp
)

	)

400 
	#VOP_SETFL
(
vp
, 
f
, 
a
, 
¸
Ë(*(vp)->
v_›
->
v›_£tÊ
)(vp, f,á, cr)

	)

401 
	#VOP_GETATTR
(
vp
, 
v≠
, 
f
, 
¸
Ë(*(vp)->
v_›
->
v›_gë©å
)(vp, v≠, f, cr)

	)

402 
	#VOP_SETATTR
(
vp
, 
v≠
, 
f
, 
¸
Ë(*(vp)->
v_›
->
v›_£èâr
)(vp, v≠, f, cr)

	)

403 
	#VOP_ACCESS
(
vp
, 
mode
, 
f
, 
¸
Ë(*(vp)->
v_›
->
v›_ac˚ss
)(vp, mode, f, cr)

	)

404 
	#VOP_LOOKUP
(
vp
, 
˝
, 
vµ
, 
≤p
, 
f
, 
rdú
, 
¸
) \

405 (*(
vp
)->
v_›
->
v›_lookup
)(vp, 
˝
, 
vµ
, 
≤p
, 
f
, 
rdú
, 
¸
)

	)

406 
	#VOP_CREATE
(
dvp
, 
p
, 
v≠
, 
ex
, 
mode
, 
vµ
, 
¸
, 
Êag
) \

407 (*(
dvp
)->
v_›
->
v›_¸óã
)(dvp, 
p
, 
v≠
, 
ex
, 
mode
, 
vµ
, 
¸
, 
Êag
)

	)

408 
	#VOP_REMOVE
(
dvp
, 
p
, 
¸
Ë(*(dvp)->
v_›
->
v›_ªmove
)(dvp,Ö, cr)

	)

409 
	#VOP_LINK
(
tdvp
, 
fvp
, 
p
, 
¸
Ë(*—dvp)->
v_›
->
v›_lök
)—dvp, fvp,Ö, cr)

	)

410 
	#VOP_RENAME
(
fvp
, 
‚m
, 
tdvp
, 
äm
, 
¸
) \

411 (*(
fvp
)->
v_›
->
v›_ª«me
)(fvp, 
‚m
, 
tdvp
, 
äm
, 
¸
)

	)

412 
	#VOP_MKDIR
(
dp
, 
p
, 
v≠
, 
vµ
, 
¸
) \

413 (*(
dp
)->
v_›
->
v›_mkdú
)(dp, 
p
, 
v≠
, 
vµ
, 
¸
)

	)

414 
	#VOP_RMDIR
(
dp
, 
p
, 
cdú
, 
¸
Ë(*(dp)->
v_›
->
v›_rmdú
)(dp,Ö, cdú, cr)

	)

415 
	#VOP_READDIR
(
vp
, 
ui›
, 
¸
, 
eoÂ
) \

416 (*(
vp
)->
v_›
->
v›_ªaddú
)(vp, 
ui›
, 
¸
, 
eoÂ
)

	)

417 
	#VOP_SYMLINK
(
dvp
, 
 m
, 
v≠
, 
äm
, 
¸
) \

418 (*(
dvp
)->
v_›
->
v›_symlök
Ë(dvp, 
 m
, 
v≠
, 
äm
, 
¸
)

	)

419 
	#VOP_READLINK
(
vp
, 
ui›
, 
¸
Ë(*(vp)->
v_›
->
v›_ªadlök
)(vp, ui›, cr)

	)

420 
	#VOP_FSYNC
(
vp
, 
syncÊag
, 
¸
Ë(*(vp)->
v_›
->
v›_fsync
)(vp, syncÊag, cr)

	)

421 
	#VOP_INACTIVE
(
vp
, 
¸
Ë(*(vp)->
v_›
->
v›_öa˘ive
)(vp, cr)

	)

422 
	#VOP_FID
(
vp
, 
fidp
Ë(*(vp)->
v_›
->
v›_fid
)(vp, fidp)

	)

423 
	#VOP_RWLOCK
(
vp
, 
w
Ë(*(vp)->
v_›
->
v›_rwlock
)(vp, w)

	)

424 
	#VOP_RWUNLOCK
(
vp
, 
w
Ë(*(vp)->
v_›
->
v›_rwu∆ock
)(vp, w)

	)

425 
	#VOP_SEEK
(
vp
, 
ooff
, 
nofÂ
Ë(*(vp)->
v_›
->
v›_£ek
) \

426 (
vp
, 
ooff
, 
nofÂ
)

	)

427 
	#VOP_CMP
(
vp1
, 
vp2
Ë(*(vp1)->
v_›
->
v›_cmp
)(vp1, vp2)

	)

428 
	#VOP_FRLOCK
(
vp
, 
cmd
, 
a
, 
f
, 
o
, 
¸
) \

429 (*(
vp
)->
v_›
->
v›_‰lock
)(vp, 
cmd
, 
a
, 
f
, 
o
, 
¸
)

	)

430 
	#VOP_SPACE
(
vp
, 
cmd
, 
a
, 
f
, 
o
, 
¸
) \

431 (*(
vp
)->
v_›
->
v›_•a˚
)(vp, 
cmd
, 
a
, 
f
, 
o
, 
¸
)

	)

432 
	#VOP_REALVP
(
vp1
, 
vp2
Ë(*(vp1)->
v_›
->
v›_ªÆvp
)(vp1, vp2)

	)

433 
	#VOP_GETPAGE
(
vp
, 
of
, 
sz
, 
¥
, 
∂
, 
ps
, 
sg
, 
a
, 
rw
, 
¸
) \

434 ((*(
vp
)->
v_›
->
v›_gë∑ge
) \

435 (
vp
, 
of
, 
sz
, 
¥
, 
∂
, 
ps
, 
sg
, 
a
, 
rw
, 
¸
))

	)

436 
	#VOP_PUTPAGE
(
vp
, 
of
, 
sz
, 
Ê
, 
¸
) \

437 ((*(
vp
)->
v_›
->
v›_puçage
)(vp, 
of
, 
sz
, 
Ê
, 
¸
))

	)

438 
	#VOP_MAP
(
vp
, 
of
, 
as
, 
a
, 
sz
, 
p
, 
mp
, 
Ê
, 
¸
) \

439 (*(
vp
)->
v_›
->
v›_m≠
Ë(vp, 
of
, 
as
, 
a
, 
sz
, 
p
, 
mp
, 
Ê
, 
¸
)

	)

440 
	#VOP_ADDMAP
(
vp
, 
of
, 
as
, 
a
, 
sz
, 
p
, 
mp
, 
Ê
, 
¸
) \

441 (*(
vp
)->
v_›
->
v›_addm≠
Ë(vp, 
of
, 
as
, 
a
, 
sz
, 
p
, 
mp
, 
Ê
, 
¸
)

	)

442 
	#VOP_DELMAP
(
vp
, 
of
, 
as
, 
a
, 
sz
, 
p
, 
mp
, 
Ê
, 
¸
) \

443 (*(
vp
)->
v_›
->
v›_dñm≠
Ë(vp, 
of
, 
as
, 
a
, 
sz
, 
p
, 
mp
, 
Ê
, 
¸
)

	)

444 
	#VOP_POLL
(
vp
, 
evíts
, 
™yyë
, 
ªvít•
, 
phµ
) \

445 (*(
vp
)->
v_›
->
v›_pﬁl
)(vp, 
evíts
, 
™yyë
, 
ªvít•
, 
phµ
)

	)

446 
	#VOP_DUMP
(
vp
, 
addr
, 
bn
, 
cou¡
) \

447 (*(
vp
)->
v_›
->
v›_dump
)(vp, 
addr
, 
bn
, 
cou¡
)

	)

448 
	#VOP_PATHCONF
(
vp
, 
cmd
, 
vÆp
, 
¸
) \

449 (*(
vp
)->
v_›
->
v›_∑thc⁄f
)(vp, 
cmd
, 
vÆp
, 
¸
)

	)

450 
	#VOP_PAGEIO
(
vp
, 
µ
, 
io_off
, 
io_Àn
, 
Êags
, 
¸
) \

451 (*(
vp
)->
v_›
->
v›_∑geio
)(vp, 
µ
, 
io_off
, 
io_Àn
, 
Êags
, 
¸
)

	)

452 
	#VOP_DUMPCTL
(
vp
, 
a˘i⁄
, 
blkp
) \

453 (*(
vp
)->
v_›
->
v›_dump˘l
)(vp, 
a˘i⁄
, 
blkp
)

	)

454 
	#VOP_DISPOSE
(
vp
, 
µ
, 
Êag
, 
dn
, 
¸
) \

455 (*(
vp
)->
v_›
->
v›_di•o£
)(vp, 
µ
, 
Êag
, 
dn
, 
¸
)

	)

456 
	#VOP_GETSECATTR
(
vp
, 
vßp
, 
f
, 
¸
) \

457 (*(
vp
)->
v_›
->
v›_gë£ˇâr
Ë(vp, 
vßp
, 
f
, 
¸
)

	)

458 
	#VOP_SETSECATTR
(
vp
, 
vßp
, 
f
, 
¸
) \

459 (*(
vp
)->
v_›
->
v›_£t£ˇâr
Ë(vp, 
vßp
, 
f
, 
¸
)

	)

460 
	#VOP_SHRLOCK
(
vp
, 
cmd
, 
shr
, 
f
) \

461 (*(
vp
)->
v_›
->
v›_shæock
)(vp, 
cmd
, 
shr
, 
f
)

	)

466 
	#LOOKUP_DIR
 0x01

	)

471 
	#DUMP_ALLOC
 0

	)

472 
	#DUMP_FREE
 1

	)

473 
	#DUMP_SCAN
 2

	)

478 #ifdef 
_KERNEL


480 
vn_›í
(*
≤amï
, 
uio_£g
 
£g
, 
fûemode
, 
¸óãmode
,

481 
vnode
 **
vµ
, 
¸óã
 
¸why
, 
mode_t
 
umask
);

482 
vn_¸óã
(*
≤amï
, 
uio_£g
 
£g
, 
v©å
 *
v≠
,

483 
v˚x˛
 
ex˛
, 
mode
, 
vnode
 **
vµ
,

484 
¸óã
 
why
, 
Êag
, 
mode_t
 
umask
);

485 
vn_rdwr
(
uio_rw
 
rw
, 
vnode
 *
vp
, 
ˇddr_t
 
ba£
, 
ssize_t
 
Àn
,

486 
off£t_t
 
off£t
, 
uio_£g
 
£g
, 
ioÊag
, 
æim64_t
 
ulimô
,

487 
¸ed_t
 *
¸
, 
ssize_t
 *
ªsidp
);

488 
vn_ªÀ
(
vnode
 *
vp
);

489 
vn_ªÀ_°ªam
(
vnode
 *
vp
);

490 
vn_lök
(*
‰om
, *
to
, 
uio_£g
 
£g
);

491 
vn_ª«me
(*
‰om
, *
to
, 
uio_£g
 
£g
);

492 
vn_ªmove
(*
‚amï
, 
uio_£g
 
£g
, 
rm
 
dúÊag
);

493 
vn_vf¶ock
(
vnode
 *
vp
);

494 
vn_vfswlock
(
vnode
 *
vp
);

495 
vn_vfswlock_waô
(
vnode
 *
vp
);

496 
vn_vfsu∆ock
(
vnode
 *
vp
);

497 
vn_vfswlock_hñd
(
vnode
 *
vp
);

498 
vnode_t
 *
•ecvp
(
vnode
 *
vp
, 
dev_t
 
dev
, 
vty≥_t
 
ty≥
, 
¸ed
 *
¸
);

499 
vnode_t
 *
make•ecvp
(
dev_t
 
dev
, 
vty≥_t
 
ty≥
);

503 
	#VN_HOLD
(
vp
) { \

504 
	`muãx_íãr
(&(
vp
)->
v_lock
); \

505 (
vp
)->
v_cou¡
++; \

506 
	`muãx_exô
(&(
vp
)->
v_lock
); \

507 }

	)

509 
	#VN_RELE
(
vp
) { \

510 
	`vn_ªÀ
(
vp
); \

511 }

	)

513 
	#VN_INIT
(
vp
, 
vf•
, 
ty≥
, 
dev
) { \

514 
	`muãx_öô
(&(
vp
)->
v_lock
, 
NULL
, 
MUTEX_DEFAULT
, NULL); \

515 (
vp
)->
v_Êag
 = 0; \

516 (
vp
)->
v_cou¡
 = 1; \

517 (
vp
)->
v_vf•
 = (
vf•
); \

518 (
vp
)->
v_ty≥
 = (
ty≥
); \

519 (
vp
)->
v_rdev
 = (
dev
); \

520 (
vp
)->
v_∑ges
 = 
NULL
; \

521 (
vp
)->
v_°ªam
 = 
NULL
; \

522 }

	)

528 
	#VN_CMP
(
VP1
, 
VP2
) ((VP1) == (VP2) ? 1 : \

529 ((
VP1
Ë&& (
VP2
Ë&& ((VP1)->
v_›
 == (VP2)->v_op) ? \

530 
	`VOP_CMP
(
VP1
, 
VP2
Ë: 0))

	)

535 
	#ATTR_UTIME
 0x01

	)

536 
	#ATTR_EXEC
 0x02

	)

537 
	#ATTR_COMM
 0x04

	)

538 
	#ATTR_HINT
 0x08

	)

539 
	#ATTR_REAL
 0x10

	)

544 
	#VBSIZE
(
vp
) ((vp)->
v_vf•
->
vfs_bsize
)

	)

545 
	#NULLVP
 ((
vnode
 *)0)

	)

546 
	#NULLVPP
 ((
vnode
 **)0)

	)

548 #ifdef 
_KERNEL


553 
	sasync_ªqs
 {

554 
async_ªqs
 *
a_√xt
;

555 
vnode
 *
a_vp
;

556 
u_off£t_t
 
a_off
;

557 
uöt_t
 
a_Àn
;

558 
a_Êags
;

559 
¸ed
 *
a_¸ed
;

560 
ush‹t_t
 
a_¥óŒo˚d
;

566 
	#VN_DISPOSE
(
µ
, 
Êag
, 
dn
, 
¸
) { \

567 
vnode
 
kvp
; \

568 (
µ
)->
p_vnode
 !
NULL
 && (µ)->p_vnodê!&
kvp
) \

569 
	`VOP_DISPOSE
((
µ
)->
p_vnode
, (µ), (
Êag
), (
dn
), (
¸
)); \

570 (
Êag
Ë=
B_FREE
) \

571 
	`∑ge_‰ì
((
µ
), (
dn
)); \

573 
	`∑ge_de°roy
((
µ
), (
dn
)); \

574 }

	)

579 #ifdef 
__˝lu•lus


	@/usr/include/sys/buf.h

13 #i‚de‡
_SYS_BUF_H


14 
	#_SYS_BUF_H


	)

16 #¥agm®
idít
 "@(#)buf.h 1.44 99/04/14 SMI"

18 
	~<sys/ty≥s32.h
>

19 
	~<sys/t_lock.h
>

20 
	~<sys/k°©.h
>

22 #ifdef 
__˝lu•lus


56 
	sbuf
 {

57 
b_Êags
;

58 
buf
 *
b_f‹w
;

59 
buf
 *
b_back
;

60 
buf
 *
av_f‹w
;

61 
buf
 *
av_back
;

62 
o_dev_t
 
b_dev
;

63 
size_t
 
b_bcou¡
;

64 
	u
{

65 
ˇddr_t
 
b_addr
;

66 *
b_w‹ds
;

67 
fs
 *
b_fs
;

68 
csum
 *
b_cs
;

69 
cg
 *
b_cg
;

70 
döode
 *
b_döo
;

71 
daddr32_t
 *
b_daddr
;

72 } 
b_un
;

74 
	#∑ddr
(
X
) (
∑ddr_t
)(X->
b_un
.
b_addr
)

	)

76 
Œdaddr_t
 
_b_blkno
;

77 
	#b_lblkno
 
_b_blkno
.
_f


	)

78 #ifde‡
_LP64


79 
	#b_blkno
 
_b_blkno
.
_f


	)

81 
	#b_blkno
 
_b_blkno
.
_p
.
_l


	)

84 
b_€º‹
;

85 
size_t
 
b_ªsid
;

86 
˛ock_t
 
b_°¨t
;

87 
¥oc
 *
b_¥oc
;

88 
∑ge
 *
b_∑ges
;

89 
˛ock_t
 
b_ª…ime
;

91 
	#b_a˘f
 
av_f‹w


	)

92 
	#b_a˘l
 
av_back


	)

93 
	#b_a˘ive
 
b_bcou¡


	)

94 
	#b_îr˙t
 
b_ªsid


	)

95 
size_t
 
b_bufsize
;

96 (*
b_iod⁄e
)(
buf
 *);

97 
vnode
 *
b_vp
;

98 
buf
 *
b_chaö
;

99 
b_ªq˙t
;

100 
b_îr‹
;

101 *
b_¥iv©e
;

102 
dev_t
 
b_edev
;

103 
k£ma_t
 
b_£m
;

104 
k£ma_t
 
b_io
;

105 
buf
 *
b_li°
;

106 
∑ge
 **
b_shadow
;

107 } 
	tbuf_t
;

114 
	sbufhd
 {

115 
b_Êags
;

116 
buf
 *
b_f‹w
, *
b_back
;

118 
	sdiskhd
 {

119 
b_Êags
;

120 
buf
 *
b_f‹w
, *
b_back
;

121 
buf
 *
av_f‹w
, *
av_back
;

122 
b_bcou¡
;

129 
	sbio°©s
 {

130 
k°©_«med_t
 
bio_lookup
;

131 
k°©_«med_t
 
bio_hô
;

132 
k°©_«med_t
 
bio_bufw™t
;

133 
k°©_«med_t
 
bio_bufwaô
;

134 
k°©_«med_t
 
bio_bufbusy
;

135 
k°©_«med_t
 
bio_bufdup
;

142 
	#B_BUSY
 0x0001

	)

143 
	#B_DONE
 0x0002

	)

144 
	#B_ERROR
 0x0004

	)

145 
	#B_PAGEIO
 0x0010

	)

146 
	#B_PHYS
 0x0020

	)

147 
	#B_READ
 0x0040

	)

148 
	#B_WRITE
 0x0100

	)

151 
	#B_KERNBUF
 0x0008

	)

152 
	#B_WANTED
 0x0080

	)

153 
	#B_AGE
 0x000200

	)

154 
	#B_ASYNC
 0x000400

	)

155 
	#B_DELWRI
 0x000800

	)

156 
	#B_STALE
 0x001000

	)

157 
	#B_DONTNEED
 0x002000

	)

158 
	#B_REMAPPED
 0x004000

	)

159 
	#B_FREE
 0x008000

	)

160 
	#B_INVAL
 0x010000

	)

161 
	#B_FORCE
 0x020000

	)

162 
	#B_HEAD
 0x040000

	)

163 
	#B_NOCACHE
 0x080000

	)

164 
	#B_TRUNC
 0x100000

	)

165 
	#B_SHADOW
 0x200000

	)

166 
	#B_RETRYWRI
 0x400000

	)

172 
	#bªmhash
(
bp
) { \

173 
	`ASSERT
((
bp
)->
b_f‹w
 !
NULL
); \

174 
	`ASSERT
((
bp
)->
b_back
 !
NULL
); \

175 (
bp
)->
b_back
->
b_f‹w
 = (bp)->b_forw; \

176 (
bp
)->
b_f‹w
->
b_back
 = (bp)->b_back; \

177 (
bp
)->
b_f‹w
 = (bp)->
b_back
 = 
NULL
; \

178 }

	)

179 
	#böshash
(
bp
, 
dp
) { \

180 
	`ASSERT
((
bp
)->
b_f‹w
 =
NULL
); \

181 
	`ASSERT
((
bp
)->
b_back
 =
NULL
); \

182 
	`ASSERT
((
dp
)->
b_f‹w
 !
NULL
); \

183 
	`ASSERT
((
dp
)->
b_back
 !
NULL
); \

184 (
bp
)->
b_f‹w
 = (
dp
)->b_forw; \

185 (
bp
)->
b_back
 = (
dp
); \

186 (
dp
)->
b_f‹w
->
b_back
 = (
bp
); \

187 (
dp
)->
b_f‹w
 = (
bp
); \

188 }

	)

211 
	shbuf
 {

212 
b_Êags
;

214 
buf
 *
b_f‹w
;

215 
buf
 *
b_back
;

217 
buf
 *
av_f‹w
;

218 
buf
 *
av_back
;

220 
b_Àngth
;

221 
kmuãx_t
 
b_lock
;

228 
	sdwbuf
 {

229 
b_Êags
;

231 
buf
 *
b_f‹w
;

232 
buf
 *
b_back
;

234 
buf
 *
av_f‹w
;

235 
buf
 *
av_back
;

243 
	#nŸavaû
(
bp
) \

245 
	`ASSERT
(
	`SEMA_HELD
(&
bp
->
b_£m
)); \

246 
	`ASSERT
((
bp
)->
av_f‹w
 !
NULL
); \

247 
	`ASSERT
((
bp
)->
av_back
 !
NULL
); \

248 
	`ASSERT
((
bp
)->
av_f‹w
 != (bp)); \

249 
	`ASSERT
((
bp
)->
av_back
 != (bp)); \

250 (
bp
)->
av_back
->
av_f‹w
 = (bp)->av_forw; \

251 (
bp
)->
av_f‹w
->
av_back
 = (bp)->av_back; \

252 (
bp
)->
b_Êags
 |
B_BUSY
; \

253 (
bp
)->
av_f‹w
 = (bp)->
av_back
 = 
NULL
; \

254 }

	)

256 #i‡
deföed
(
_KERNEL
)

265 
	#BREAD
(
dev
, 
blkno
, 
bsize
) \

266 
	`bªad_comm⁄
–
NULL
, 
dev
, 
blkno
, 
bsize
)

	)

268 
	#BWRITE
(
bp
) \

269 
	`bwrôe_comm⁄
–
NULL
, 
bp
, 0, \

271 (
B_READ
 | 
B_DONE
 | 
B_ERROR
 | 
B_DELWRI
))

	)

273 
	#BWRITE2
(
bp
) \

274 
	`bwrôe_comm⁄
–
NULL
, 
bp
, 1, \

276 (
B_READ
 | 
B_DONE
 | 
B_ERROR
 | 
B_DELWRI
))

	)

278 
	#GETBLK
(
dev
, 
blkno
, 
bsize
) \

279 
	`gëblk_comm⁄
–
NULL
, 
dev
, 
blkno
, 
bsize
, 0)

	)

289 
	#bdrwrôe
(
bp
) { \

290 (
bp
)->
b_Êags
 |
B_RETRYWRI
; \

291 
	`bdwrôe
((
bp
)); \

292 }

	)

297 
	#brwrôe
(
bp
) { \

298 (
bp
)->
b_Êags
 |
B_RETRYWRI
; \

299 
	`bwrôe_comm⁄
((
bp
), 0, 1, \

300 (
B_READ
 | 
B_DONE
 | 
B_ERROR
 | 
B_DELWRI
)); \

301 }

	)

303 
hbuf
 *hbuf;

304 
dwbuf
 *dwbuf;

305 
buf
 *buf;

306 
buf
 
b‰ìli°
;

308 (*
bio_lufs_°øãgy
)(*, 
buf_t
 *);

310 
bcheck
(
dev_t
, 
buf
 *);

311 
iowaô
(
buf
 *);

312 
hash2öts
(
x
, 
y
);

313 
bio_busy
();

314 
biowaô
(
buf
 *);

315 
biomodifõd
(
buf
 *);

316 
gëîr‹
(
buf
 *);

317 
möphys
(
buf
 *);

322 
bwrôe_comm⁄
(*
ufsvf•
, 
buf
 *, 
f‹˚_waô
,

323 
do_ªl£
, 
˛ór_Êags
);

324 
bwrôe
(
buf
 *);

325 
bwrôe2
(
buf
 *);

326 
bdwrôe
(
buf
 *);

327 
bawrôe
(
buf
 *);

328 
bªl£
(
buf
 *);

329 
iod⁄e
(
buf
 *);

330 
˛rbuf
(
buf
 *);

331 
bÊush
(
dev_t
);

332 
blkÊush
(
dev_t
, 
daddr_t
);

333 
bövÆ
(
dev_t
);

334 
bfövÆ
(
dev_t
, );

335 
böô
();

336 
biod⁄e
(
buf
 *);

337 
bioöô
(
buf
 *);

338 
bioföi
(
buf
 *);

339 
bp_m≠ö
(
buf
 *);

340 
bp_m≠out
(
buf
 *);

341 
bp_öô
(
size_t
, 
uöt_t
);

342 
bp_cﬁ‹
(
buf
 *);

343 
∑geio_d⁄e
(
buf
 *);

344 
buf
 *
bªad
(
dev_t
, 
daddr_t
, );

345 
buf
 *
bªad_comm⁄
(*, 
dev_t
, 
daddr_t
, );

346 
buf
 *
bªada
(
dev_t
, 
daddr_t
, daddr_t, );

347 
buf
 *
gëblk
(
dev_t
, 
daddr_t
, );

348 
buf
 *
gëblk_comm⁄
(*, 
dev_t
, 
daddr_t
, , );

349 
buf
 *
ngëeblk
();

350 
buf
 *
gëeblk
();

351 
buf
 *
∑geio_£tup
(
∑ge
 *, 
size_t
, 
vnode
 *, );

352 
bi€º‹
(
buf
 *
bp
, 
îr‹
);

353 
bi‹e£t
(
buf
 *
bp
);

354 
buf
 *
bio˛⁄e
(bu‡*, 
off_t
, 
size_t
, 
dev_t
, 
daddr_t
,

355 (*)(
buf
 *), buf *, );

356 
size_t
 
biosize
();

359 #ifdef 
__˝lu•lus


	@/usr/include/sys/refstr.h

6 #i‚de‡
_SYS_REFSTR_H


7 
	#_SYS_REFSTR_H


	)

9 #¥agm®
idít
 "@(#)refstr.h 1.1 99/03/31 SMI"

11 #ifdef 
__˝lu•lus


20 
ªf°r
 
	tªf°r_t
;

22 #if 
deföed
(
_KERNEL
)

24 
ªf°r_t
 *
ªf°r_Æloc
(const *);

25 c⁄° *
ªf°r_vÆue
(
ªf°r_t
 *);

26 
ªf°r_hﬁd
(
ªf°r_t
 *);

27 
ªf°r_ªÀ
(
ªf°r_t
 *);

31 #ifdef 
__˝lu•lus


	@/usr/include/sys/reg.h

6 #i‚def 
_SYS_REG_H


7 
	#_SYS_REG_H


	)

9 #¥agm®
idít
 "@(#)reg.h 1.16 99/05/04 SMI"

11 #i‡
deföed
(
i386
Ë|| deföed(
__i386
)

13 
	~<ü32/sys/ªg.h
>

15 #ñi‡
deföed
(
__ü64
)

17 
	~<ü64/sys/ªg.h
>

	@/usr/include/sys/segment.h

15 #i‚def 
_SYS_SEGMENT_H


16 
	#_SYS_SEGMENT_H


	)

18 #¥agm®
idít
 "@(#)segment.h 1.14 99/05/04 SMI"

20 #ifdef 
__˝lu•lus


24 #i‡! 
deföed
(
_ASM
)

41 
	s£g_desc
 {

42 
uöt32_t
 
s_ba£
;

43 
uöt32_t
 
s_limacc
;

47 
	sds¸
 {

48 
	ma_lim0015
:16,

49 
	ma_ba£0015
:16,

50 
	ma_ba£1623
:8,

51 
	ma_acc0007
:8,

52 
	ma_lim1619
:4,

53 
	ma_acc0811
:4,

54 
	ma_ba£2431
:8;

59 
	#UDATA_ACC1
 0xF2

	)

60 
	#KDATA_ACC1
 0x92

	)

61 
	#DATA_ACC2
 0xC

	)

62 
	#DATA_ACC2_S
 0x4

	)

63 
	#UTEXT_ACC1
 0xFA

	)

64 
	#KTEXT_ACC1
 0x9A

	)

65 
	#TEXT_ACC2
 0xC

	)

66 
	#TEXT_ACC2_S
 0x4

	)

67 
	#LDT_UACC1
 0xE2

	)

68 
	#LDT_KACC1
 0x82

	)

69 
	#LDT_ACC2
 0x0

	)

70 
	#TSS3_KACC1
 0x89

	)

71 
	#TSS3_KBACC1
 0x8B

	)

72 
	#TSS2_KACC1
 0x81

	)

73 
	#TSS3_UACC1
 0xE9

	)

74 
	#TGATE_UACC1
 0xE5

	)

75 
	#TSS2_UACC1
 0xE1

	)

76 
	#TSS_ACC2
 0x0

	)

77 
	#SEG_CONFORM
 0X4

	)

79 
	#LDT_TYPE
 0x2

	)

81 
	#MKDSCR
(
ba£
, 
limô
, 
acc1
, 
acc2
) \

82 { (
ul⁄g_t
)(
ba£
), \

83 ((
ul⁄g_t
)(
limô
)|((ul⁄g_t)(
acc2
)<<20)|((ul⁄g_t)(
acc1
)<<24)Ë}

	)

86 
	#LDTSEL
 0x140

	)

87 
	#UTSSSEL
 0x148

	)

88 
	#KTSSSEL
 0x150

	)

89 
	#KCSSEL
 0x158

	)

90 
	#KDSSEL
 0x160

	)

91 
	#DFTSSSEL
 0x168

	)

92 
	#JTSSSEL
 0x170

	)

93 
	#MON1SEL
 0x178

	)

94 
	#MON3SEL
 0x180

	)

95 
	#FPESEL
 0x193

	)

96 
	#XTSSSEL
 0x188

	)

97 
	#GRANBIT
 0x8

	)

98 
	#STSSSEL
 0x1a0

	)

99 
	#KFSSEL
 0x1a8

	)

100 
	#KGSSEL
 0x1b0

	)

103 
	#USER_CS
 0x17

	)

104 
	#USER_DS
 0x1F

	)

105 
	#USER_SCALL
 0x07

	)

106 
	#USER_SIGCALL
 0x0F

	)

107 
	#USER_ALTSCALL
 0x27

	)

108 
	#USER_ALTSIGCLEAN
 0x2F

	)

110 
	#IDTSZ
 256

	)

111 
	#MONIDTSZ
 16

	)

112 
	#MINLDTSZ
 64

	)

113 
	#MAXLDTSZ
 8192

	)

114 
	#NUMSYSLDTS
 6

	)

115 
	#GDTSZ
 90

	)

116 
	#SEL_LDT
 4

	)

117 
	#CPL_MASK
 3

	)

120 
	#CPL_KERNEL
 0

	)

121 
	#CPL_OS1
 1

	)

122 
	#CPL_OS2
 2

	)

123 
	#CPL_APPLICATION
 3

	)

125 
	#KTBASE
 0xC0008000

	)

126 
	#KDBASE
 0xC0068000

	)

128 #i‡! 
deföed
(
_ASM
)

140 
	sg©e_desc
 {

141 
	gg_off
;

142 
	gg_£l
;

143 
	gg_wcou¡
;

144 
	gg_ty≥
;

149 
	sgds¸
 {

150 
	ggd_off0015
:16,

151 
	ggd_£À˘‹
:16,

152 
	ggd_unu£d
:8,

153 
	ggd_acc0007
:8,

154 
	ggd_off1631
:16;

157 
	uh¨dw¨e_des¸ùt‹
 {

158 
	sgíîic_des¸ùt‹
 {

159 
uöt32_t
 
	glow
;

160 
uöt32_t
 
	ghigh
;

161 } 
	ggíîic_£g
;

162 
	sd©a_£gmít_des¸ùt‹
 {

163 
	glimô_low
 : 16;

164 
	gba£_addr_low
 : 16;

165 
	gba£_addr_mid
 : 8;

166 
	gac˚s£d
 : 1;

167 
	gwrôabÀ
 : 1;

168 
	gex∑nsi⁄_dúe˘i⁄
 : 1;

169 
	gmbz1
: 1;

170 
	gmbo
 : 1;

171 
	g¥ivûege_Àvñ
 : 2;

172 
	g¥e£¡
 : 1;

173 
	glimô_high
 : 4;

174 
	gavaûabÀ
 : 1;

175 
	gmbz2
 : 1;

176 
	gbig
 : 1;

177 
	ggønuœrôy
 : 1;

178 
	gba£_addr_high
 : 8;

179 } 
	gd©a_£g
;

180 
	scode_£gmít_des¸ùt‹
 {

181 
	glimô_low
 : 16;

182 
	gba£_addr_low
 : 16;

183 
	gba£_addr_mid
 : 8;

184 
	gac˚s£d
 : 1;

185 
	gªadabÀ
 : 1;

186 
	gc⁄f‹mög
 : 1;

187 
	gmbo1
: 1;

188 
	gmbo2
 : 1;

189 
	g¥ivûege_Àvñ
 : 2;

190 
	g¥e£¡
 : 1;

191 
	glimô_high
 : 4;

192 
	gavaûabÀ
 : 1;

193 
	gmbz
 : 1;

194 
	gdeÁu…_desc
 : 1;

195 
	ggønuœrôy
 : 1;

196 
	gba£_addr_high
 : 8;

197 } 
	gcode_£g
;

198 
	ssy°em_£gmít_des¸ùt‹
 {

199 
	glimô_low
 : 16;

200 
	gba£_addr_low
 : 16;

201 
	gba£_addr_mid
 : 8;

202 
	gty≥
 : 4;

203 
	gmbz1
 : 1;

204 
	g¥ivûege_Àvñ
 : 2;

205 
	g¥e£¡
 : 1;

206 
	glimô_high
 : 4;

208 
	gmbz2
 : 1;

210 
	ggønuœrôy
 : 1;

211 
	gba£_addr_high
 : 8;

212 } 
	gsy°em_£g
;

213 
	sˇŒ_g©e_des¸ùt‹
 {

214 
	goff£t_low
 : 16;

215 
	g£gmít_£À˘‹
 : 16;

216 
	g∑øm_cou¡
 : 5;

217 
	gmbz1
 : 3;

218 
	gty≥
 : 4;

219 
	gmbz2
 : 1;

220 
	g¥ivûege_Àvñ
 : 2;

221 
	g¥e£¡
 : 1;

222 
	goff£t_high
 : 16;

223 } 
	gˇŒ_g©e
;

229 
	#GATE_UACC
 0xE0

	)

230 
	#GATE_KACC
 0x80

	)

231 
	#GATE_386CALL
 0xC

	)

232 
	#GATE_386INT
 0xE

	)

233 
	#GATE_386TRP
 0xF

	)

234 
	#GATE_TSS
 0x5

	)

237 
	#MKGATE
(
πn
, 
£l
, 
acc
) \

238 {(
ul⁄g_t
)(
πn
), (
ush‹t_t
)(
£l
), (
uch¨_t
)0, (uch¨_t)(
acc
)}

	)

239 
	#MKINTG
(
πn
) 
	`MKGATE
‘ä, 
KCSSEL
, 
GATE_KACC
|
GATE_386INT
)

	)

240 
	#MKKTRPG
(
πn
) 
	`MKGATE
‘ä, 
KCSSEL
, 
GATE_KACC
|
GATE_386TRP
)

	)

241 
	#MKUTRPG
(
πn
) 
	`MKGATE
‘ä, 
KCSSEL
, 
GATE_UACC
|
GATE_386TRP
)

	)

242 
	#MKUINTG
(
πn
) 
	`MKGATE
‘ä, 
KCSSEL
, 
GATE_UACC
|
GATE_386INT
)

	)

244 
	#£…oi
(
£l
) ((
ush‹t_t
)(£lË>> 3)

	)

246 
	#£tds¸ba£
(
Ds¸
, 
Ba£
)\

247 ((
ds¸
 *)(
Ds¸
))->
a_ba£0015
 = (
ush‹t_t
)(
Ba£
);\

248 ((
ds¸
 *)(
Ds¸
))->
a_ba£1623
 = ((
Ba£
)>>16)&0x000000FF;\

249 ((
ds¸
 *)(
Ds¸
))->
a_ba£2431
 = ((
Ba£
)>>24Ë& 0x000000FF;

	)

250 
	#£tds¸acc1
(
Ds¸
, 
Acc1
) \

251 ((
ds¸
 *)(
Ds¸
))->
a_acc0007
 = (
uch¨_t
)(
Acc1
)

	)

252 
	#£tds¸acc2
(
Ds¸
, 
Acc2
) \

253 ((
ds¸
 *)(
Ds¸
))->
a_acc0811
 = (
uch¨_t
)(
Acc2
)

	)

254 
	#£tds¸lim
(
Ds¸
, 
Limô
)\

255 ((
ds¸
 *)(
Ds¸
))->
a_lim0015
 = (
ush‹t_t
)(
Limô
);\

256 ((
ds¸
 *)(
Ds¸
))->
a_lim1619
 = ((
Limô
)>>16)&0x0000000F;

	)

258 
	#ôo£l
(
i
) (((
ush‹t_t
)(iË<< 3Ë| 0x7)

	)

260 
	#gëds¸ba£
(
Ds¸
)\

261 (((
ds¸
 *)(
Ds¸
))->
a_ba£2431
 << 24) | \

262 (((
ds¸
 *)(
Ds¸
))->
a_ba£1623
 << 16) | \

263 (((
ds¸
 *)(
Ds¸
))->
a_ba£0015
)

	)

264 
	#gëds¸acc1
(
Ds¸
) \

265 ((
ds¸
 *)(
Ds¸
))->
a_acc0007


	)

266 
	#gëds¸acc2
(
Ds¸
) \

267 ((
ds¸
 *)(
Ds¸
))->
a_acc0811


	)

268 
	#gëds¸lim
(
Ds¸
)\

269 (((
ds¸
 *)(
Ds¸
))->
a_lim1619
 << 16) | \

270 (((
ds¸
 *)(
Ds¸
))->
a_lim0015
)

	)

272 
	#IA32_LDT_ADDR
 0xf0000000

	)

274 #ifdef 
__˝lu•lus


	@/usr/include/sys/task.h

6 #i‚def 
_SYS_TASK_H


7 
	#_SYS_TASK_H


	)

9 #¥agm®
idít
 "@(#)task.h 1.1 00/02/14 SMI"

11 #ifdef 
__˝lu•lus


15 
	~<sys/∑øm.h
>

16 
	~<sys/ty≥s.h
>

18 
	#TASK_NORMAL
 0x0

	)

19 
	#TASK_FINAL
 0x1

	)

20 
	#TASK_FINALITY
 0x1

	)

22 #i‡
deföed
(
_KERNEL
)

24 
	~<sys/id_•a˚.h
>

25 
	~<sys/exac˘_im∂.h
>

26 
	~<sys/kmem.h
>

28 
¥oc
;

30 
	sèsk
 {

31 
èskid_t
 
tk_tkid
;

32 
uöt_t
 
tk_Êags
;

33 
k¥oje˘
 *
tk_¥oj
;

34 
uöt_t
 
tk_hﬁd_cou¡
;

35 
¥oc
 *
tk_memb_li°
;

38 
kmuãx_t
 
tk_ußge_lock
;

39 
èsk_ußge_t
 *
tk_ußge
;

40 
èsk_ußge_t
 *
tk_¥evußge
;

41 } 
	tèsk_t
;

43 
èsk_t
 
èsk0
;

45 
èsk_öô
();

46 
èsk_t
 *
èsk_¸óã
(
¥ojid_t
);

47 
èsk_begö
(
èsk_t
 *, 
¥oc
 *);

48 
èsk_©èch
(
èsk_t
 *, 
¥oc
 *);

49 
èsk_dëach
(
¥oc
 *);

50 
èsk_t
 *
èsk_hﬁd_by_id
(
èskid_t
);

51 
èsk_ªÀ
(
èsk_t
 *);

52 
èsk_hñd
(
èsk_t
 *);

53 
èsk_íd
(
èsk_t
 *);

57 
	gèsk
;

59 
èskid_t
 
£âaskid
(
¥ojid_t
, 
uöt_t
);

60 
èskid_t
 
gëèskid
();

64 #ifdef 
__˝lu•lus


	@/usr/include/sys/thread.h

6 #i‚def 
_SYS_THREAD_H


7 
	#_SYS_THREAD_H


	)

9 #¥agm®
idít
 "@(#)thread.h 1.104 00/03/27 SMI"

11 
	~<sys/ty≥s.h
>

12 
	~<sys/t_lock.h
>

13 
	~<sys/klwp.h
>

14 
	~<sys/time.h
>

15 
	~<sys/sig«l.h
>

17 #ifdef 
__˝lu•lus


30 
	#TS_FREE
 0x00

	)

31 
	#TS_SLEEP
 0x01

	)

32 
	#TS_RUN
 0x02

	)

33 
	#TS_ONPROC
 0x04

	)

34 
	#TS_ZOMB
 0x08

	)

35 
	#TS_STOPPED
 0x10

	)

37 
	s˘x›
 {

38 (*
ßve_›
)(*);

39 (*
ª°‹e_›
)(*);

40 (*
f‹k_›
)(*, *);

41 (*
lwp_¸óã_›
)(*, *);

42 (*
‰ì_›
)(*, );

43 *
¨g
;

44 
˘x›
 *
√xt
;

45 } 
	t˘x›_t
;

52 
	s_afd
 {

53 *
a_fd
;

54 
a_nfd
;

55 
a_°Æe
;

56 
a_buf
[1];

57 } 
	tafd_t
;

64 
	s
{

65 
ˇddr_t
 
lc_wch™0
;

66 
ˇddr_t
 
lc_wch™
;

67 } 
	tlwpch™_t
;

69 
_kthªad
 *
	tkthªad_id_t
;

71 
tu∫°ûe
;

72 
å≠_öfo
;

73 
upimuãx
;

75 
	s_kthªad
 {

76 
_kthªad
 *
t_lök
;

78 
ˇddr_t
 
t_°k
;

79 #i‡
deföed
(
__ü64
)

80 
ˇddr_t
 
t_ªg°k
;

82 (*
t_°¨çc
)();

83 
˝u
 *
t_bound_˝u
;

84 
t_afföôy˙t
;

85 
t_böd_˝u
;

86 
ush‹t_t
 
t_Êag
;

87 
ush‹t_t
 
t_¥oc_Êag
;

88 
ush‹t_t
 
t_schedÊag
;

89 vﬁ©ûê
t_¥ìm±
;

90 vﬁ©ûê
t_¥ìm±_lk
;

91 
uöt_t
 
t_°©e
;

92 
¥i_t
 
t_¥i
;

93 
¥i_t
 
t_ïri
;

94 
œbñ_t
 
t_pcb
;

95 
lwpch™_t
 
t_lwpch™
;

96 
	#t_wch™0
 
t_lwpch™
.
lc_wch™0


	)

97 
	#t_wch™
 
t_lwpch™
.
lc_wch™


	)

98 
_sobj_›s
 *
t_sobj_›s
;

99 
id_t
 
t_cid
;

100 
thªad_›s
 *
t_˛funcs
;

101 *
t_˛d©a
;

102 
˘x›_t
 *
t_˘x
;

103 
uöçå_t
 
t_loÁu…
;

104 
œbñ_t
 *
t_⁄Áu…
;

105 *
t_noÁu…
;

106 
ˇddr_t
 
t_sw≠
;

107 
lock_t
 
t_lock
;

108 
uöt8_t
 
t_lock°©
;

109 
uöt8_t
 
t_pû
;

110 
di•_lock_t
 
t_pi_lock
;

111 
˝u
 *
t_˝u
;

112 
_kthªad
 *
t_öå
;

113 
uöt_t
 
t_did
;

114 
ˇddr_t
 
t_äf_çdp
;

119 
id_t
 
t_tid
;

120 
id_t
 
t_waôf‹
;

121 
timeout_id_t
 
t_Æ¨mid
;

122 
ôimîvÆ
 
t_ªÆôimî
;

123 
timeout_id_t
 
t_ôimîid
;

124 
sigqueue
 *
t_sigqueue
;

125 
k_sig£t_t
 
t_sig
;

126 
k_sig£t_t
 
t_hﬁd
;

127 
_kthªad
 *
t_f‹w
;

128 
_kthªad
 *
t_back
;

129 
klwp_t
 *
t_lwp
;

130 
¥oc
 *
t_¥o˝
;

131 
ˇddr_t
 
t_audô_d©a
;

132 
_kthªad
 *
t_√xt
;

133 
_kthªad
 *
t_¥ev
;

134 
vnode
 *
t_åa˚
;

135 
ush‹t_t
 
t_why°›
;

136 
ush‹t_t
 
t_wh©°›
;

137 
t_d¶Ÿ
;

138 
pﬁl°©e
 *
t_pﬁl°©e
;

139 
pﬁlˇche
 *
t_pﬁlˇche
;

140 
¸ed
 *
t_¸ed
;

141 
time_t
 
t_°¨t
;

142 
˛ock_t
 
t_lbﬁt
;

143 
hπime_t
 
t_°›time
;

144 
t_sy¢um
;

145 
kc⁄dv¨_t
 
t_dñay_cv
;

146 
uöt_t
 
t_p˘˝u
;

154 
di•_lock_t
 *
t_lockp
;

155 
ush‹t_t
 
t_ﬁd•l
;

156 vﬁ©ûê
t_¥e_sys
;

157 
lock_t
 
t_lock_Êush
;

158 
_di•
 *
t_di•_queue
;

159 
˛ock_t
 
t_di•_time
;

160 
uöt_t
 
t_k¥i_ªq
;

177 
	u__tu
 {

178 
	s__ts
 {

179 vﬁ©ûê
_t_a°Êag
;

180 vﬁ©ûê
_t_sig_check
;

181 vﬁ©ûê
_t_po°_sys
;

182 vﬁ©ûê
_t_å≠ªt
;

183 } 
_ts
;

184 vﬁ©ûê
_t_po°_sys_a°
;

185 } 
_tu
;

186 
	#t_a°Êag
 
_tu
.
_ts
.
_t_a°Êag


	)

187 
	#t_sig_check
 
_tu
.
_ts
.
_t_sig_check


	)

188 
	#t_po°_sys
 
_tu
.
_ts
.
_t_po°_sys


	)

189 
	#t_å≠ªt
 
_tu
.
_ts
.
_t_å≠ªt


	)

190 
	#t_po°_sys_a°
 
_tu
.
_t_po°_sys_a°


	)

196 
hπime_t
 
t_waôrq
;

197 
t_m°©e
;

198 
	sΩrof
 {

199 
Ω_™y°©e
;

200 
uöt_t
 
Ω_°©e
[
NMSTATES
];

201 } *
t_Ωrof
;

209 
tu∫°ûe
 *
t_¥ioöv
;

216 
tu∫°ûe
 *
t_ts
;

222 
uöt_t
 
t_mmu˘x
;

229 
	stsd_thªad
 {

230 
tsd_thªad
 *
ts_√xt
;

231 
tsd_thªad
 *
ts_¥ev
;

232 
uöt_t
 
ts_nkeys
;

233 **
ts_vÆue
;

234 } *
t_tsd
;

236 
˛ock_t
 
t_°ime
;

237 
do‹_d©a
 *
t_do‹
;

238 
kmuãx_t
 *
t_∂ockp
;

240 
_kthªad
 *
t_h™doff
;

241 
sc_d©a
 *
t_sched˘l
;

243 
˝u∑π
 *
t_˝u∑π
;

244 
t_böd_p£t
;

246 
c›y›s
 *
t_c›y›s
;

248 
ˇddr_t
 
t_°kba£
;

249 #i‡
deföed
(
__ü64
)

250 
size_t
 
t_°ksize
;

252 
∑ge
 *
t_ªd_µ
;

254 
_afd
 
t_a˘ivefd
;

256 
_kthªad
 *
t_¥if‹w
;

257 
_kthªad
 *
t_¥iback
;

259 
¶ìpq
 *
t_¶ìpq
;

260 
å≠_öfo
 *
t_∑nic_å≠
;

261 *
t_ªsv
;

262 
upimuãx
 *
t_upimuãx
;

263 
uöt32_t
 
t_nupöe°
;

264 
kmuãx_t
 
t_dñay_lock
;

265 } 
	tkthªad_t
;

278 
	#T_INTR_THREAD
 0x0001

	)

279 
	#T_WAKEABLE
 0x0002

	)

280 
	#T_TOMASK
 0x0004

	)

281 
	#T_TALLOCSTK
 0x0008

	)

282 
	#T_WOULDBLOCK
 0x0020

	)

283 
	#T_DONTBLOCK
 0x0040

	)

284 
	#T_DONTPEND
 0x0080

	)

285 
	#T_SYS_PROF
 0x0100

	)

286 
	#T_WAITCVSEM
 0x0200

	)

287 
	#T_WATCHPT
 0x0400

	)

288 
	#T_PANIC
 0x0800

	)

295 
	#TP_HOLDLWP
 0x0002

	)

296 
	#TP_TWAIT
 0x0004

	)

297 
	#TP_LWPEXIT
 0x0008

	)

298 
	#TP_PRSTOP
 0x0010

	)

299 
	#TP_CHKPT
 0x0020

	)

300 
	#TP_EXITLWP
 0x0040

	)

301 
	#TP_PRVSTOP
 0x0080

	)

302 
	#TP_MSACCT
 0x0100

	)

303 
	#TP_STOPPING
 0x0200

	)

304 
	#TP_WATCHPT
 0x0400

	)

305 
	#TP_PAUSE
 0x0800

	)

306 
	#TP_CHANGEBIND
 0x1000

	)

312 
	#TS_LOAD
 0x0001

	)

313 
	#TS_DONT_SWAP
 0x0002

	)

314 
	#TS_SWAPENQ
 0x0004

	)

315 
	#TS_ON_SWAPQ
 0x0008

	)

316 
	#TS_CSTART
 0x0100

	)

317 
	#TS_UNPAUSE
 0x0200

	)

318 
	#TS_XSTART
 0x0400

	)

319 
	#TS_PSTART
 0x0800

	)

320 
	#TS_RESUME
 0x1000

	)

321 
	#TS_CREATE
 0x2000

	)

322 
	#TS_ALLSTART
 \

323 (
TS_CSTART
|
TS_UNPAUSE
|
TS_XSTART
|
TS_PSTART
|
TS_RESUME
|
TS_CREATE
)

	)

328 
	#a°⁄
(
t
) (—)->
t_a°Êag
 = 1)

	)

329 
	#a°off
(
t
) (—)->
t_a°Êag
 = 0)

	)

332 
	#ISTOPPED
(
t
Ë(—)->
t_°©e
 =
TS_STOPPED
 && \

333 !((
t
)->
t_schedÊag
 & 
TS_PSTART
))

	)

336 
	#CPR_ISTOPPED
(
t
Ë(—)->
t_°©e
 =
TS_STOPPED
 && \

337 !((
t
)->
t_schedÊag
 & 
TS_RESUME
))

	)

343 
	#VSTOPPED
(
t
) (—)->
t_¥oc_Êag
 & 
TP_PRVSTOP
)

	)

346 
	#CPR_VSTOPPED
(
t
) \

347 ((
t
)->
t_°©e
 =
TS_SLEEP
 && \

348 (
t
)->
t_wch™0
 !
NULL
 && \

349 ((
t
)->
t_Êag
 & 
T_WAKEABLE
) && \

350 ((
t
)->
t_¥oc_Êag
 & 
TP_CHKPT
))

	)

353 
	#SUSPENDED
(
t
Ë(—)->
t_°©e
 =
TS_STOPPED
 && \

354 ((
t
)->
t_schedÊag
 & (
TS_CSTART
|
TS_UNPAUSE
)Ë!(TS_CSTART|TS_UNPAUSE))

	)

357 
	#INHERITED
(
t
) (—)->
t_ïri
 !0)

	)

360 
	#DISP_PRIO
(
t
Ë(
	`INHERITED
—Ë? (t)->
t_ïri
 : (t)->
t_¥i
)

	)

363 
	#ASSIGNED_PRIO
(
t
) (—)->
t_¥i
)

	)

369 
	#SWAP_OK
(
t
) (!
	`LOCK_HELD
(&—)->
t_lock
))

	)

392 
	#¥o˘Ÿ
(
x
) ((x)->
p_éi°
)

	)

393 
	#¥o˘ﬁwp
(
x
) ((x)->
p_éi°
->
t_lwp
)

	)

394 
	#âﬁwp
(
x
) ((x)->
t_lwp
)

	)

395 
	#â›roc
(
x
) ((x)->
t_¥o˝
)

	)

396 
	#lw±Ÿ
(
x
) ((x)->
lwp_thªad
)

	)

397 
	#lw±›roc
(
x
) ((x)->
lwp_¥o˝
)

	)

399 
	#t_pc
 
t_pcb
.
vÆ
[0]

	)

400 
	#t_•
 
t_pcb
.
vÆ
[1]

	)

402 #ifdef 
_KERNEL


404 
kthªad_t
 *
thªadp
();

405 
	#cuπhªad
 (
	`thªadp
())

	)

406 
	#cuΩroc
 (
	`â›roc
(
cuπhªad
))

	)

408 
_kthªad
 
t0
;

409 
kmuãx_t
 
pidlock
;

415 
kmuãx_t
 
thªad_‰ì_lock
;

418 
kthªad_t
 *
idtŸ
(kthªad_à*, 
id_t
);

424 
thªad_ch™ge_¥i
(
kthªad_t
 *
t
, 
¥i_t
 
di•_¥i
, 
‰⁄t
);

425 
thªad_ch™ge_ïri
(
kthªad_t
 *
t
, 
¥i_t
 
di•_¥i
);

432 
thªad_å™sôi⁄
(
kthªad_t
 *);

433 
thªad_lock
(
kthªad_t
 *);

434 
thªad_lock_high
(
kthªad_t
 *);

435 
thªad_⁄¥oc
(
kthªad_t
 *, 
˝u
 *);

437 
	#thªad_u∆ock
(
t
) 
	`di•_lock_exô
(—)->
t_lockp
)

	)

438 
	#thªad_u∆ock_high
(
t
) 
	`di•_lock_exô_high
(—)->
t_lockp
)

	)

439 
	#thªad_u∆ock_n›ªem±
(
t
) 
	`di•_lock_exô_n›ªem±
(—)->
t_lockp
)

	)

441 
	#THREAD_LOCK_HELD
(
t
) (
	`DISP_LOCK_HELD
(—)->
t_lockp
))

	)

443 
di•_lock_t
 
å™sôi⁄_lock
;

444 
di•_lock_t
 
°›_lock
;

446 
ˇddr_t
 
thªad_°k_öô
(caddr_t);

460 
	#THREAD_KPRI_REQUEST
() (
cuπhªad
->
t_k¥i_ªq
++)

	)

461 
	#THREAD_KPRI_RELEASE
() (
cuπhªad
->
t_k¥i_ªq
--)

	)

462 
	#THREAD_KPRI_RELEASE_N
(
n
Ë(
cuπhªad
->
t_k¥i_ªq
 -“))

	)

467 
	#THREAD_SET_STATE
(
ç
, 
°©e
, 
Õ
) \

468 ((
ç
)->
t_°©e
 = 
°©e
, (ç)->
t_lockp
 = 
Õ
)

	)

474 
	#THREAD_TRANSITION
(
ç
Ë 
	`thªad_å™sôi⁄
—p);

	)

479 
	#THREAD_TRANSITION_NOLOCK
(
ç
Ë (—p)->
t_lockp
 = &
å™sôi⁄_lock
)

	)

485 
	#THREAD_RUN
(
ç
, 
Õ
) 
	`THREAD_SET_STATE
—p, 
TS_RUN
,Üp)

	)

491 
	#THREAD_SWAP
(
ç
, 
Õ
) 
	`THREAD_SET_STATE
—p, 
TS_RUN
,Üp)

	)

499 
	#THREAD_STOP
(
ç
) \

500 { 
di•_lock_t
 *
Õ
 = (
ç
)->
t_lockp
; \

501 
	`THREAD_SET_STATE
(
ç
, 
TS_STOPPED
, &
°›_lock
); \

502 
	`di•_lock_exô
(
Õ
); \

503 }

	)

509 
	#THREAD_ZOMB
(
ç
) 
	`THREAD_SET_STATE
—p, 
TS_ZOMB
, 
NULL
)

	)

516 
	#THREAD_ONPROC
(
ç
, 
˝u
) \

517 
	`THREAD_SET_STATE
(
ç
, 
TS_ONPROC
, &(
˝u
)->
˝u_thªad_lock
)

	)

523 
	#THREAD_SLEEP
(
ç
, 
Õ
) { \

524 
di•_lock_t
 *
ép
; \

525 
ép
 = (
ç
)->
t_lockp
; \

526 
	`THREAD_SET_STATE
(
ç
, 
TS_SLEEP
, 
Õ
); \

527 
	`di•_lock_exô_high
(
ép
); \

528 }

	)

534 
	#THREAD_FREEINTR
(
ç
, 
˝u
) \

535 
	`THREAD_SET_STATE
(
ç
, 
TS_FREE
, &(
˝u
)->
˝u_thªad_lock
)

	)

538 #ifdef 
__˝lu•lus


	@/usr/include/sys/timer.h

6 #i‚def 
_SYS_TIMER_H


7 
	#_SYS_TIMER_H


	)

9 #¥agm®
idít
 "@(#)timer.h 1.17 99/06/05 SMI"

11 
	~<sys/ty≥s.h
>

12 
	~<sys/¥oc.h
>

13 
	~<sys/thªad.h
>

15 #ifdef 
__˝lu•lus


19 #ifdef 
_KERNEL


21 
	#_TIMER_MAX
 32

	)

26 
	#ITLK_LOCKED
 0x01

	)

27 
	#ITLK_WANTED
 0x02

	)

28 
	#ITLK_REMOVE
 0x04

	)

30 
	#IT_PERLWP
 0x01

	)

31 
	#IT_SIGNAL
 0x02

	)

33 
˛ock_backíd
;

35 
	sôimî
 {

36 
ôimî•ec_t
 
	mô_ôime
;

37 
hπime_t
 
	mô_hπime
;

38 
ush‹t_t
 
	mô_Êags
;

39 
ush‹t_t
 
	mô_lock
;

40 *
	mô_¨g
;

41 
sigqueue_t
 *
	mô_sigq
;

42 
klwp_t
 *
	mô_lwp
;

43 
¥oc
 *
	mô_¥oc
;

44 
kc⁄dv¨_t
 
	mô_cv
;

45 
	mô_blockîs
;

46 
	mô_≥ndög
;

47 
	mô_ovîrun
;

48 
˛ock_backíd
 *
	mô_backíd
;

49 } 
	tôimî_t
;

51 
	s˛ock_backíd
 {

52 
sigevít
 
	m˛k_deÁu…
;

53 (*
	m˛k_˛ock_£âime
)(
	mtime•ec_t
 *);

54 (*
	m˛k_˛ock_gëtime
)(
	mtime•ec_t
 *);

55 (*
	m˛k_˛ock_gëªs
)(
	mtime•ec_t
 *);

56 (*
	m˛k_timî_¸óã
)(
	môimî_t
 *, 
	msigevít
 *);

57 (*
	m˛k_timî_£âime
)(
	môimî_t
 *, , 
	môimî•ec
 *);

58 (*
	m˛k_timî_gëtime
)(
	môimî_t
 *, 
	môimî•ec
 *);

59 (*
	m˛k_timî_dñëe
)(
	môimî_t
 *);

60 (*
	m˛k_timî_lwpböd
)(
	môimî_t
 *);

61 } 
	t˛ock_backíd_t
;

63 
˛ock_add_backíd
(
˛ockid_t
 
˛ock
, 
˛ock_backíd_t
 *
backíd
);

65 
timî_fúe
(
ôimî_t
 *);

66 
timî_lwpböd
();

68 
timî_func
(
sigqueue_t
 *);

69 
timî_exô
();

70 
timî_lw≥xô
();

71 
˛ock_t
 
hzto
(
timevÆ
 *);

72 
˛ock_t
 
time•e˘ohz
(
time•ec_t
 *,Åimespec_t);

73 
ôimî•ecfix
(
time•ec_t
 *);

74 
time•eˇdd
(
time•ec_t
 *,Åimespec_t *);

75 
time•ecsub
(
time•ec_t
 *,Åimespec_t *);

76 
time•ecfix
(
time•ec_t
 *);

77 
xgëôimî
(
uöt_t
, 
ôimîvÆ
 *, );

78 
x£tôimî
(
uöt_t
, 
ôimîvÆ
 *, );

80 
	#timî•ecis£t
(
tvp
) (—vp)->
tv_£c
 || (tvp)->
tv_n£c
)

	)

81 
	#timî•eccmp
(
tvp
, 
uvp
) ((—vp)->
tv_£c
 - (uvp)->tv_sec) ? \

82 ((
tvp
)->
tv_£c
 - (
uvp
)->tv_£c):(—vp)->
tv_n£c
 - (uvp)->tv_n£c))

	)

83 
	#timî•ec˛ór
(
tvp
) (—vp)->
tv_£c
 = (tvp)->
tv_n£c
 = 0)

	)

85 
	sﬁdsigevít
 {

87 
	m_nŸify
;

88 
	u
{

89 
	m_signo
;

90 (*
	m_nŸify_fun˘i⁄
)(
	msigvÆ
);

91 } 
	m_un
;

92 
sigvÆ
 
	m_vÆue
;

95 #i‡
deföed
(
_SYSCALL32
)

97 
	sﬁdsigevít32
 {

98 
öt32_t
 
	m_nŸify
;

99 
	u
{

100 
öt32_t
 
	m_signo
;

101 
ˇddr32_t
 
	m_nŸify_fun˘i⁄
;

102 } 
	m_un
;

103 
sigvÆ32
 
	m_vÆue
;

109 #ifdef 
__˝lu•lus


	@/usr/include/sys/utrap.h

5 #i‚de‡
_UTRAP_H


6 
	#_UTRAP_H


	)

8 #¥agm®
idít
 "@(#)utrap.h 1.5 99/01/05 SMI"

10 #ifdef 
__˝lu•lus


18 
	#UT_INSTRUCTION_DISABLED
 1

	)

19 
	#UT_INSTRUCTION_ERROR
 2

	)

20 
	#UT_INSTRUCTION_PROTECTION
 3

	)

21 
	#UT_ILLTRAP_INSTRUCTION
 4

	)

22 
	#UT_ILLEGAL_INSTRUCTION
 5

	)

23 
	#UT_PRIVILEGED_OPCODE
 6

	)

24 
	#UT_FP_DISABLED
 7

	)

25 
	#UT_FP_EXCEPTION_IEEE_754
 8

	)

26 
	#UT_FP_EXCEPTION_OTHER
 9

	)

27 
	#UT_TAG_OVERFLOW
 10

	)

28 
	#UT_DIVISION_BY_ZERO
 11

	)

29 
	#UT_DATA_EXCEPTION
 12

	)

30 
	#UT_DATA_ERROR
 13

	)

31 
	#UT_DATA_PROTECTION
 14

	)

32 
	#UT_MEM_ADDRESS_NOT_ALIGNED
 15

	)

33 
	#UT_PRIVILEGED_ACTION
 16

	)

34 
	#UT_ASYNC_DATA_ERROR
 17

	)

35 
	#UT_TRAP_INSTRUCTION_16
 18

	)

36 
	#UT_TRAP_INSTRUCTION_17
 19

	)

37 
	#UT_TRAP_INSTRUCTION_18
 20

	)

38 
	#UT_TRAP_INSTRUCTION_19
 21

	)

39 
	#UT_TRAP_INSTRUCTION_20
 22

	)

40 
	#UT_TRAP_INSTRUCTION_21
 23

	)

41 
	#UT_TRAP_INSTRUCTION_22
 24

	)

42 
	#UT_TRAP_INSTRUCTION_23
 25

	)

43 
	#UT_TRAP_INSTRUCTION_24
 26

	)

44 
	#UT_TRAP_INSTRUCTION_25
 27

	)

45 
	#UT_TRAP_INSTRUCTION_26
 28

	)

46 
	#UT_TRAP_INSTRUCTION_27
 29

	)

47 
	#UT_TRAP_INSTRUCTION_28
 30

	)

48 
	#UT_TRAP_INSTRUCTION_29
 31

	)

49 
	#UT_TRAP_INSTRUCTION_30
 32

	)

50 
	#UT_TRAP_INSTRUCTION_31
 33

	)

55 
	#UTRAP_V8P_FP_DISABLED
 
UT_FP_DISABLED


	)

56 
	#UTRAP_V8P_MEM_ADDRESS_NOT_ALIGNED
 
UT_MEM_ADDRESS_NOT_ALIGNED


	)

58 #i‚de‡
_ASM


60 
	#UTH_NOCHANGE
 ((
uå≠_h™dÀr_t
)(-1))

	)

61 
	#UTRAP_UTH_NOCHANGE
 
UTH_NOCHANGE


	)

63 
	tuå≠_íåy_t
;

64 *
	tuå≠_h™dÀr_t
;

67 
ö°Æl_uå≠
(
uå≠_íåy_t
 
ty≥
, 
uå≠_h™dÀr_t
 
√w_h™dÀr
,

68 
uå≠_h™dÀr_t
 *
ﬁd_h™dÀΩ
);

70 #ifde‡
__•¨cv9˝u


71 
¥oc
;

72 
uå≠_dup
(
¥oc
 *
µ
, ¥o¯*
˝
);

73 
uå≠_‰ì
(
¥oc
 *
p
);

76 #ifde‡
__•¨cv9


78 
__•¨c_uå≠_ö°Æl
(
uå≠_íåy_t
 
ty≥
,

79 
uå≠_h™dÀr_t
 
√w_¥eci£
, uå≠_h™dÀr_à
√w_de„ºed
,

80 
uå≠_h™dÀr_t
 *
ﬁd_¥eci£
, uå≠_h™dÀr_à*
ﬁd_de„ºed
);

84 
	#UT_PRECISE_MAXTRAPS
 33

	)

88 #ifdef 
__˝lu•lus


	@/usr/include/sys/watchpoint.h

6 #i‚de‡
_SYS_WATCHPOINT_H


7 
	#_SYS_WATCHPOINT_H


	)

9 #¥agm®
idít
 "@(#)watchpoint.h 1.6 98/01/06 SMI"

11 
	~<sys/ty≥s.h
>

12 
	~<vm/£g_íum.h
>

13 
	~<sys/c›y›s.h
>

15 #ifdef 
__˝lu•lus


28 
	sw©ched_¨ó
 {

29 
w©ched_¨ó
 *
wa_f‹w
;

30 
w©ched_¨ó
 *
wa_back
;

31 
ˇddr_t
 
wa_vaddr
;

32 
ˇddr_t
 
wa_óddr
;

33 
ul⁄g_t
 
wa_Êags
;

40 
	sw©ched_∑ge
 {

41 
w©ched_∑ge
 *
wp_f‹w
;

42 
w©ched_∑ge
 *
wp_back
;

43 
ˇddr_t
 
wp_vaddr
;

44 
uch¨_t
 
wp_¥Ÿ
;

45 
uch¨_t
 
wp_›rŸ
;

46 
uch¨_t
 
wp_um≠
[3];

47 
uch¨_t
 
wp_km≠
[3];

48 
ush‹t_t
 
wp_Êags
;

49 
wp_ªad
;

50 
wp_wrôe
;

51 
wp_exec
;

55 
	#WP_NOWATCH
 0x01

	)

56 
	#WP_SETPROT
 0x02

	)

58 #ifdef 
_KERNEL


60 
k_sigöfo
;

61 
¥_m≠∑ge
(c⁄° 
ˇddr_t
, 
size_t
, 
£g_rw
, );

62 
¥_unm≠∑ge
(c⁄° 
ˇddr_t
, 
size_t
, 
£g_rw
, );

63 
£èŒw©ch
();

64 
¥_is_w©ch∑ge
(
ˇddr_t
, 
£g_rw
);

65 
¥_is_w©chpoöt
(
ˇddr_t
 *, *, 
size_t
, size_t *,

66 
£g_rw
);

67 
do_w©ch_°ï
(
ˇddr_t
, 
size_t
, 
£g_rw
, , 
gªg_t
);

68 
undo_w©ch_°ï
(
k_sigöfo
 *);

70 
c›y›s
 
w©ch_c›y›s
;

74 #ifdef 
__˝lu•lus


	@/usr/include/vm/faultcode.h

31 #i‚def 
_VM_FAULTCODE_H


32 
	#_VM_FAULTCODE_H


	)

34 #¥agm®
idít
 "@(#)faultcode.h 1.15 92/07/14 SMI"

36 #ifdef 
__˝lu•lus


47 
	#FC_HWERR
 0x1

	)

48 
	#FC_ALIGN
 0x2

	)

49 
	#FC_OBJERR
 0x3

	)

50 
	#FC_PROT
 0x4

	)

51 
	#FC_NOMAP
 0x5

	)

52 
	#FC_NOSUPPORT
 0x6

	)

54 
	#FC_MAKE_ERR
(
e
) ((”Ë<< 8Ë| 
FC_OBJERR
)

	)

56 
	#FC_CODE
(
fc
) ((fcË& 0xff)

	)

57 
	#FC_ERRNO
(
fc
) (()(fcË>> 8)

	)

59 #i‚def 
_ASM


60 
	tÁu…code_t
;

63 #ifdef 
__˝lu•lus


	@/usr/include/vm/seg_enum.h

31 #i‚def 
_VM_SEG_ENUM_H


32 
	#_VM_SEG_ENUM_H


	)

34 #¥agm®
idít
 "@(#)seg_enum.h 1.3 95/12/22 SMI"

36 #ifdef 
__˝lu•lus


50 
	eÁu…_ty≥
 {

51 
F_INVAL
,

52 
F_PROT
,

53 
F_SOFTLOCK
,

54 
F_SOFTUNLOCK


60 
	elock_ty≥
 {

61 
L_PAGELOCK
,

62 
L_PAGEUNLOCK
,

63 
L_PAGERECLAIM


69 
	e£g_rw
 {

70 
S_OTHER
,

71 
S_READ
,

72 
S_WRITE
,

73 
S_EXEC
,

74 
S_CREATE


77 #ifdef 
__˝lu•lus


	@/usr/include/ia32/sys/reg.h

15 #i‚def 
_IA32_SYS_REG_H


16 
	#_IA32_SYS_REG_H


	)

18 #¥agm®
idít
 "@(#)reg.h 1.3 99/08/05 SMI"

20 #i‚de‡
_ASM


21 
	~<sys/ty≥s.h
>

24 
	~<sys/„©uª_ã°s.h
>

26 #ifdef 
__˝lu•lus


37 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

38 
	#SS
 18

	)

39 
	#UESP
 17

	)

40 
	#EFL
 16

	)

41 
	#CS
 15

	)

42 
	#EIP
 14

	)

43 
	#ERR
 13

	)

44 
	#TRAPNO
 12

	)

45 
	#EAX
 11

	)

46 
	#ECX
 10

	)

47 
	#EDX
 9

	)

48 
	#EBX
 8

	)

49 
	#ESP
 7

	)

50 
	#EBP
 6

	)

51 
	#ESI
 5

	)

52 
	#EDI
 4

	)

53 
	#DS
 3

	)

54 
	#ES
 2

	)

55 
	#FS
 1

	)

56 
	#GS
 0

	)

60 
	#PC
 
EIP


	)

61 
	#USP
 
UESP


	)

62 
	#SP
 
ESP


	)

63 
	#PS
 
EFL


	)

64 
	#R0
 
EAX


	)

65 
	#R1
 
EDX


	)

70 
	#REGOFF
 
MINFRAME


	)

81 
	#_NGREG
 19

	)

83 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

84 
	#NGREG
 
_NGREG


	)

87 #i‚de‡
_ASM


89 
öt32_t
 
	tgªg_t
;

90 
gªg_t
 
	tgªg£t_t
[
_NGREG
];

97 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

98 
	sªgs
 {

99 
gªg_t
 
r_gs
;

100 
gªg_t
 
r_fs
;

101 
gªg_t
 
r_es
;

102 
gªg_t
 
r_ds
;

103 
gªg_t
 
r_edi
;

104 
gªg_t
 
r_esi
;

105 
gªg_t
 
r_ebp
;

106 
gªg_t
 
r_e•
;

107 
gªg_t
 
r_ebx
;

108 
gªg_t
 
r_edx
;

109 
gªg_t
 
r_ecx
;

110 
gªg_t
 
r_óx
;

111 
gªg_t
 
r_å≠no
;

112 
gªg_t
 
r_îr
;

113 
gªg_t
 
r_eù
;

114 
gªg_t
 
r_cs
;

115 
gªg_t
 
r_eÊ
;

116 
gªg_t
 
r_ue•
;

117 
gªg_t
 
r_ss
;

120 
	#r_r0
 
r_óx


	)

121 
	#r_r1
 
r_edx


	)

122 
	#r_u•
 
r_ue•


	)

123 
	#r_•
 
r_e•


	)

124 
	#r_pc
 
r_eù


	)

125 
	#r_ps
 
r_eÊ


	)

128 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_BOOT
)

136 
	#i8080ªg
(
r
Ë
	u
{ \

137 
uöt32_t
 
e
 ##Ñ ## x; \

138 
	s
{ 
uöt16_t
 
r
 ## x; } 
w‹d
; \

139 
	s
{ 
uöt8_t
 
r
 ##Ü,Ñ ## h; } 
byã
; \

140 }

	)

142 
	#i8086ªg
(
r
Ë
	u
{ \

143 
uöt32_t
 
e
 ##Ñ; \

144 
	s
{ 
uöt16_t
 
r
; } 
w‹d
; \

145 }

	)

147 
	sb›_ªgs
 {

153 
i8080ªg
(
a
Ë
óx
;

154 
i8080ªg
(
d
Ë
edx
;

155 
i8080ªg
(
c
Ë
ecx
;

156 
i8080ªg
(
b
Ë
ebx
;

158 
i8086ªg
(
bp
Ë
ebp
;

159 
i8086ªg
(
si
Ë
esi
;

160 
i8086ªg
(
di
Ë
edi
;

162 
uöt16_t
 
ds
;

163 
uöt16_t
 
es
;

164 
uöt16_t
 
fs
;

165 
uöt16_t
 
gs
;

167 
uöt32_t
 
eÊags
;

170 #undef 
i8080ªg


171 #undef 
i8086ªg


175 #ifde‡
_KERNEL


176 
	#lw±‹egs
(
lwp
) ((
ªgs
 *)(÷wp)->
lwp_ªgs
))

	)

182 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

184 
	#CR0_PG
 0x80000000

	)

185 
	#CR0_CE
 0x40000000

	)

186 
	#CR0_WT
 0x20000000

	)

187 
	#CR0_AM
 0x00040000

	)

188 
	#CR0_WP
 0x00010000

	)

189 
	#CR0_NE
 0x00000020

	)

190 
	#CR0_ET
 0x00000010

	)

191 
	#CR0_TS
 0x00000008

	)

192 
	#CR0_EM
 0x00000004

	)

193 
	#CR0_MP
 0x00000002

	)

194 
	#CR0_PE
 0x00000001

	)

196 
	#CR0_CD
 
CR0_CE


	)

197 
	#CR0_NW
 
CR0_WT


	)

201 
	#CR3_PCD
 0x00000010

	)

202 
	#CR3_PWT
 0x00000008

	)

206 
	#CR4_VME
 0x00000001

	)

207 
	#CR4_PVI
 0x00000002

	)

208 
	#CR4_TSD
 0x00000004

	)

209 
	#CR4_DE
 0x00000008

	)

210 
	#CR4_PSE
 0x00000010

	)

211 
	#CR4_PAE
 0x00000020

	)

212 
	#CR4_MCE
 0x00000040

	)

213 
	#CR4_PGE
 0x00000080

	)

214 
	#CR4_PCE
 0x00000100

	)

218 
	#CREGSZ
 36

	)

219 
	#CREG_GDT
 0

	)

220 
	#CREG_IDT
 8

	)

221 
	#CREG_LDT
 16

	)

222 
	#CREG_TASKR
 18

	)

223 
	#CREG_CR0
 20

	)

224 
	#CREG_CR2
 24

	)

225 
	#CREG_CR3
 28

	)

226 
	#CREG_CR4
 32

	)

228 #i‚de‡
_ASM


230 
	s¸egs
 {

231 
uöt64_t
 
¸_gdt
;

232 
uöt64_t
 
¸_idt
;

233 
uöt16_t
 
¸_ldt
;

234 
uöt16_t
 
¸_èsk
;

235 
uöt32_t
 
¸_¸0
;

236 
uöt32_t
 
¸_¸2
;

237 
uöt32_t
 
¸_¸3
;

238 
uöt32_t
 
¸_¸4
;

241 
gë¸egs
(
¸egs
 *);

249 
	sÂu
 {

250 
	u
{

251 
	sÂchù_°©e


253 
	g°©e
[27];

254 
	g°©us
;

256 } 
	gÂchù_°©e
;

257 
	sÂ_emul_•a˚


259 
	gÂ_emul
[246];

260 
	gÂ_ïad
[2];

261 } 
	gÂ_emul_•a˚
;

262 
	gf_Âªgs
[62];

263 } 
	gÂ_ªg_£t
;

264 
	gf_wªgs
[33];

265 } 
	tÂªg£t_t
;

267 
	#NDEBUGREG
 8

	)

269 
	sdbªg£t
 {

270 
	gdebugªg
[
NDEBUGREG
];

271 } 
	tdbªg£t_t
;

274 
	s
{

275 
gªg£t_t
 
	ggªgs
;

276 
Âªg£t_t
 
	gÂªgs
;

277 } 
	tmc⁄ãxt_t
;

287 #i‡
deföed
(
_XPG4_2
Ë&& !deföed(
__EXTENSIONS__
)

288 #i‚de‡
_ASM


294 
	s__Âu
 {

295 
	u
{

296 
	s__Âchù_°©e


298 
	g__°©e
[27];

299 
	g__°©us
;

301 } 
	g__Âchù_°©e
;

302 
	s__Â_emul_•a˚


304 
	g__Â_emul
[246];

305 
	g__Â_ïad
[2];

306 } 
	g__Â_emul_•a˚
;

307 
	g__f_Âªgs
[62];

308 } 
	g__Â_ªg_£t
;

309 
	g__f_wªgs
[33];

310 } 
	tÂªg£t_t
;

313 
	s
{

314 
gªg£t_t
 
	g__gªgs
;

315 
Âªg£t_t
 
	g__Âªgs
;

316 } 
	tmc⁄ãxt_t
;

320 #ifdef 
__˝lu•lus


	@/usr/include/ia64/sys/reg.h

6 #i‚def 
_IA64_SYS_REG_H


7 
	#_IA64_SYS_REG_H


	)

9 #¥agm®
idít
 "@(#)reg.h 1.1 99/05/04 SMI"

11 
	~<sys/„©uª_ã°s.h
>

12 
	~<sys/°ack.h
>

14 #ifdef 
__˝lu•lus


22 
	#REGOFF
 
	`SA
(
MINFRAME
)

	)

31 
	#_NGREG
 32

	)

33 #i‚de‡
_ASM


35 
uöt64_t
 
	tgªg_t
;

36 
uöt64_t
 
	tÂªg_t
[2];

37 
gªg_t
 
	tgªg£t_t
[
_NGREG
];

39 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

41 
	sªgs
 {

42 
gªg_t
 
r_r0


43 
gªg_t
 
r_r1
;

44 
gªg_t
 
r_r2
;

45 
gªg_t
 
r_r3
;

46 
gªg_t
 
r_r4
;

47 
gªg_t
 
r_r5
;

48 
gªg_t
 
r_r6
;

49 
gªg_t
 
r_r7
;

50 
gªg_t
 
r_r8
;

51 
gªg_t
 
r_r9
;

52 
gªg_t
 
r_r10
;

53 
gªg_t
 
r_r11
;

54 
gªg_t
 
r_r12
;

55 
gªg_t
 
r_r13
;

56 
gªg_t
 
r_r14
;

57 
gªg_t
 
r_r15
;

58 
gªg_t
 
r_r16
;

59 
gªg_t
 
r_r17
;

60 
gªg_t
 
r_r18
;

61 
gªg_t
 
r_r19
;

62 
gªg_t
 
r_r20
;

63 
gªg_t
 
r_r21
;

64 
gªg_t
 
r_r22
;

65 
gªg_t
 
r_r23
;

66 
gªg_t
 
r_r24
;

67 
gªg_t
 
r_r25
;

68 
gªg_t
 
r_r26
;

69 
gªg_t
 
r_r27
;

70 
gªg_t
 
r_r28
;

71 
gªg_t
 
r_r29
;

72 
gªg_t
 
r_r30
;

73 
gªg_t
 
r_r31
;

80 
	#R_R0
 0

	)

81 
	#R_R1
 (
R_R0
 + 8)

	)

82 
	#R_R2
 (
R_R1
 + 8)

	)

83 
	#R_R3
 (
R_R2
 + 8)

	)

84 
	#R_R4
 (
R_R3
 + 8)

	)

85 
	#R_R5
 (
R_R4
 + 8)

	)

86 
	#R_R6
 (
R_R5
 + 8)

	)

87 
	#R_R7
 (
R_R6
 + 8)

	)

88 
	#R_R8
 (
R_R7
 + 8)

	)

89 
	#R_R9
 (
R_R8
 + 8)

	)

90 
	#R_R10
 (
R_R9
 + 8)

	)

91 
	#R_R11
 (
R_R10
 + 8)

	)

92 
	#R_R12
 (
R_R11
 + 8)

	)

93 
	#R_R13
 (
R_R12
 + 8)

	)

94 
	#R_R14
 (
R_R13
 + 8)

	)

95 
	#R_R15
 (
R_R14
 + 8)

	)

96 
	#R_R16
 (
R_R15
 + 8)

	)

97 
	#R_R17
 (
R_R16
 + 8)

	)

98 
	#R_R18
 (
R_R17
 + 8)

	)

99 
	#R_R19
 (
R_R18
 + 8)

	)

100 
	#R_R20
 (
R_R19
 + 8)

	)

101 
	#R_R21
 (
R_R20
 + 8)

	)

102 
	#R_R22
 (
R_R21
 + 8)

	)

103 
	#R_R23
 (
R_R22
 + 8)

	)

104 
	#R_R24
 (
R_R23
 + 8)

	)

105 
	#R_R25
 (
R_R24
 + 8)

	)

106 
	#R_R26
 (
R_R25
 + 8)

	)

107 
	#R_R27
 (
R_R26
 + 8)

	)

108 
	#R_R28
 (
R_R27
 + 8)

	)

109 
	#R_R29
 (
R_R28
 + 8)

	)

110 
	#R_R30
 (
R_R29
 + 8)

	)

111 
	#R_R31
 (
R_R30
 + 8)

	)

115 #ifde‡
_KERNEL


116 
	#lw±‹egs
(
lwp
) ((
ªgs
 *)(÷wp)->
lwp_ªgs
))

	)

119 #i‚de‡
_ASM


121 
	sÂu
 {

122 
Âªg_t
 
Â_ªg_hi
[16];

123 } 
	tÂªg£t_t
;

125 
	s
{

126 
gªg£t_t
 
gªgs
;

127 
Âªg£t_t
 
Âªgs
;

128 } 
	tmc⁄ãxt_t
;

130 #i‡
deföed
(
_SYSCALL32
)

134 
	#_NGREG32
 19

	)

136 
öt32_t
 
	tgªg32_t
;

137 
gªg32_t
 
	tgªg£t32_t
[
_NGREG32
];

139 
	sªgs32
 {

140 
gªg32_t
 
r_gs
;

141 
gªg32_t
 
r_fs
;

142 
gªg32_t
 
r_es
;

143 
gªg32_t
 
r_ds
;

144 
gªg32_t
 
r_edi
;

145 
gªg32_t
 
r_esi
;

146 
gªg32_t
 
r_ebp
;

147 
gªg32_t
 
r_e•
;

148 
gªg32_t
 
r_ebx
;

149 
gªg32_t
 
r_edx
;

150 
gªg32_t
 
r_ecx
;

151 
gªg32_t
 
r_óx
;

152 
gªg32_t
 
r_å≠no
;

153 
gªg32_t
 
r_îr
;

154 
gªg32_t
 
r_eù
;

155 
gªg32_t
 
r_cs
;

156 
gªg32_t
 
r_eÊ
;

157 
gªg32_t
 
r_ue•
;

158 
gªg32_t
 
r_ss
;

161 
	sÂu32
 {

162 
	u
{

163 
	sÂchù_°©e


165 
öt32_t
 
°©e
[27];

166 
öt32_t
 
°©us
;

168 } 
Âchù_°©e
;

169 
	sÂ_emul_•a˚


171 
Â_emul
[246];

172 
Â_ïad
[2];

173 } 
Â_emul_•a˚
;

174 
öt32_t
 
f_Âªgs
[62];

175 } 
Â_ªg_£t
;

176 
öt32_t
 
f_wªgs
[33];

177 } 
	tÂªg£t32_t
;

179 
	s
{

180 
gªg£t32_t
 
gªgs
;

181 
Âªg£t32_t
 
Âªgs
;

182 } 
	tmc⁄ãxt32_t
;

188 #ifdef 
__˝lu•lus


	@/usr/include/sys/copyops.h

6 #i‚def 
_SYS_COPYOPS_H


7 
	#_SYS_COPYOPS_H


	)

9 #¥agm®
idít
 "@(#)copyops.h 1.4 98/07/17 SMI"

11 
	~<sys/ty≥s.h
>

12 
	~<sys/thªad.h
>

13 
	~<sys/buf.h
>

14 
	~<sys/aio_ªq.h
>

15 
	~<sys/uio.h
>

17 #ifdef 
__˝lu•lus


21 #ifde‡
_KERNEL


40 
	sc›y›s
 {

44 (*
˝_c›yö
)(c⁄° *, *, 
size_t
);

45 (*
˝_xc›yö
)(c⁄° *, *, 
size_t
);

46 (*
˝_c›yout
)(c⁄° *, *, 
size_t
);

47 (*
˝_xc›yout
)(c⁄° *, *, 
size_t
);

48 (*
˝_c›yö°r
)(c⁄° *, *, 
size_t
, size_t *);

49 (*
˝_c›yout°r
)(c⁄° *, *, 
size_t
, size_t *);

54 (*
˝_fuw‹d8
)(c⁄° *, 
uöt8_t
 *);

55 (*
˝_fuiw‹d8
)(c⁄° *, 
uöt8_t
 *);

56 (*
˝_fuw‹d16
)(c⁄° *, 
uöt16_t
 *);

57 (*
˝_fuw‹d32
)(c⁄° *, 
uöt32_t
 *);

58 (*
˝_fuiw‹d32
)(c⁄° *, 
uöt32_t
 *);

59 (*
˝_fuw‹d64
)(c⁄° *, 
uöt64_t
 *);

61 (*
˝_suw‹d8
)(*, 
uöt8_t
);

62 (*
˝_suiw‹d8
)(*, 
uöt8_t
);

63 (*
˝_suw‹d16
)(*, 
uöt16_t
);

64 (*
˝_suw‹d32
)(*, 
uöt32_t
);

65 (*
˝_suiw‹d32
)(*, 
uöt32_t
);

66 (*
˝_suw‹d64
)(*, 
uöt64_t
);

67 (*
˝_physio
)((*)(
buf
 *), bu‡*, 
dev_t
,

68 , (*)(
buf
 *), 
uio
 *);

69 } 
	tc›y›s_t
;

71 
	#CP_COPYIN
(
uaddr
, 
kaddr
, 
cou¡
) \

72 ((*
cuπhªad
->
t_c›y›s
->
˝_c›yö
)(
uaddr
, 
kaddr
, 
cou¡
))

	)

73 
	#CP_XCOPYIN
(
uaddr
, 
kaddr
, 
cou¡
) \

74 ((*
cuπhªad
->
t_c›y›s
->
˝_xc›yö
)(
uaddr
, 
kaddr
, 
cou¡
))

	)

75 
	#CP_COPYOUT
(
kaddr
, 
uaddr
, 
cou¡
) \

76 ((*
cuπhªad
->
t_c›y›s
->
˝_c›yout
)(
kaddr
, 
uaddr
, 
cou¡
))

	)

77 
	#CP_XCOPYOUT
(
kaddr
, 
uaddr
, 
cou¡
) \

78 ((*
cuπhªad
->
t_c›y›s
->
˝_xc›yout
)(
kaddr
, 
uaddr
, 
cou¡
))

	)

79 
	#CP_COPYINSTR
(
uaddr
, 
kaddr
, 
max
, 
Ànc›õd
) \

80 ((*
cuπhªad
->
t_c›y›s
->
˝_c›yö°r
)(
uaddr
, 
kaddr
, 
max
, 
Ànc›õd
))

	)

81 
	#CP_COPYOUTSTR
(
kaddr
, 
uaddr
, 
max
, 
Ànc›õd
) \

82 ((*
cuπhªad
->
t_c›y›s
->
˝_c›yout°r
)(
kaddr
, 
uaddr
, 
max
, 
Ànc›õd
))

	)

84 
	#CP_FUWORD8
(
addr
, 
vÆuï
) \

85 ((*
cuπhªad
->
t_c›y›s
->
˝_fuw‹d8
)(
addr
, 
vÆuï
))

	)

86 
	#CP_FUIWORD8
(
addr
, 
vÆuï
) \

87 ((*
cuπhªad
->
t_c›y›s
->
˝_fuiw‹d8
)(
addr
, 
vÆuï
))

	)

88 
	#CP_FUWORD16
(
addr
, 
vÆuï
) \

89 ((*
cuπhªad
->
t_c›y›s
->
˝_fuw‹d16
)(
addr
, 
vÆuï
))

	)

90 
	#CP_FUWORD32
(
addr
, 
vÆuï
) \

91 ((*
cuπhªad
->
t_c›y›s
->
˝_fuw‹d32
)(
addr
, 
vÆuï
))

	)

92 
	#CP_FUIWORD32
(
addr
, 
vÆuï
) \

93 ((*
cuπhªad
->
t_c›y›s
->
˝_fuiw‹d32
)(
addr
, 
vÆuï
))

	)

94 
	#CP_FUWORD64
(
addr
, 
vÆuï
) \

95 ((*
cuπhªad
->
t_c›y›s
->
˝_fuw‹d64
)(
addr
, 
vÆuï
))

	)

97 
	#CP_SUWORD8
(
addr
, 
vÆue
) \

98 ((*
cuπhªad
->
t_c›y›s
->
˝_suw‹d8
)(
addr
, 
vÆue
))

	)

99 
	#CP_SUIWORD8
(
addr
, 
vÆue
) \

100 ((*
cuπhªad
->
t_c›y›s
->
˝_suiw‹d8
)(
addr
, 
vÆue
))

	)

101 
	#CP_SUWORD16
(
addr
, 
vÆue
) \

102 ((*
cuπhªad
->
t_c›y›s
->
˝_suw‹d16
)(
addr
, 
vÆue
))

	)

103 
	#CP_SUWORD32
(
addr
, 
vÆue
) \

104 ((*
cuπhªad
->
t_c›y›s
->
˝_suw‹d32
)(
addr
, 
vÆue
))

	)

105 
	#CP_SUIWORD32
(
addr
, 
vÆue
) \

106 ((*
cuπhªad
->
t_c›y›s
->
˝_suiw‹d32
)(
addr
, 
vÆue
))

	)

107 
	#CP_SUWORD64
(
addr
, 
vÆue
) \

108 ((*
cuπhªad
->
t_c›y›s
->
˝_suw‹d64
)(
addr
, 
vÆue
))

	)

110 
	#CP_PHYSIO
(
°øt
, 
bp
, 
dev
, 
rw
, 
mö˙t
, 
uio
) \

111 ((*
cuπhªad
->
t_c›y›s
->
˝_physio
)(
°øt
, 
bp
, 
dev
, 
rw
, 
mö˙t
, 
uio
))

	)

122 
c›y›s
 
deÁu…_c›y›s
;

124 
deÁu…_c›yö
(c⁄° *, *, 
size_t
);

125 
deÁu…_xc›yö
(c⁄° *, *, 
size_t
);

126 
deÁu…_c›yout
(c⁄° *, *, 
size_t
);

127 
deÁu…_xc›yout
(c⁄° *, *, 
size_t
);

128 
deÁu…_c›yö°r
(c⁄° *, *, 
size_t
, size_t *);

129 
deÁu…_c›yout°r
(c⁄° *, *, 
size_t
, size_t *);

131 
deÁu…_fuw‹d8
(c⁄° *, 
uöt8_t
 *);

132 
deÁu…_fuiw‹d8
(c⁄° *, 
uöt8_t
 *);

133 
deÁu…_fuw‹d16
(c⁄° *, 
uöt16_t
 *);

134 
deÁu…_fuw‹d32
(c⁄° *, 
uöt32_t
 *);

135 
deÁu…_fuiw‹d32
(c⁄° *, 
uöt32_t
 *);

136 
deÁu…_fuw‹d64
(c⁄° *, 
uöt64_t
 *);

138 
deÁu…_suw‹d8
(*, 
uöt8_t
);

139 
deÁu…_suiw‹d8
(*, 
uöt8_t
);

140 
deÁu…_suw‹d16
(*, 
uöt16_t
);

141 
deÁu…_suw‹d32
(*, 
uöt32_t
);

142 
deÁu…_suiw‹d32
(*, 
uöt32_t
);

143 
deÁu…_suw‹d64
(*, 
uöt64_t
);

144 
deÁu…_physio
((*)(
buf
 *), buf *,

145 
dev_t
, , (*)(
buf
 *), 
uio
 *);

150 
	`ö°Æl_c›y›s
(
kthªad_id_t
 
ç
, 
c›y›s_t
 *
˝
);

151 
	`ªmove_c›y›s
(
kthªad_id_t
 
ç
);

152 
c›y›s_t
 *
	`gë_c›y›s
(
kthªad_id_t
 
ç
);

156 #ifdef 
__˝lu•lus


157 
	}
}

	@/usr/include/sys/exacct_impl.h

6 #i‚def 
_SYS_EXACCT_IMPL_H


7 
	#_SYS_EXACCT_IMPL_H


	)

9 #¥agm®
idít
 "@(#)exacct_impl.h 1.1 00/02/14 SMI"

11 #ifdef 
__˝lu•lus


15 
	~<sys/ty≥s.h
>

17 
	sèsk_ußge
 {

18 
uöt64_t
 
tu_utime
;

19 
uöt64_t
 
tu_°ime
;

21 
uöt64_t
 
tu_möÊt
;

22 
uöt64_t
 
tu_majÊt
;

23 
uöt64_t
 
tu_¢dmsg
;

24 
uöt64_t
 
tu_rcvmsg
;

25 
uöt64_t
 
tu_ioch
;

26 
uöt64_t
 
tu_iblk
;

27 
uöt64_t
 
tu_oblk
;

28 
uöt64_t
 
tu_vcsw
;

29 
uöt64_t
 
tu_icsw
;

30 
uöt64_t
 
tu_nsig
;

31 
uöt64_t
 
tu_nswp
;

32 
uöt64_t
 
tu_ns˛
;

33 
uöt64_t
 
tu_utime£c
;

34 
uöt64_t
 
tu_utimí£c
;

35 
uöt64_t
 
tu_°ime£c
;

36 
uöt64_t
 
tu_°imí£c
;

37 
uöt64_t
 
tu_°¨t£c
;

38 
uöt64_t
 
tu_°¨ä£c
;

39 
uöt64_t
 
tu_föish£c
;

40 
uöt64_t
 
tu_föishn£c
;

41 } 
	tèsk_ußge_t
;

43 
	s¥oc_ußge
 {

44 
uöt64_t
 
pu_möÊt
;

45 
uöt64_t
 
pu_majÊt
;

46 
uöt64_t
 
pu_¢dmsg
;

47 
uöt64_t
 
pu_rcvmsg
;

48 
uöt64_t
 
pu_ioch
;

49 
uöt64_t
 
pu_iblk
;

50 
uöt64_t
 
pu_oblk
;

51 
uöt64_t
 
pu_vcsw
;

52 
uöt64_t
 
pu_icsw
;

53 
uöt64_t
 
pu_nsig
;

54 
uöt64_t
 
pu_nswp
;

55 
uöt64_t
 
pu_ns˛
;

56 
uöt64_t
 
pu_utime£c
;

57 
uöt64_t
 
pu_utimí£c
;

58 
uöt64_t
 
pu_°ime£c
;

59 
uöt64_t
 
pu_°imí£c
;

60 
uöt64_t
 
pu_°¨t£c
;

61 
uöt64_t
 
pu_°¨ä£c
;

62 
uöt64_t
 
pu_föish£c
;

63 
uöt64_t
 
pu_föishn£c
;

65 
pid_t
 
pu_pid
;

66 
uid_t
 
pu_ruid
;

67 
gid_t
 
pu_rgid
;

68 
¥ojid_t
 
pu_¥ojid
;

69 
èskid_t
 
pu_èskid
;

70 
uöt32_t
 
pu_acÊag
;

71 *
pu_comm™d
;

72 
uöt32_t
 
pu_maj‹
;

73 
uöt32_t
 
pu_mö‹
;

74 } 
	t¥oc_ußge_t
;

76 #ifdef 
__˝lu•lus


	@/usr/include/sys/id_space.h

6 #i‚def 
_ID_SPACE_H


7 
	#_ID_SPACE_H


	)

9 #¥agm®
idít
 "@(#)id_space.h 1.1 00/02/14 SMI"

11 #ifdef 
__˝lu•lus


15 
	~<sys/∑øm.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<sys/muãx.h
>

18 
	~<sys/vmem.h
>

20 
	#ISP_NORMAL
 0x0

	)

21 
	#ISP_RESERVE
 0x1

	)

27 
	sid_•a˚
 {

28 
id_t
 
is_low
;

29 
id_t
 
is_high
;

30 
id_t
 
is_√xt
;

31 
kmuãx_t
 
is_muãx
;

32 
vmem_t
 *
is_vmem
;

33 } 
	tid_•a˚_t
;

35 #ifde‡
_KERNEL


37 
id_•a˚_öô
();

38 
id_•a˚_t
 *
id_•a˚_¸óã
(c⁄° *, 
id_t
, id_t);

39 
id_•a˚_de°roy
(
id_•a˚_t
 *);

40 
id_t
 
id_Æloc
(
id_•a˚_t
 *);

41 
id_‰ì
(
id_•a˚_t
 *, 
id_t
);

45 #ifdef 
__˝lu•lus


	@/usr/include/sys/klwp.h

6 #i‚def 
_SYS_KLWP_H


7 
	#_SYS_KLWP_H


	)

9 #¥agm®
idít
 "@(#)klwp.h 1.36 99/07/28 SMI"

11 
	~<sys/ty≥s.h
>

12 
	~<sys/c⁄dv¨.h
>

13 
	~<sys/thªad.h
>

14 
	~<sys/sig«l.h
>

15 
	~<sys/sigöfo.h
>

16 
	~<sys/pcb.h
>

17 
	~<sys/time.h
>

18 
	~<sys/mßc˘.h
>

19 
	~<sys/uc⁄ãxt.h
>

20 
	~<sys/lwp.h
>

22 #i‡(
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)Ë&& deföed(
_MACHDEP
)

23 
	~<sys/mach∑øm.h
>

26 #ifdef 
__˝lu•lus


35 
	#MAXSYSARGS
 8

	)

38 
	#NORMALRETURN
 0

	)

39 
	#JUSTRETURN
 1

	)

44 
	sÃußge
 {

45 
u_l⁄gl⁄g_t
 
möÊt
;

46 
u_l⁄gl⁄g_t
 
majÊt
;

47 
u_l⁄gl⁄g_t
 
nsw≠
;

48 
u_l⁄gl⁄g_t
 
öblock
;

49 
u_l⁄gl⁄g_t
 
oublock
;

50 
u_l⁄gl⁄g_t
 
msg¢d
;

51 
u_l⁄gl⁄g_t
 
msgrcv
;

52 
u_l⁄gl⁄g_t
 
nsig«ls
;

53 
u_l⁄gl⁄g_t
 
nvcsw
;

54 
u_l⁄gl⁄g_t
 
nivcsw
;

55 
u_l⁄gl⁄g_t
 
sysc
;

56 
u_l⁄gl⁄g_t
 
ioch
;

59 
_klwp
 *
	tklwp_id_t
;

61 
	s_klwp
 {

65 
pcb
 
lwp_pcb
;

66 
uöçå_t
 
lwp_ﬁdc⁄ãxt
;

71 *
lwp_≠
;

72 
lwp_î∫o
;

76 
lwp_îr‹
;

77 
lwp_eosys
;

78 
lwp_¨gßved
;

79 
lwp_w©chå≠
;

80 
lwp_¨g
[
MAXSYSARGS
];

81 *
lwp_ªgs
;

82 *
lwp_Âu
;

83 
œbñ_t
 
lwp_qßv
;

88 
uch¨_t
 
lwp_cursig
;

89 
uch¨_t
 
lwp_curÊt
;

90 
uch¨_t
 
lwp_syßb‹t
;

91 
uch¨_t
 
lwp_a¶ìp
;

92 
°ack_t
 
lwp_sigÆt°ack
;

93 
sigqueue
 *
lwp_curöfo
;

94 
k_sigöfo_t
 
lwp_sigöfo
;

95 
k_sig£t_t
 
lwp_sigﬁdmask
;

96 
	slwp_w©ch
 {

97 
ˇddr_t
 
w∑ddr
;

98 
size_t
 
wpsize
;

99 
wpcode
;

100 
gªg_t
 
wµc
;

101 } 
lwp_w©ch
[4];

103 
uöt32_t
 
lwp_oweupc
;

115 
	sm°©e
 {

116 
ms_¥ev
;

117 
hπime_t
 
ms_°¨t
;

118 
hπime_t
 
ms_ãrm
;

119 
hπime_t
 
ms_°©e_°¨t
;

120 
hπime_t
 
ms_ac˘
[
NMSTATES
];

121 } 
lwp_m°©e
;

126 
Ãußge
 
lwp_ru
;

131 
lwp_œ°Áu…
;

132 
ˇddr_t
 
lwp_œ°Áddr
;

137 
ôimîvÆ
 
lwp_timî
[3];

142 
lwp_unu£d
;

143 
lwp_°©e
;

144 
ush‹t_t
 
lwp_no°›
;

145 
kc⁄dv¨_t
 
lwp_cv
;

150 
˛ock_t
 
lwp_utime
;

151 
˛ock_t
 
lwp_°ime
;

156 
_kthªad
 *
lwp_thªad
;

157 
¥oc
 *
lwp_¥o˝
;

159 *
lwp_ª£rved
;

160 } 
	tklwp_t
;

163 
	#LWP_USER
 0x01

	)

164 
	#LWP_SYS
 0x02

	)

166 
	#LWPNULL
 (
klwp_t
 *)0

	)

168 #if 
deföed
(
_KERNEL
)

169 
lwp_deÁu…_°ksize
;

170 
lwp_ª≠˙t
;

172 
_kthªad
 *
lwp_dóthrow
;

173 
kmuãx_t
 
ª≠lock
;

174 
kmem_ˇche
 *
lwp_ˇche
;

175 *
£gkp_lwp
;

176 
klwp_t
 
lwp0
;

179 
lwp_πt
();

183 #ifdef 
__˝lu•lus


	@/usr/include/sys/kmem.h

6 #i‚de‡
_SYS_KMEM_H


7 
	#_SYS_KMEM_H


	)

9 #¥agm®
idít
 "@(#)kmem.h 1.29 99/04/14 SMI"

11 
	~<sys/ty≥s.h
>

12 
	~<sys/vmem.h
>

14 #ifdef 
__˝lu•lus


23 
	#KM_SLEEP
 0x0000

	)

24 
	#KM_NOSLEEP
 0x0001

	)

25 
	#KM_PANIC
 0x0002

	)

26 
	#KM_VMFLAGS
 0x00ff

	)

28 
	#KM_FLAGS
 0xffff

	)

30 #ifde‡
_KERNEL


32 *
kmem_Æloc
(
size_t
 
size
, 
Êags
);

33 *
kmem_zÆloc
(
size_t
 
size
, 
Êag
);

34 
kmem_‰ì
(*
buf
, 
size_t
 
size
);

47 
	#KMC_NOTOUCH
 0x00010000

	)

48 
	#KMC_NODEBUG
 0x00020000

	)

49 
	#KMC_NOMAGAZINE
 0x00040000

	)

50 
	#KMC_NOHASH
 0x00080000

	)

51 
	#KMC_QCACHE
 0x00100000

	)

53 
	gkmem_ˇche
;

55 
kmem_ˇche
 
	tkmem_ˇche_t
;

57 #ifde‡
_KERNEL


59 
kmem_ªady
;

60 
pg˙t_t
 
kmem_ª≠ahód
;

62 
kmem_öô
();

63 
kmem_thªad_öô
();

64 
kmem_mp_öô
();

65 
kmem_ª≠
();

66 
pg˙t_t
 
kmem_avaû
();

67 
size_t
 
kmem_maxavaû
();

69 
kmem_ˇche_t
 *
kmem_ˇche_¸óã
(*, 
size_t
, ,

71 (*)(*), *, 
vmem_t
 *, );

72 
kmem_ˇche_de°roy
(
kmem_ˇche_t
 *);

73 *
kmem_ˇche_Æloc
(
kmem_ˇche_t
 *, );

74 
kmem_ˇche_‰ì
(
kmem_ˇche_t
 *, *);

75 
ul⁄g_t
 
kmem_ˇche_°©
(
kmem_ˇche_t
 *, *);

79 #ifdef 
__˝lu•lus


	@/usr/include/sys/kstat.h

6 #i‚def 
_SYS_KSTAT_H


7 
	#_SYS_KSTAT_H


	)

9 #¥agm®
idít
 "@(#)kstat.h 1.15 99/07/26 SMI"

15 
	~<sys/ty≥s.h
>

16 
	~<sys/time.h
>

18 #ifdef 
__˝lu•lus


22 
	tkid_t
;

28 
	#KSTAT_IOC_BASE
 ('K' << 8)

	)

30 
	#KSTAT_IOC_CHAIN_ID
 
KSTAT_IOC_BASE
 | 0x01

	)

31 
	#KSTAT_IOC_READ
 
KSTAT_IOC_BASE
 | 0x02

	)

32 
	#KSTAT_IOC_WRITE
 
KSTAT_IOC_BASE
 | 0x03

	)

42 
	#KSTAT_STRLEN
 31

	)

48 
	sk°©
 {

52 
hπime_t
 
ks_¸time
;

53 
k°©
 *
ks_√xt
;

54 
kid_t
 
ks_kid
;

55 
ks_moduÀ
[
KSTAT_STRLEN
];

56 
uch¨_t
 
ks_ªsv
;

57 
ks_ö°™˚
;

58 
ks_«me
[
KSTAT_STRLEN
];

59 
uch¨_t
 
ks_ty≥
;

60 
ks_˛ass
[
KSTAT_STRLEN
];

61 
uch¨_t
 
ks_Êags
;

62 *
ks_d©a
;

63 
uöt_t
 
ks_nd©a
;

64 
size_t
 
ks_d©a_size
;

65 
hπime_t
 
ks_¢≠time
;

69 (*
ks_upd©e
)(
k°©
 *, );

70 *
ks_¥iv©e
;

71 (*
ks_¢≠shŸ
)(
k°©
 *, *, );

72 *
ks_lock
;

73 } 
	tk°©_t
;

75 #ifde‡
_SYSCALL32


77 
öt32_t
 
	tkid32_t
;

79 
	sk°©32
 {

83 
hπime_t
 
ks_¸time
;

84 
ˇddr32_t
 
ks_√xt
;

85 
kid32_t
 
ks_kid
;

86 
ks_moduÀ
[
KSTAT_STRLEN
];

87 
uöt8_t
 
ks_ªsv
;

88 
öt32_t
 
ks_ö°™˚
;

89 
ks_«me
[
KSTAT_STRLEN
];

90 
uöt8_t
 
ks_ty≥
;

91 
ks_˛ass
[
KSTAT_STRLEN
];

92 
uöt8_t
 
ks_Êags
;

93 
ˇddr32_t
 
ks_d©a
;

94 
uöt32_t
 
ks_nd©a
;

95 
size32_t
 
ks_d©a_size
;

96 
hπime_t
 
ks_¢≠time
;

100 
öt32_t
 
_ks_upd©e
;

101 
ˇddr32_t
 
_ks_¥iv©e
;

102 
öt32_t
 
_ks_¢≠shŸ
;

103 
ˇddr32_t
 
_ks_lock
;

104 } 
	tk°©32_t
;

131 #if 
deföed
(
_KERNEL
)

133 
	#KSTAT_ENTER
(
k
) \

134 { 
kmuãx_t
 *
Õ
 = (
k
)->
ks_lock
; ÕË
	`muãx_íãr
÷p); }

	)

136 
	#KSTAT_EXIT
(
k
) \

137 { 
kmuãx_t
 *
Õ
 = (
k
)->
ks_lock
; ÕË
	`muãx_exô
÷p); }

	)

139 
	#KSTAT_UPDATE
(
k
, 
rw
) (*(k)->
ks_upd©e
)((k), (rw))

	)

141 
	#KSTAT_SNAPSHOT
(
k
, 
buf
, 
rw
) (*(k)->
ks_¢≠shŸ
)((k), (buf), (rw))

	)

201 
	#KSTAT_TYPE_RAW
 0

	)

203 
	#KSTAT_TYPE_NAMED
 1

	)

205 
	#KSTAT_TYPE_INTR
 2

	)

207 
	#KSTAT_TYPE_IO
 3

	)

209 
	#KSTAT_TYPE_TIMER
 4

	)

212 
	#KSTAT_NUM_TYPES
 5

	)

281 
	#KSTAT_FLAG_VIRTUAL
 0x01

	)

282 
	#KSTAT_FLAG_VAR_SIZE
 0x02

	)

283 
	#KSTAT_FLAG_WRITABLE
 0x04

	)

284 
	#KSTAT_FLAG_PERSISTENT
 0x08

	)

285 
	#KSTAT_FLAG_DORMANT
 0x10

	)

286 
	#KSTAT_FLAG_INVALID
 0x20

	)

330 
	#KSTAT_READ
 0

	)

331 
	#KSTAT_WRITE
 1

	)

400 
	sk°©_«med
 {

401 
«me
[
KSTAT_STRLEN
];

402 
uch¨_t
 
d©a_ty≥
;

403 
	u
{

404 
c
[16];

405 
öt32_t
 
i32
;

406 
uöt32_t
 
ui32
;

413 #i‡
deföed
(
_LP64
Ë|| (
__STDC__
 - 0 =0 && !deföed(
_NO_LONGLONG
))

414 
öt64_t
 
i64
;

415 
uöt64_t
 
ui64
;

417 
l
;

418 
ul⁄g_t
 
ul
;

422 
l⁄gl⁄g_t
 
Œ
;

423 
u_l⁄gl⁄g_t
 
uŒ
;

424 
f
;

425 
d
;

426 } 
vÆue
;

427 } 
	tk°©_«med_t
;

429 
	#KSTAT_DATA_CHAR
 0

	)

430 
	#KSTAT_DATA_INT32
 1

	)

431 
	#KSTAT_DATA_UINT32
 2

	)

432 
	#KSTAT_DATA_INT64
 3

	)

433 
	#KSTAT_DATA_UINT64
 4

	)

435 #i‡!
deföed
(
_LP64
)

436 
	#KSTAT_DATA_LONG
 
KSTAT_DATA_INT32


	)

437 
	#KSTAT_DATA_ULONG
 
KSTAT_DATA_UINT32


	)

439 #i‡!
deföed
(
_KERNEL
)

440 
	#KSTAT_DATA_LONG
 
KSTAT_DATA_INT64


	)

441 
	#KSTAT_DATA_ULONG
 
KSTAT_DATA_UINT64


	)

443 
	#KSTAT_DATA_LONG
 7

	)

444 
	#KSTAT_DATA_ULONG
 8

	)

450 
	#KSTAT_DATA_LONGLONG
 
KSTAT_DATA_INT64


	)

451 
	#KSTAT_DATA_ULONGLONG
 
KSTAT_DATA_UINT64


	)

452 
	#KSTAT_DATA_FLOAT
 5

	)

453 
	#KSTAT_DATA_DOUBLE
 6

	)

455 
	#KSTAT_NAMED_PTR
(
k±r
) ((
k°©_«med_t
 *)(k±r)->
ks_d©a
)

	)

476 
	#KSTAT_INTR_HARD
 0

	)

477 
	#KSTAT_INTR_SOFT
 1

	)

478 
	#KSTAT_INTR_WATCHDOG
 2

	)

479 
	#KSTAT_INTR_SPURIOUS
 3

	)

480 
	#KSTAT_INTR_MULTSVC
 4

	)

482 
	#KSTAT_NUM_INTRS
 5

	)

484 
	sk°©_öå
 {

485 
uöt_t
 
öås
[
KSTAT_NUM_INTRS
];

486 } 
	tk°©_öå_t
;

488 
	#KSTAT_INTR_PTR
(
k±r
) ((
k°©_öå_t
 *)(k±r)->
ks_d©a
)

	)

494 
	sk°©_io
 {

503 
u_l⁄gl⁄g_t
 
ƒód
;

504 
u_l⁄gl⁄g_t
 
nwrôãn
;

505 
uöt_t
 
ªads
;

506 
uöt_t
 
wrôes
;

581 
hπime_t
 
wtime
;

582 
hπime_t
 
wÀ¡ime
;

583 
hπime_t
 
wœ°upd©e
;

584 
hπime_t
 
πime
;

585 
hπime_t
 
æítime
;

586 
hπime_t
 
æa°upd©e
;

588 
uöt_t
 
w˙t
;

589 
uöt_t
 
r˙t
;

591 } 
	tk°©_io_t
;

593 
	#KSTAT_IO_PTR
(
k±r
) ((
k°©_io_t
 *)(k±r)->
ks_d©a
)

	)

602 
	sk°©_timî
 {

603 
«me
[
KSTAT_STRLEN
];

604 
uch¨_t
 
ªsv
;

605 
u_l⁄gl⁄g_t
 
num_evíts
;

606 
hπime_t
 
ñ≠£d_time
;

607 
hπime_t
 
mö_time
;

608 
hπime_t
 
max_time
;

609 
hπime_t
 
°¨t_time
;

610 
hπime_t
 
°›_time
;

611 } 
	tk°©_timî_t
;

613 
	#KSTAT_TIMER_PTR
(
k±r
) ((
k°©_timî_t
 *)(k±r)->
ks_d©a
)

	)

615 #if 
deföed
(
_KERNEL
)

617 
	~<sys/t_lock.h
>

619 
k°©_t
 *
k°©_chaö
;

620 
kmuãx_t
 
k°©_chaö_lock
;

621 
kid_t
 
k°©_chaö_id
;

622 
k°©_a˘ive
;

623 
k°©_öô
();

738 
k°©_t
 *
k°©_¸óã
(*, , *, *, 
uch¨_t
,

739 
uöt_t
, 
uch¨_t
);

754 
k°©_ö°Æl
(
k°©_t
 *);

771 
k°©_dñëe
(
k°©_t
 *);

782 
k°©_t
 *
k°©_lookup_by«me
(*, , *);

793 
k°©_t
 *
k°©_lookup_bykid
(
kid_t
);

807 
k°©_£t_°rög
(*, *);

821 
k°©_«med_öô
(
k°©_«med_t
 *, *, 
uch¨_t
);

822 
k°©_timî_öô
(
k°©_timî_t
 *, *);

830 
k°©_waôq_íãr
(
k°©_io_t
 *);

838 
k°©_waôq_exô
(
k°©_io_t
 *);

847 
k°©_runq_íãr
(
k°©_io_t
 *);

855 
k°©_runq_exô
(
k°©_io_t
 *);

864 
k°©_waôq_to_runq
(
k°©_io_t
 *);

872 
k°©_runq_back_to_waôq
(
k°©_io_t
 *);

879 
k°©_timî_°¨t
(
k°©_timî_t
 *);

880 
k°©_timî_°›
(
k°©_timî_t
 *);

884 #ifdef 
__˝lu•lus


	@/usr/include/sys/aio_req.h

5 #i‚de‡
_SYS_AIO_REQ_H


6 
	#_SYS_AIO_REQ_H


	)

8 #¥agm®
idít
 "@(#)aio_req.h 1.2 94/11/11 SMI"

10 
	~<sys/buf.h
>

12 #ifdef 
__˝lu•lus


16 #ifde‡
_KERNEL


21 
	saio_ªq
 {

22 
uio
 *
aio_uio
;

23 *
aio_¥iv©e
;

26 
≠hysio
((*)(), (*)(), 
dev_t
, , (*)(),

27 
aio_ªq
 *);

28 
™oˇn˚l
(
buf
 *);

32 #ifdef 
__˝lu•lus


	@/usr/include/sys/lwp.h

6 #i‚def 
_SYS_LWP_H


7 
	#_SYS_LWP_H


	)

9 #¥agm®
idít
 "@(#)lwp.h 1.30 98/01/06 SMI"

11 
	~<sys/synch.h
>

12 
	~<sys/uc⁄ãxt.h
>

14 #ifdef 
__˝lu•lus


21 
	#LWP_DETACHED
 0x00000040

	)

22 
	#LWP_SUSPENDED
 0x00000080

	)

28 
	#__LWP_ASLWP
 0x00000100

	)

33 
	slwpöfo
 {

34 
time°ruc_t
 
lwp_utime
;

35 
time°ruc_t
 
lwp_°ime
;

36 
lwpöfo_∑d
[64];

39 #i‡
deföed
(
_SYSCALL32
)

43 
	slwpöfo32
 {

44 
time°ruc32_t
 
lwp_utime
;

45 
time°ruc32_t
 
lwp_°ime
;

46 
öt32_t
 
lwpöfo_∑d
[64];

51 #i‚de‡
_KERNEL


53 
	tlwpid_t
;

55 
_lwp_makec⁄ãxt
(
uc⁄ãxt_t
 *, ((*)(*)),

56 *, *, 
ˇddr_t
, 
size_t
);

57 
_lwp_¸óã
(
uc⁄ãxt_t
 *, 
uöt_t
, 
lwpid_t
 *);

58 
_lwp_kûl
(
lwpid_t
, );

59 
_lwp_öfo
(
lwpöfo
 *);

60 
_lwp_exô
();

61 
_lwp_waô
(
lwpid_t
,Üwpid_t *);

62 
lwpid_t
 
_lwp_£lf
();

63 
_lwp_su•íd
(
lwpid_t
);

64 
_lwp_su•íd2
(
lwpid_t
, *);

65 
_lwp_c⁄töue
(
lwpid_t
);

66 
_lwp_£çriv©e
(*);

67 * 
_lwp_gë¥iv©e
();

71 #ifdef 
__˝lu•lus


	@/usr/include/sys/msacct.h

5 #i‚def 
_SYS_MSACCT_H


6 
	#_SYS_MSACCT_H


	)

8 #¥agm®
idít
 "@(#)msacct.h 1.7 93/07/13 SMI"

10 #ifdef 
__˝lu•lus


15 
	#LMS_USER
 0

	)

16 
	#LMS_SYSTEM
 1

	)

17 
	#LMS_TRAP
 2

	)

18 
	#LMS_TFAULT
 3

	)

19 
	#LMS_DFAULT
 4

	)

20 
	#LMS_KFAULT
 5

	)

21 
	#LMS_USER_LOCK
 6

	)

22 
	#LMS_SLEEP
 7

	)

23 
	#LMS_WAIT_CPU
 8

	)

24 
	#LMS_STOPPED
 9

	)

30 
	#NMSTATES
 10

	)

32 #ifdef 
__˝lu•lus


	@/usr/include/sys/stack.h

6 #i‚de‡
_SYS_STACK_H


7 
	#_SYS_STACK_H


	)

9 #¥agm®
idít
 "@(#)stack.h 1.10 99/05/04 SMI"

11 #i‡
deföed
(
i386
Ë|| deföed(
__i386
)

13 
	~<ü32/sys/°ack.h
>

15 #ñi‡
deföed
(
__ü64
)

17 
	~<ü64/sys/°ack.h
>

	@/usr/include/sys/vmem.h

6 #i‚de‡
_SYS_VMEM_H


7 
	#_SYS_VMEM_H


	)

9 #¥agm®
idít
 "@(#)vmem.h 1.3 99/12/04 SMI"

11 
	~<sys/ty≥s.h
>

13 #ifdef 
__˝lu•lus


17 
	#VM_SLEEP
 0x00000000

	)

18 
	#VM_NOSLEEP
 0x00000001

	)

19 
	#VM_PANIC
 0x00000002

	)

20 
	#VM_KMFLAGS
 0x000000ff

	)

22 
	#VM_BESTFIT
 0x00000100

	)

27 
	#VMEM_ALLOC
 0x01

	)

28 
	#VMEM_FREE
 0x02

	)

33 
	#VMEM_SPAN
 0x10

	)

35 
vmem
 
	tvmem_t
;

37 #ifde‡
_KERNEL


39 
vmem_öô
();

40 
vmem_k°©_öô
();

41 
vmem_mp_öô
();

43 
vmem_t
 *
vmem_¸óã
(c⁄° *, *, 
size_t
, size_t,

44 *(*)(
vmem_t
 *, 
size_t
, ), (*)(vmem_t *, *, size_t),

45 
vmem_t
 *, 
size_t
, );

46 
vmem_de°roy
(
vmem_t
 *);

47 *
vmem_Æloc
(
vmem_t
 *, 
size_t
, );

48 *
vmem_xÆloc
(
vmem_t
 *, 
size_t
, size_t, size_t, size_t,

50 
vmem_‰ì
(
vmem_t
 *, *, 
size_t
);

51 
vmem_x‰ì
(
vmem_t
 *, *, 
size_t
);

52 *
vmem_add
(
vmem_t
 *, *, 
size_t
, );

53 
vmem_c⁄èös
(
vmem_t
 *, *, 
size_t
);

54 
vmem_wÆk
(
vmem_t
 *, , (*)(*, *, 
size_t
), *);

55 
size_t
 
vmem_size
(
vmem_t
 *, );

59 #ifdef 
__˝lu•lus


	@/usr/include/ia32/sys/stack.h

6 #i‚de‡
_IA32_SYS_STACK_H


7 
	#_IA32_SYS_STACK_H


	)

9 #¥agm®
idít
 "@(#)stack.h 1.1 99/05/04 SMI"

11 #i‡!
deföed
(
_ASM
)

13 
	~<sys/ty≥s.h
>

17 #ifdef 
__˝lu•lus


39 
	#STACK_ALIGN32
 4

	)

40 
	#STACK_BIAS32
 0

	)

41 
	#SA32
(
X
) (((X)+(
STACK_ALIGN32
-1)Ë& ~(STACK_ALIGN32-1))

	)

42 
	#MINFRAME32
 0

	)

44 
	#STACK_ALIGN
 
STACK_ALIGN32


	)

45 
	#STACK_BIAS
 
STACK_BIAS32


	)

46 
	#SA
(
X
) 
	`SA32
(X)

	)

47 
	#MINFRAME
 
MINFRAME32


	)

49 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_ASM
)

51 
ªgs
;

53 
åa˚ªgs
(
ªgs
 *);

54 
åa˚back
(
ˇddr_t
);

55 
åa˚dump
();

59 
	#STACK_GROWTH_DOWN


	)

61 #ifdef 
__˝lu•lus


	@/usr/include/ia64/sys/stack.h

6 #i‚de‡
_IA64_SYS_STACK_H


7 
	#_IA64_SYS_STACK_H


	)

9 #¥agm®
idít
 "@(#)stack.h 1.1 99/05/04 SMI"

11 #i‡!
deföed
(
_ASM
)

13 
	~<sys/ty≥s.h
>

17 #ifdef 
__˝lu•lus


39 
	#STACK_ALIGN32
 4

	)

40 
	#STACK_BIAS32
 0

	)

41 
	#SA32
(
X
) (((X)+(
STACK_ALIGN32
-1)Ë& ~(STACK_ALIGN32-1))

	)

42 
	#MINFRAME32
 0

	)

47 
	#STACK_ALIGN
 16

	)

48 
	#STACK_BIAS
 0

	)

49 
	#SA
(
X
) (((X)+(
STACK_ALIGN
-1)Ë& ~(STACK_ALIGN-1))

	)

50 
	#MINFRAME
 16

	)

52 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_ASM
)

54 
ªgs
;

56 
åa˚ªgs
(
ªgs
 *);

57 
åa˚back
(
ˇddr_t
);

58 
åa˚dump
();

62 
	#STACK_GROWTH_DOWN


	)

64 #ifdef 
__˝lu•lus


	@/usr/include/sys/synch.h

6 #i‚def 
_SYS_SYNCH_H


7 
	#_SYS_SYNCH_H


	)

9 #¥agm®
idít
 "@(#)synch.h 1.37 99/11/16 SMI"

11 #i‚de‡
_ASM


12 
	~<sys/ty≥s.h
>

13 
	~<sys/öt_ty≥s.h
>

16 #ifdef 
__˝lu•lus


20 #i‚de‡
_ASM


36 
	s_lwp_muãx
 {

37 
	s_muãx_Êags
 {

38 
uöt16_t
 
Êag1
;

39 
uöt8_t
 
Êag2
;

40 
uöt8_t
 
˚ûög
;

41 
	u_mb˝_ty≥_un
 {

42 
uöt16_t
 
b˝ty≥
;

43 
	s_mty≥_rcou¡
 {

44 
uöt8_t
 
cou¡_ty≥1
;

45 
uöt8_t
 
cou¡_ty≥2
;

46 } 
mty≥_rcou¡
;

47 } 
mb˝_ty≥_un
;

48 
uöt16_t
 
magic
;

49 } 
Êags
;

50 
	u_muãx_lock_un
 {

51 
	s_muãx_lock
 {

52 
uöt8_t
 
∑d
[8];

53 } 
lock64
;

54 
u∑d64_t
 
ow√r64
;

55 } 
lock
;

56 
u∑d64_t
 
d©a
;

57 } 
	tlwp_muãx_t
;

66 
	s_lwp_c⁄d
 {

67 
	s_lwp_c⁄d_Êags
 {

68 
uöt8_t
 
	mÊag
[4];

69 
uöt16_t
 
	mty≥
;

70 
uöt16_t
 
	mmagic
;

71 } 
	mÊags
;

72 
u∑d64_t
 
	md©a
;

73 } 
	tlwp_c⁄d_t
;

80 
	s_lwp_£ma
 {

81 
uöt32_t
 
	mcou¡
;

82 
uöt16_t
 
	mty≥
;

83 
uöt16_t
 
	mmagic
;

84 
uöt8_t
 
	mÊags
[8];

85 
u∑d64_t
 
	md©a
;

86 } 
	tlwp_£ma_t
;

92 
	#USYNC_THREAD
 0x00

	)

93 
	#USYNC_PROCESS
 0x01

	)

96 
	#LOCK_NORMAL
 0x00

	)

97 
	#LOCK_ERRORCHECK
 0x02

	)

98 
	#LOCK_RECURSIVE
 0x04

	)

100 
	#USYNC_PROCESS_ROBUST
 0x08

	)

104 
	#LOCK_PRIO_NONE
 0x00

	)

105 
	#LOCK_PRIO_INHERIT
 0x10

	)

106 
	#LOCK_PRIO_PROTECT
 0x20

	)

107 
	#LOCK_STALL_NP
 0x00

	)

108 
	#LOCK_ROBUST_NP
 0x40

	)

113 
	#LOCK_OWNERDEAD
 0x1

	)

114 
	#LOCK_NOTRECOVERABLE
 0x2

	)

115 
	#LOCK_INITED
 0x4

	)

116 
	#LOCK_UNMAPPED
 0x8

	)

118 #ifdef 
__˝lu•lus


	@
1
.
1
/usr/include
123
2925
board.c
csbbs.h
csbbsproto.h
file.c
formore.c
formosa.c
forstr.c
login.c
mail.c
main.c
netio.c
post.c
protocol.c
protocol.h
talk.c
xyz.c
../lib/ap_board.c
/usr/include/arpa/inet.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/pwd.h
/usr/include/signal.h
/usr/include/stdarg.h
/usr/include/stdio.h
/usr/include/string.h
/usr/include/sys/file.h
/usr/include/sys/param.h
/usr/include/sys/resource.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/wait.h
/usr/include/syslog.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/iso/signal_iso.h
/usr/include/iso/stdarg_iso.h
/usr/include/iso/stdio_iso.h
/usr/include/iso/string_iso.h
/usr/include/iso/time_iso.h
/usr/include/net/if_dl.h
/usr/include/sys/byteorder.h
/usr/include/sys/errno.h
/usr/include/sys/fcntl.h
/usr/include/sys/feature_tests.h
/usr/include/sys/int_types.h
/usr/include/sys/inttypes.h
/usr/include/sys/isa_defs.h
/usr/include/sys/machtypes.h
/usr/include/sys/model.h
/usr/include/sys/mutex.h
/usr/include/sys/netconfig.h
/usr/include/sys/procset.h
/usr/include/sys/select.h
/usr/include/sys/siginfo.h
/usr/include/sys/signal.h
/usr/include/sys/stat_impl.h
/usr/include/sys/stream.h
/usr/include/sys/syslog.h
/usr/include/sys/t_lock.h
/usr/include/sys/time_impl.h
/usr/include/sys/time_std_impl.h
/usr/include/sys/types32.h
/usr/include/sys/uio.h
/usr/include/sys/un.h
/usr/include/sys/unistd.h
/usr/include/sys/user.h
/usr/include/sys/va_list.h
/usr/include/varargs.h
/usr/include/ia32/sys/machtypes.h
/usr/include/ia64/sys/machtypes.h
/usr/include/stdio_impl.h
/usr/include/stdio_tag.h
/usr/include/sys/auxv.h
/usr/include/sys/condvar.h
/usr/include/sys/cred.h
/usr/include/sys/debug.h
/usr/include/sys/int_const.h
/usr/include/sys/int_fmtio.h
/usr/include/sys/int_limits.h
/usr/include/sys/iso/signal_iso.h
/usr/include/sys/machlock.h
/usr/include/sys/machsig.h
/usr/include/sys/pcb.h
/usr/include/sys/poll.h
/usr/include/sys/proc.h
/usr/include/sys/regset.h
/usr/include/sys/rwlock.h
/usr/include/sys/semaphore.h
/usr/include/sys/strft.h
/usr/include/sys/strmdep.h
/usr/include/sys/ucontext.h
/usr/include/sys/vnode.h
/usr/include/sys/buf.h
/usr/include/sys/refstr.h
/usr/include/sys/reg.h
/usr/include/sys/segment.h
/usr/include/sys/task.h
/usr/include/sys/thread.h
/usr/include/sys/timer.h
/usr/include/sys/utrap.h
/usr/include/sys/watchpoint.h
/usr/include/vm/faultcode.h
/usr/include/vm/seg_enum.h
/usr/include/ia32/sys/reg.h
/usr/include/ia64/sys/reg.h
/usr/include/sys/copyops.h
/usr/include/sys/exacct_impl.h
/usr/include/sys/id_space.h
/usr/include/sys/klwp.h
/usr/include/sys/kmem.h
/usr/include/sys/kstat.h
/usr/include/sys/aio_req.h
/usr/include/sys/lwp.h
/usr/include/sys/msacct.h
/usr/include/sys/stack.h
/usr/include/sys/vmem.h
/usr/include/ia32/sys/stack.h
/usr/include/ia64/sys/stack.h
/usr/include/sys/synch.h
