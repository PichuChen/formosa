/*
 * 本程式用來取代 inetd 執行 tcp connection request
 * 為了系統安全而存在
 * 請小心設定 /etc/hosts.ip
 *                                          -- lmj@cc.nsysu.edu.tw
 */

/*
 * 含括檔
 */
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <sys/file.h>
#include <sys/wait.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <errno.h>
#include <signal.h>
#include <netdb.h>
#include <syslog.h>
#include <pwd.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
/* lasehu
#ifndef AIX
#include <sys/pathname.h>
#endif
*/

#include "csbbs.h"


/*
 * 參考檔路徑定義
 */
#define	PATH_DEVNULL	"/dev/null"
#if	defined(SOLARIS) || defined(AIX)
#define DEFAULT_TCPNETD	"/usr/sbin/tcpnetd"
#else
#define DEFAULT_TCPNETD	"/usr/etc/tcpnetd"
#endif


/*
 * 外部函數宣告
 */
extern int errno;

USEREC curuser;
USER_INFO uinfo;

int io_timeout_sec;
char maildirect[PATHLEN], boarddirect[PATHLEN] = "", treasuredirect[PATHLEN] = "";
short talkrequest = FALSE;
int debug = FALSE;

int client_version = 20;	/* default 2.0 */

int ifSayHello = FALSE;
int ifPass = FALSE;

BOARDHEADER *CurBList;

char from[16];
char *host;

int multi = 0;
int ifCert;

BOOL hasBMPerm = FALSE;

extern void talk_request();
extern void msq_request();


USER_INFO *cutmp;
int deny = 0;

char genbuf[4096];


void
csbbslog(const char *mode, const char *fmt, ...)
{
	va_list args;
	time_t now;
	int fd;
	char msgbuf[128], buf[128];
	char timestr[18];

	va_start(args, fmt);
	vsprintf(msgbuf, fmt, args);
	va_end(args);

	time(&now);
	strftime(timestr, sizeof(timestr), "%x %X", localtime(&now));

	sprintf(buf, "%s %.8s: %s\n", timestr, mode, msgbuf);
	if ((fd = open("log/csbbs.log", O_APPEND | O_CREAT | O_WRONLY, 0600)) > 0)
	{
		write(fd, buf, strlen(buf));
		close(fd);
	}
}

void
TimeOut(int s)
{
	if (ifPass)
	{
#if 1
		if (uinfo.active < 1 || uinfo.active > MAXACTIVE)
			csbbslog("ERR", "%s TimeOut user_logout: active[%d]", uinfo.userid, uinfo.active);
#endif
		user_logout(cutmp, &curuser);
	}
	ReleaseSocket();
	exit(1);
}

void
AbortBBS(int s)
{
	if (ifPass)
	{
#if 1
		if (uinfo.active < 1 || uinfo.active > MAXACTIVE)
			csbbslog("ERR", "%s AbortBBS user_logout: active[%d]", uinfo.userid, uinfo.active);
#endif
		user_logout(cutmp, &curuser);
	}
	ReleaseSocket();
	exit(1);
}

ReleaseSocket()
{
	shutdown(0, 2);
	shutdown(1, 2);
}


/*------------------------------------------------------------------------
 * reaper - clean up zombie children
 *------------------------------------------------------------------------
 */
static void
reaper()
{
#if	defined(SOLARIS) || defined(AIX)
	int status;

#else
	union wait status;

#endif /* SOLARIS */

	while (wait3(&status, WNOHANG, (struct rusage *) 0) > 0)
		/* empty */ ;
	(void) signal(SIGCHLD, reaper);
}



/*
 * Main
 *
 */
int
main(argc, argv)
int argc;
char *argv[];
{
	int aha, on = 1, maxs;
	fd_set ibits;
	struct sockaddr_in ifrom, sin;
	int s, ns;
	short check = 1;
	struct timeval wait;
	char buf[80], *pp;
	extern key_t utmp_semid;

	if ((argc > 1) && (!strcmp(argv[1], "d")))
	{
		debug = TRUE;

		printf("Process enter DEBUG mode now!!\n");

		init_bbsenv();

		strcpy(from, "local");
		signal(SIGALRM, TimeOut);
		signal(SIGHUP, AbortBBS);
		signal(SIGURG, AbortBBS);
		signal(SIGTERM, AbortBBS);
		signal(SIGQUIT, AbortBBS);
		signal(SIGINT, AbortBBS);
		signal(SIGTSTP, AbortBBS);
		signal(SIGUSR1, talk_request);
		signal(SIGUSR2, msq_request);		/* 送訊息 */
		Formosa();
		exit(0);	/* debug */
	}

	if (fork() != 0)
		exit(0);

	if ((pp = strrchr(argv[0], '/')))
		pp++;
	else
		pp = argv[0];

	if (argc > 1 && !strcmp(argv[1], "check"))
		check++;

	for (aha = 64; aha >= 0; aha--)
		close(aha);

	if ((aha = open(PATH_DEVNULL, O_RDONLY)) < 0)
		exit(1);
	if (aha)
	{
		dup2(aha, 0);
		close(aha);
	}
	dup2(0, 1);
	dup2(0, 2);

	signal(SIGHUP, SIG_IGN);
	signal(SIGCHLD, reaper);

	if ((s = socket(AF_INET, SOCK_STREAM, 0)) < 0)
		exit(1);

	setsockopt(s, SOL_SOCKET, SO_REUSEADDR, (char *) &on, sizeof(on));
#if defined(IP_OPTIONS) && defined(IPPROTO_IP)
	setsockopt(s, IPPROTO_IP, IP_OPTIONS, (char *) NULL, 0);
#endif

	sin.sin_family = AF_INET;
	sin.sin_addr.s_addr = INADDR_ANY;
	sin.sin_port = htons(CSBBS_SERVER_PORT);

	if (bind(s, (struct sockaddr *) &sin, sizeof sin) < 0 ||
#if	defined(SOLARIS) || defined(AIX)
	    listen(s, 256) < 0)
#else
	    listen(s, 5) < 0)
#endif
		exit(1);

	sprintf(buf, "/tmp/csbbsd.7716");
	unlink(buf);
	if ((aha = open(buf, O_WRONLY | O_CREAT, 0644)) > 0)
	{
		sprintf(buf, "%-d\n", getpid());
		write(aha, buf, strlen(buf));
		close(aha);
	}

	init_bbsenv();

	if (check)
		host_deny((char *) NULL);
	
	utmp_semid = sem_init(UTMPSEM_KEY);

	aha = sizeof(ifrom);
	maxs = s + 1;

	while (1)
	{
		FD_ZERO(&ibits);
		FD_SET(s, &ibits);

		wait.tv_sec = 5;
		wait.tv_usec = 0;
		
		if ((on = select(maxs, &ibits, 0, 0, &wait)) < 1)
		{
			if ((on < 0 && errno == EINTR) || on == 0)
				continue;
			else
			{
				shutdown(s, 2);
				close(s);
				if (fork())
					exit(0);
				else
				{
					execv((*(argv[0]) == '/') ? argv[0] : DEFAULT_TCPNETD,
					      argv);
					exit(-1);	/* debug */
				}
			}
		}
		if (!FD_ISSET(s, &ibits))
			continue;
		if ((ns = accept(s, (struct sockaddr *) &ifrom, &aha)) < 0)
			continue;
		else
		{
			switch (fork())
			{
				case -1:
					close(ns);
					break;
				case 0:
					{
						if (getuid() != BBS_UID)
						{
							setgid(BBS_GID);
							setuid(BBS_UID);
						}
						signal(SIGCHLD, SIG_IGN);
						close(s);
						dup2(ns, 0);
						close(ns);
						dup2(0, 1);
						dup2(0, 2);
						on = 1;
						setsockopt(0, SOL_SOCKET, SO_KEEPALIVE,
							   (char *) &on, sizeof(on));
						host = inet_ntoa(ifrom.sin_addr);
						if (check && host_deny(host))
						{
							deny = 1;
						}

						strcpy(from, host);
						signal(SIGALRM, TimeOut);
						signal(SIGTERM, AbortBBS);
						signal(SIGUSR1, talk_request);
						signal(SIGUSR2, msq_request);		/* 送訊息 */
						Formosa();

						shutdown(0, 2);
						exit(0);
					}
				default:
					close(ns);
			}
		}
	}
}
